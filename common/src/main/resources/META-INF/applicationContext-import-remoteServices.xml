<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by remoting/client//applicationContext-client.xml.vsl in andromda-spring-cartridge -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.1.xsd">

    <!-- ========================= Start of SERVICE DEFINITIONS ========================= -->

    <!-- FutureService Remote Service Local Proxy with inner FutureService Remote Service invoker -->
    <bean id="futureService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
                <property name="refreshStubOnConnectFailure"><value>true</value></property>
                <property name="serviceUrl"><value>${remoteRmiScheme}://${remoteServer}:${remotePort}/FutureService</value></property>
                <property name="serviceInterface"><value>ch.algotrader.service.FutureService</value></property>
            </bean>
        </property>
        <property name="proxyInterfaces"><value>ch.algotrader.service.FutureService</value></property>
    </bean>

    <!-- LazyLoaderService Remote Service Local Proxy with inner LazyLoaderService Remote Service invoker -->
    <bean id="lazyLoaderService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
                <property name="refreshStubOnConnectFailure"><value>true</value></property>
                <property name="serviceUrl"><value>${remoteRmiScheme}://${remoteServer}:${remotePort}/LazyLoaderService</value></property>
                <property name="serviceInterface"><value>ch.algotrader.service.LazyLoaderService</value></property>
            </bean>
        </property>
        <property name="proxyInterfaces"><value>ch.algotrader.service.LazyLoaderService</value></property>
    </bean>

    <!-- PositionService Remote Service Local Proxy with inner PositionService Remote Service invoker -->
    <bean id="positionService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
                <property name="refreshStubOnConnectFailure"><value>true</value></property>
                <property name="serviceUrl"><value>${remoteRmiScheme}://${remoteServer}:${remotePort}/PositionService</value></property>
                <property name="serviceInterface"><value>ch.algotrader.service.PositionService</value></property>
            </bean>
        </property>
        <property name="proxyInterfaces"><value>ch.algotrader.service.PositionService</value></property>
    </bean>

    <!-- OptionService Remote Service Local Proxy with inner OptionService Remote Service invoker -->
    <bean id="optionService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
                <property name="refreshStubOnConnectFailure"><value>true</value></property>
                <property name="serviceUrl"><value>${remoteRmiScheme}://${remoteServer}:${remotePort}/OptionService</value></property>
                <property name="serviceInterface"><value>ch.algotrader.service.OptionService</value></property>
            </bean>
        </property>
        <property name="proxyInterfaces"><value>ch.algotrader.service.OptionService</value></property>
    </bean>

    <!-- LookupService Remote Service Local Proxy with inner LookupService Remote Service invoker -->
    <bean id="lookupService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
                <property name="refreshStubOnConnectFailure"><value>true</value></property>
                <property name="serviceUrl"><value>${remoteRmiScheme}://${remoteServer}:${remotePort}/LookupService</value></property>
                <property name="serviceInterface"><value>ch.algotrader.service.LookupService</value></property>
            </bean>
        </property>
        <property name="proxyInterfaces"><value>ch.algotrader.service.LookupService</value></property>
    </bean>

    <!-- MarketDataService Remote Service Local Proxy with inner MarketDataService Remote Service invoker -->
    <bean id="marketDataService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
                <property name="refreshStubOnConnectFailure"><value>true</value></property>
                <property name="serviceUrl"><value>${remoteRmiScheme}://${remoteServer}:${remotePort}/MarketDataService</value></property>
                <property name="serviceInterface"><value>ch.algotrader.service.MarketDataService</value></property>
            </bean>
        </property>
        <property name="proxyInterfaces"><value>ch.algotrader.service.MarketDataService</value></property>
    </bean>

    <!-- OrderService Remote Service Local Proxy with inner OrderService Remote Service invoker -->
    <bean id="orderService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
                <property name="refreshStubOnConnectFailure"><value>true</value></property>
                <property name="serviceUrl"><value>${remoteRmiScheme}://${remoteServer}:${remotePort}/OrderService</value></property>
                <property name="serviceInterface"><value>ch.algotrader.service.OrderService</value></property>
            </bean>
        </property>
        <property name="proxyInterfaces"><value>ch.algotrader.service.OrderService</value></property>
    </bean>

    <!-- CombinationService Remote Service Local Proxy with inner CombinationService Remote Service invoker -->
    <bean id="combinationService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
                <property name="refreshStubOnConnectFailure"><value>true</value></property>
                <property name="serviceUrl"><value>${remoteRmiScheme}://${remoteServer}:${remotePort}/CombinationService</value></property>
                <property name="serviceInterface"><value>ch.algotrader.service.CombinationService</value></property>
            </bean>
        </property>
        <property name="proxyInterfaces"><value>ch.algotrader.service.CombinationService</value></property>
    </bean>

    <!-- MeasurementService Remote Service Local Proxy with inner MeasurementService Remote Service invoker -->
    <bean id="measurementService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
                <property name="refreshStubOnConnectFailure"><value>true</value></property>
                <property name="serviceUrl"><value>${remoteRmiScheme}://${remoteServer}:${remotePort}/MeasurementService</value></property>
                <property name="serviceInterface"><value>ch.algotrader.service.MeasurementService</value></property>
            </bean>
        </property>
        <property name="proxyInterfaces"><value>ch.algotrader.service.MeasurementService</value></property>
    </bean>

    <!-- PropertyService Remote Service Local Proxy with inner PropertyService Remote Service invoker -->
    <bean id="propertyService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
                <property name="refreshStubOnConnectFailure"><value>true</value></property>
                <property name="serviceUrl"><value>${remoteRmiScheme}://${remoteServer}:${remotePort}/PropertyService</value></property>
                <property name="serviceInterface"><value>ch.algotrader.service.PropertyService</value></property>
            </bean>
        </property>
        <property name="proxyInterfaces"><value>ch.algotrader.service.PropertyService</value></property>
    </bean>

    <!-- PortfolioService Remote Service Local Proxy with inner PortfolioService Remote Service invoker -->
    <bean id="portfolioService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
                <property name="refreshStubOnConnectFailure"><value>true</value></property>
                <property name="serviceUrl"><value>${remoteRmiScheme}://${remoteServer}:${remotePort}/PortfolioService</value></property>
                <property name="serviceInterface"><value>ch.algotrader.service.PortfolioService</value></property>
            </bean>
        </property>
        <property name="proxyInterfaces"><value>ch.algotrader.service.PortfolioService</value></property>
    </bean>

    <!-- CalendarService Remote Service Local Proxy with inner CalendarService Remote Service invoker -->
    <bean id="calendarService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
                <property name="refreshStubOnConnectFailure"><value>true</value></property>
                <property name="serviceUrl"><value>${remoteRmiScheme}://${remoteServer}:${remotePort}/CalendarService</value></property>
                <property name="serviceInterface"><value>ch.algotrader.service.CalendarService</value></property>
            </bean>
        </property>
        <property name="proxyInterfaces"><value>ch.algotrader.service.CalendarService</value></property>
    </bean>

    <!-- ========================= End of SERVICE DEFINITIONS ========================= -->


    <!-- ========================= Start of CLIENT SERVICE DEFINITIONS ========================= -->

    <bean id="ch.algotrader.service.ManagementServiceImpl" class="ch.algotrader.service.ManagementServiceImpl" >
        <property name="commonConfig" ref="commonConfig"/>
        <lookup-method name="getSubscriptionService" bean="subscriptionService"/>
        <lookup-method name="getLookupService" bean="lookupService"/>
        <lookup-method name="getPortfolioService" bean="portfolioService"/>
        <lookup-method name="getOrderService" bean="orderService"/>
        <lookup-method name="getPositionService" bean="positionService"/>
        <lookup-method name="getCombinationService" bean="combinationService"/>
        <lookup-method name="getPropertyService" bean="propertyService"/>
        <lookup-method name="getMarketDataService" bean="marketDataService"/>
        <lookup-method name="getConfigParams" bean="configParams"/>
        <!-- ManagementService service client property merge-point -->
    </bean>

    <!-- ManagementService Service Proxy with inner ManagementService Service Implementation -->
    <bean id="managementService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="ch.algotrader.service.ManagementServiceImpl"/>
        <property name="proxyInterfaces" value="ch.algotrader.service.ManagementService"/>
    </bean>

    <bean id="ch.algotrader.service.StrategyServiceImpl" class="ch.algotrader.service.StrategyServiceImpl" >
        <property name="commonConfig" ref="commonConfig"/>
        <lookup-method name="getFutureService" bean="futureService"/>
        <lookup-method name="getLookupService" bean="lookupService"/>
        <lookup-method name="getPositionService" bean="positionService"/>
        <lookup-method name="getOptionService" bean="optionService"/>
        <lookup-method name="getMarketDataService" bean="marketDataService"/>
        <lookup-method name="getOrderService" bean="orderService"/>
        <lookup-method name="getSubscriptionService" bean="subscriptionService"/>
        <lookup-method name="getMeasurementService" bean="measurementService"/>
        <lookup-method name="getHistoricalDataService" bean="historicalDataService"/>
        <lookup-method name="getCombinationService" bean="combinationService"/>
        <lookup-method name="getPropertyService" bean="propertyService"/>
        <lookup-method name="getPortfolioService" bean="portfolioService"/>
        <lookup-method name="getSecurityRetrieverService" bean="securityRetrieverService"/>
        <lookup-method name="getCalendarService" bean="calendarService"/>
        <!-- StrategyService service client property merge-point -->
    </bean>

    <!-- StrategyService Service Proxy with inner StrategyService Service Implementation -->
    <bean id="strategyService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="ch.algotrader.service.StrategyServiceImpl"/>
        <property name="proxyInterfaces" value="ch.algotrader.service.StrategyService"/>
    </bean>

    <bean id="ch.algotrader.service.SubscriptionServiceImpl" class="ch.algotrader.service.SubscriptionServiceImpl" >
        <property name="commonConfig" ref="commonConfig"/>
        <lookup-method name="getMarketDataService" bean="marketDataService"/>
        <lookup-method name="getLookupService" bean="lookupService"/>
        <property name="marketDataMessageListenerContainer" ref="marketDataMessageListenerContainer"/>
        <property name="genericMessageListenerContainer" ref="genericMessageListenerContainer"/>
    </bean>

    <!-- SubscriptionService Service Proxy with inner SubscriptionService Service Implementation -->
    <bean id="subscriptionService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="ch.algotrader.service.SubscriptionServiceImpl"/>
        <property name="proxyInterfaces" value="ch.algotrader.service.SubscriptionService"/>
    </bean>

    <bean id="ch.algotrader.service.ChartProvidingServiceImpl" class="ch.algotrader.service.ChartProvidingServiceImpl" >
        <property name="commonConfig" ref="commonConfig"/>
        <lookup-method name="getLookupService" bean="lookupService"/>
        <lookup-method name="getPortfolioService" bean="portfolioService"/>
        <!-- ChartProvidingService service client property merge-point -->
    </bean>

    <!-- ChartProvidingService Service Proxy with inner ChartProvidingService Service Implementation -->
    <bean id="chartProvidingService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="ch.algotrader.service.ChartProvidingServiceImpl"/>
        <property name="proxyInterfaces" value="ch.algotrader.service.ChartProvidingService"/>
    </bean>

    <bean id="ch.algotrader.service.PortfolioChartServiceImpl" class="ch.algotrader.service.PortfolioChartServiceImpl" >
        <property name="commonConfig" ref="commonConfig"/>
        <lookup-method name="getLookupService" bean="lookupService"/>
        <lookup-method name="getPortfolioService" bean="portfolioService"/>
        <property name="chartDefinition" ref="portfolioChartDefinition"/>
    </bean>

    <!-- PortfolioChartService Service Proxy with inner PortfolioChartService Service Implementation -->
    <bean id="portfolioChartService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="ch.algotrader.service.PortfolioChartServiceImpl"/>
        <property name="proxyInterfaces" value="ch.algotrader.service.PortfolioChartService"/>
    </bean>


    <!-- ========================= End of CLIENT SERVICE DEFINITIONS ========================= -->

    <!-- ========================= Start of PROFILE SERVICE DEFINITIONS ========================= -->

    <beans profile="historicalData">
        <!-- HistoricalDataService Remote Service Local Proxy with inner HistoricalDataService Remote Service invoker -->
        <bean id="historicalDataService" class="org.springframework.aop.framework.ProxyFactoryBean">
            <property name="target">
                <bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
                    <property name="refreshStubOnConnectFailure"><value>true</value></property>
                    <property name="serviceUrl"><value>${remoteRmiScheme}://${remoteServer}:${remotePort}/HistoricalDataService</value></property>
                    <property name="serviceInterface"><value>ch.algotrader.service.HistoricalDataService</value></property>
                </bean>
            </property>
            <property name="proxyInterfaces"><value>ch.algotrader.service.HistoricalDataService</value></property>
        </bean>
    </beans>

    <beans profile="securityRetrieval">
        <!-- SecurityRetrieverService Remote Service Local Proxy with inner SecurityRetrieverService Remote Service invoker -->
        <bean id="securityRetrieverService" class="org.springframework.aop.framework.ProxyFactoryBean">
            <property name="target">
                <bean class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
                    <property name="refreshStubOnConnectFailure"><value>true</value></property>
                    <property name="serviceUrl"><value>${remoteRmiScheme}://${remoteServer}:${remotePort}/SecurityRetrieverService</value></property>
                    <property name="serviceInterface"><value>ch.algotrader.service.SecurityRetrieverService</value></property>
                </bean>
            </property>
            <property name="proxyInterfaces"><value>ch.algotrader.service.SecurityRetrieverService</value></property>
        </bean>
    </beans>

    <!-- ========================= End of PROFILE SERVICE DEFINITIONS ========================= -->
</beans>
