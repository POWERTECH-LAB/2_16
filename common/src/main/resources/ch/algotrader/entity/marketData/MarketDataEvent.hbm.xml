<?xml version="1.0" encoding="UTF-8"?>
<!--
     Attention: Generated code! Do not modify by hand!
     Generated by: hibernate3/hibernate.hbm.xml.vsl in andromda-hibernate-cartridge.
  -->
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
          "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping default-cascade="none">
    <class name="ch.algotrader.entity.marketData.MarketDataEventImpl"
        table="`market_data_event`" dynamic-insert="false" dynamic-update="false" abstract="true">
	    <meta attribute="implements">ch.algotrader.entity.marketData.MarketDataEventI</meta>      
	    <meta attribute="generated-class">ch.algotrader.entity.marketData.MarketDataEvent</meta>
	    <meta attribute="class-code">
<![CDATA[	    
    /**
     * get the most recent price of this market data event. subclass need to implement this method
     * with appropriate logic
     * @return java.math.BigDecimal
     */
    public abstract java.math.BigDecimal getCurrentValue();

    /**
     * @see #getCurrentValue
     * @return double
     */
    public abstract double getCurrentValueDouble();

    /**
     * get the relevant market price that would need to be payed to close a corresponding position
     * with the specified {@code direction}.
     * @param direction 
     * @return java.math.BigDecimal
     */
    public abstract java.math.BigDecimal getMarketValue(ch.algotrader.enumeration.Direction direction);

    /**
     * @see #getMarketValue
     * @param direction 
     * @return double
     */
    public abstract double getMarketValueDouble(ch.algotrader.enumeration.Direction direction);

]]>   
	    </meta> 	    
        <meta attribute="class-description">Any type of market data related to a particular Security</meta>
        <cache usage="read-write" />
        <comment>Any type of market data related to a particular Security</comment>
        <id name="id" type="long" >
            <column name="ID" sql-type="BIGINT"/>
            <generator class="increment">
                <!-- id-generator merge-point -->
            </generator>
        </id>
        <property name="dateTime">
            <meta attribute="field-description">The dateTime of this MarketDataEvent</meta>
            <column name="DATE_TIME" not-null="true" unique="false" sql-type="TIMESTAMP">
                <comment>The dateTime of this MarketDataEvent</comment>
            </column>
            <type name="java.util.Date"/>
        </property>
        <property name="feedType">
            <meta attribute="field-description">The market data feed that provided this  MarketDataEvent</meta>
            <meta attribute="property-type">ch.algotrader.enumeration.FeedType</meta>
            <column name="FEED_TYPE" not-null="true" unique="false" sql-type="VARCHAR(255)">
                <comment>The market data feed that provided this  MarketDataEvent</comment>
            </column>
            <type name="ch.algotrader.hibernate.HibernateEnumType">
                 <param name="enumClassName">ch.algotrader.enumeration.FeedType</param>
            </type>
        </property>
        <many-to-one name="security" class="ch.algotrader.entity.security.SecurityImpl" foreign-key="MARKET_DATA_EVENT_SECURITY_FKC" not-null="true" lazy="proxy" fetch="select">
            <meta attribute="property-type">ch.algotrader.entity.security.Security</meta>
            <meta attribute="field-description">The base class of all Securities in the system</meta>
            <column name="SECURITY_FK" not-null="true" sql-type="BIGINT">
                <comment>The base class of all Securities in the system</comment>
            </column>
        </many-to-one>
        <union-subclass name="ch.algotrader.entity.marketData.BarImpl" table="`bar`" dynamic-insert="false" dynamic-update="false" abstract="false">
            <meta attribute="implements">ch.algotrader.entity.marketData.BarI</meta>
            <meta attribute="generated-class">ch.algotrader.entity.marketData.Bar</meta>
            <meta attribute="class-code">
<![CDATA[
]]>   
            </meta>  
            <property name="barSize">
                <meta attribute="field-description">The size of this Bar (e.g. 1Min, 15Min, 1Hour, etc..)</meta>
                <meta attribute="property-type">ch.algotrader.enumeration.Duration</meta>
                <column name="BAR_SIZE" not-null="true" unique="true" sql-type="BIGINT">
                    <comment>The size of this Bar (e.g. 1Min, 15Min, 1Hour, etc..)</comment>
                </column>
                <type name="ch.algotrader.hibernate.HibernateEnumType">
                 <param name="enumClassName">ch.algotrader.enumeration.Duration</param>
                </type>
            </property>
            <property name="open">
                <meta attribute="field-description">The opening price of this Bar</meta>
                <column name="OPEN" not-null="true" unique="false" sql-type="Decimal(15,6)">
                    <comment>The opening price of this Bar</comment>
                </column>
                <type name="java.math.BigDecimal"/>
            </property>
            <property name="high">
                <meta attribute="field-description">The highest price during this Bar</meta>
                <column name="HIGH" not-null="true" unique="false" sql-type="Decimal(15,6)">
                    <comment>The highest price during this Bar</comment>
                </column>
                <type name="java.math.BigDecimal"/>
            </property>
            <property name="low">
                <meta attribute="field-description">The lowest price during this Bar</meta>
                <column name="LOW" not-null="true" unique="false" sql-type="Decimal(15,6)">
                    <comment>The lowest price during this Bar</comment>
                </column>
                <type name="java.math.BigDecimal"/>
            </property>
            <property name="close">
                <meta attribute="field-description">The closing price of this Bar</meta>
                <column name="CLOSE" not-null="true" unique="false" sql-type="Decimal(15,6)">
                    <comment>The closing price of this Bar</comment>
                </column>
                <type name="java.math.BigDecimal"/>
            </property>
            <property name="vol">
                <meta attribute="field-description">The current volume</meta>
                <column name="VOL" not-null="true" unique="false" sql-type="INTEGER">
                    <comment>The current volume</comment>
                </column>
                <type name="int"/>
            </property>
        </union-subclass>
        <union-subclass name="ch.algotrader.entity.marketData.TickImpl" table="`tick`" dynamic-insert="false" dynamic-update="false" abstract="false">
            <meta attribute="implements">ch.algotrader.entity.marketData.TickI</meta>
            <meta attribute="generated-class">ch.algotrader.entity.marketData.Tick</meta>
            <meta attribute="class-code">
<![CDATA[
    /**
     * gets the difference between the bid and the ask price.
     * @return java.math.BigDecimal
     */
    public abstract java.math.BigDecimal getBidAskSpread();

    /**
     * @see #getBidAskSpread
     * @return double
     */
    public abstract double getBidAskSpreadDouble();

]]>   
            </meta>  
            <property name="last">
                <meta attribute="field-description">The last price.</meta>
                <column name="LAST" not-null="false" unique="false" sql-type="Decimal(15,6)">
                    <comment>The last price.</comment>
                </column>
                <type name="java.math.BigDecimal"/>
            </property>
            <property name="lastDateTime">
                <meta attribute="field-description">The dateTime of the last trade.</meta>
                <column name="LAST_DATE_TIME" not-null="false" unique="false" sql-type="TIMESTAMP">
                    <comment>The dateTime of the last trade.</comment>
                </column>
                <type name="java.util.Date"/>
            </property>
            <property name="bid">
                <meta attribute="field-description">The bid price.</meta>
                <column name="BID" not-null="false" unique="false" sql-type="Decimal(15,6)">
                    <comment>The bid price.</comment>
                </column>
                <type name="java.math.BigDecimal"/>
            </property>
            <property name="ask">
                <meta attribute="field-description">The ask price.</meta>
                <column name="ASK" not-null="false" unique="false" sql-type="Decimal(15,6)">
                    <comment>The ask price.</comment>
                </column>
                <type name="java.math.BigDecimal"/>
            </property>
            <property name="volBid">
                <meta attribute="field-description">The volume on the bid side.</meta>
                <column name="VOL_BID" not-null="true" unique="false" sql-type="INTEGER">
                    <comment>The volume on the bid side.</comment>
                </column>
                <type name="int"/>
            </property>
            <property name="volAsk">
                <meta attribute="field-description">The volume on the ask side.</meta>
                <column name="VOL_ASK" not-null="true" unique="false" sql-type="INTEGER">
                    <comment>The volume on the ask side.</comment>
                </column>
                <type name="int"/>
            </property>
            <property name="vol">
                <meta attribute="field-description">The current volume</meta>
                <column name="VOL" not-null="true" unique="false" sql-type="INTEGER">
                    <comment>The current volume</comment>
                </column>
                <type name="int"/>
            </property>
        </union-subclass>
        <union-subclass name="ch.algotrader.entity.marketData.GenericTickImpl" table="`generic_tick`" dynamic-insert="false" dynamic-update="false" abstract="false">
            <meta attribute="implements">ch.algotrader.entity.marketData.GenericTickI</meta>
            <meta attribute="generated-class">ch.algotrader.entity.marketData.GenericTick</meta>
            <meta attribute="class-code">
<![CDATA[
]]>   
            </meta>  
            <property name="tickType">
                <meta attribute="property-type">ch.algotrader.enumeration.TickType</meta>
                <column name="TICK_TYPE" not-null="true" unique="false" sql-type="VARCHAR(255)"/>
                <type name="ch.algotrader.hibernate.HibernateEnumType">
                 <param name="enumClassName">ch.algotrader.enumeration.TickType</param>
                </type>
            </property>
            <property name="moneyValue">
                <column name="MONEY_VALUE" not-null="false" unique="false" sql-type="Decimal(15,6)"/>
                <type name="java.math.BigDecimal"/>
            </property>
            <property name="doubleValue">
                <column name="DOUBLE_VALUE" not-null="false" unique="false" sql-type="DOUBLE"/>
                <type name="java.lang.Double"/>
            </property>
            <property name="intValue">
                <column name="INT_VALUE" not-null="false" unique="false" sql-type="INTEGER"/>
                <type name="java.lang.Integer"/>
            </property>
        </union-subclass>
    </class>
</hibernate-mapping>
