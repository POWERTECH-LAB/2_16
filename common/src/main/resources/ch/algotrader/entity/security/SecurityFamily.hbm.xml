<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
          "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping default-cascade="none">
    <class name="ch.algotrader.entity.security.SecurityFamilyImpl"
        table="`security_family`" dynamic-insert="false" dynamic-update="false">
	    <meta attribute="implements">ch.algotrader.entity.security.SecurityFamilyI</meta>      
	    <meta attribute="generated-class">ch.algotrader.entity.security.SecurityFamily</meta>
	    <meta attribute="class-code">
<![CDATA[
    /**
     * Gets the {@code baseSymbol} defined by the corresponding {@link BrokerParameters} or from
     * this SecurityFamily as a fallback.
     * @param broker 
     * @return java.lang.String
     */
    public abstract java.lang.String getSymbolRoot(java.lang.String broker);

    /**
     * Gets the {@code contractSize} defined by the corresponding {@link BrokerParameters} or from
     * this SecurityFamily as a fallback.
     * @param broker 
     * @return double
     */
    public abstract double getContractSize(java.lang.String broker);

    /**
     * Gets the {@code scale} defined by the corresponding {@link BrokerParameters} or from this
     * SecurityFamily as a fallback.
     * @param broker 
     * @return int
     */
    public abstract int getScale(java.lang.String broker);

    /**
     * Gets the {@code tickSizePattern} defined by the corresponding {@link BrokerParameters} or
     * from this SecurityFamily as a fallback.
     * @param broker 
     * @return java.lang.String
     */
    public abstract java.lang.String getTickSizePattern(java.lang.String broker);

    /**
     * Gets the {@code executionCommission} defined by the corresponding {@link BrokerParameters} or
     * from this SecurityFamily as a fallback.
     * @param broker 
     * @return java.math.BigDecimal
     */
    public abstract java.math.BigDecimal getExecutionCommission(java.lang.String broker);

    /**
     * Gets the {@code clearingCommission} defined by the corresponding {@link BrokerParameters} or
     * from this SecurityFamily as a fallback.
     * @param broker 
     * @return java.math.BigDecimal
     */
    public abstract java.math.BigDecimal getClearingCommission(java.lang.String broker);

    /**
     * Gets the {@code fee} defined by the corresponding {@link BrokerParameters} or from this
     * SecurityFamily as a fallback.
     * @param broker 
     * @return java.math.BigDecimal
     */
    public abstract java.math.BigDecimal getFee(java.lang.String broker);

    /**
     * Gets the {@code totalCharges} defined by the corresponding {@link BrokerParameters} or from
     * this SecurityFamily as a fallback.
     * @param broker 
     * @return java.math.BigDecimal
     */
    public abstract java.math.BigDecimal getTotalCharges(java.lang.String broker);

    /**
     * Gets the {@code priceMultiplier} defined by the corresponding {@link BrokerParameters} or
     * from this SecurityFamily as a fallback.
     * @param broker 
     * @return double
     */
    public abstract double getPriceMultiplier(java.lang.String broker);

    /**
     * Gets the current Spread between {@code bid} and {@code ask} in number of Ticks.
     * @param broker 
     * @param bid 
     * @param ask 
     * @return int
     */
    public abstract int getSpreadTicks(java.lang.String broker, java.math.BigDecimal bid, java.math.BigDecimal ask);

    /**
     * Gets the Tick Size (as a double) for prices above (if upwards = true) or below (for upwards =
     * false) the specified {@code price}
     * @param broker 
     * @param price 
     * @param upwards 
     * @return double
     */
    public abstract double getTickSize(java.lang.String broker, double price, boolean upwards);

    /**
     * Gets the Tick Size (as a Money) for prices above (if upwards = true) or below (for upwards =
     * false) the specified {@code price}
     * @param broker 
     * @param price 
     * @param upwards 
     * @return java.math.BigDecimal
     */
    public abstract java.math.BigDecimal getTickSize(java.lang.String broker, java.math.BigDecimal price, boolean upwards);

    /**
     * Adjusts the specified price by the number of {@code ticks}
     * @param broker 
     * @param price 
     * @param ticks 
     * @return java.math.BigDecimal
     */
    public abstract java.math.BigDecimal adjustPrice(java.lang.String broker, java.math.BigDecimal price, int ticks);

    /**
     * Adjusts the specified price by the number of {@code ticks}
     * @param broker 
     * @param price 
     * @param ticks 
     * @return double
     */
    public abstract double adjustPrice(java.lang.String broker, double price, int ticks);

    /**
     * Rounds the specified price up to the next tick
     * @param broker 
     * @param price 
     * @return java.math.BigDecimal
     */
    public abstract java.math.BigDecimal roundUp(java.lang.String broker, java.math.BigDecimal price);

    /**
     * Rounds the specified price up to the next tick
     * @param broker 
     * @param price 
     * @return double
     */
    public abstract double roundUp(java.lang.String broker, double price);

    /**
     * Rounds the specified price down to the next tick
     * @param broker 
     * @param price 
     * @return java.math.BigDecimal
     */
    public abstract java.math.BigDecimal roundDown(java.lang.String broker, java.math.BigDecimal price);

    /**
     * Rounds the specified price down to the next tick
     * @param broker 
     * @param price 
     * @return double
     */
    public abstract double roundDown(java.lang.String broker, double price);

]]>   
	    </meta> 	    
        <meta attribute="class-description"><![CDATA[Represents an entire family of similar {@link ch.algotrader.entity.security.Security Securities} (e.g. All Options of the SP500)]]></meta>
        <cache usage="read-write" />
        <id name="id" type="long" >
            <column name="ID" sql-type="BIGINT"/>

            <generator class="native">
                <!-- id-generator merge-point -->
            </generator>
        </id>
        <property name="name">
            <meta attribute="field-description"><![CDATA[The name of this SecurityFamily]]></meta>
            <meta attribute="use-in-equals">true</meta>
            <column name="NAME" not-null="true" unique="false" sql-type="VARCHAR(255)"/>

            <type name="java.lang.String"/>
        </property>
        <property name="symbolRoot">
            <meta attribute="field-description"><![CDATA[The common part of Symbol (e.g. VIX for the VIX Future FVIX AUG/10 1000)]]></meta>
            <column name="SYMBOL_ROOT" not-null="false" unique="false" sql-type="VARCHAR(255)"/>

            <type name="java.lang.String"/>
        </property>
        <property name="isinRoot">
            <meta attribute="field-description"><![CDATA[The common part of the ISIN (e.g. VIX for the VIX Future 0FVIXFD00000). If no value is set the {@code baseSymbol} is taken.]]></meta>
            <column name="ISIN_ROOT" not-null="false" unique="false" sql-type="VARCHAR(255)"/>

            <type name="java.lang.String"/>
        </property>
        <property name="ricRoot">
            <meta attribute="field-description"><![CDATA[The common part of RIC (e.g. VX for the VIX Future VXQ1:VE). If no value is set the {@code baseSymbol} is taken.]]></meta>
            <column name="RIC_ROOT" not-null="false" unique="false" sql-type="VARCHAR(255)"/>

            <type name="java.lang.String"/>
        </property>
        <property name="currency">
            <meta attribute="field-description"><![CDATA[The currency of the Securities of this SecurityFamily]]></meta>
            <meta attribute="property-type">ch.algotrader.enumeration.Currency</meta>
            <column name="CURRENCY" not-null="true" unique="false" sql-type="VARCHAR(255)"/>

            <type name="ch.algotrader.hibernate.HibernateEnumType">
                 <param name="enumClassName">ch.algotrader.enumeration.Currency</param>
            </type>
        </property>
        <property name="contractSize">
            <meta attribute="field-description"><![CDATA[The contractSize of the Securities of this SecurityFamily (e.g. 100 for SPX Options).]]></meta>
            <column name="CONTRACT_SIZE" not-null="true" unique="false" sql-type="DOUBLE"/>

            <type name="double"/>
        </property>
        <property name="scale">
            <meta attribute="field-description"><![CDATA[The number of digits that prices of Securities of this SecurityFamily are quoted in.]]></meta>
            <column name="SCALE" not-null="true" unique="false" sql-type="INTEGER"/>

            <type name="int"/>
        </property>
        <property name="tickSizePattern">
            <meta attribute="field-description"><![CDATA[A {@link java.text.ChoiceFormat} representing a pattern that defines the TickSize at different Price Levels.
<p>
For example the pattern "0&lt;0.05 | 3&lt;0.1" says, that the TickSize is 0.05 for prices from 0 to (but not including) 3 and 0.1 for prices above 3.]]></meta>
            <column name="TICK_SIZE_PATTERN" not-null="true" unique="false" sql-type="VARCHAR(255)"/>

            <type name="java.lang.String"/>
        </property>
        <property name="executionCommission">
            <meta attribute="field-description"><![CDATA[The Execution Commission for one Contract of a Security of this SecurityFamily.]]></meta>
            <column name="EXECUTION_COMMISSION" not-null="false" unique="false" sql-type="Decimal(15,6)"/>

            <type name="java.math.BigDecimal"/>
        </property>
        <property name="clearingCommission">
            <meta attribute="field-description"><![CDATA[The Clearing Commission for one Contract of a Security of this SecurityFamily.]]></meta>
            <column name="CLEARING_COMMISSION" not-null="false" unique="false" sql-type="Decimal(15,6)"/>

            <type name="java.math.BigDecimal"/>
        </property>
        <property name="fee">
            <meta attribute="field-description"><![CDATA[The Exchange Fee for one Contract of a Security of this SecurityFamily.]]></meta>
            <column name="FEE" not-null="false" unique="false" sql-type="Decimal(15,6)"/>

            <type name="java.math.BigDecimal"/>
        </property>
        <property name="tradeable">
            <meta attribute="field-description"><![CDATA[Represents a Security for which an order can be directly sent to the Market or via an OTC order]]></meta>
            <column name="TRADEABLE" not-null="true" unique="false" sql-type="TINYINT"/>

            <type name="boolean"/>
        </property>
        <property name="synthetic">
            <meta attribute="field-description"><![CDATA[Represents virtual Securities that are only known to the Framework. Market Data needs to be calculated manually (e.g. a Combination)]]></meta>
            <column name="SYNTHETIC" not-null="true" unique="false" sql-type="TINYINT"/>

            <type name="boolean"/>
        </property>
        <property name="periodicity">
            <meta attribute="field-description"><![CDATA[Periodicity when Market Data is saved to the database (DAY, HOUR or MINUTE). Not valid for synthetic securities]]></meta>
            <meta attribute="property-type">ch.algotrader.enumeration.TimePeriod</meta>
            <column name="PERIODICITY" not-null="false" unique="false" sql-type="VARCHAR(255)"/>

            <type name="ch.algotrader.hibernate.HibernateEnumType">
                 <param name="enumClassName">ch.algotrader.enumeration.TimePeriod</param>
            </type>
        </property>
        <property name="maxGap">
            <meta attribute="field-description"><![CDATA[The Maximum Market Data Gap (in minutes) that is expected in normal Market Conditions. An exception is thrown if no market data arrives for a period longer than this value which might indicate a problem with the external Market Data Provider.]]></meta>
            <column name="MAX_GAP" not-null="false" unique="false" sql-type="INTEGER"/>

            <type name="java.lang.Integer"/>
        </property>
        <many-to-one name="underlying" class="ch.algotrader.entity.security.SecurityImpl" foreign-key="SECURITY_FAMILY_UNDERLYING_FKC" not-null="false" lazy="proxy" fetch="select">
            <meta attribute="property-type">ch.algotrader.entity.security.Security</meta>
            <meta attribute="field-description"><![CDATA[The base class of all Securities in the system]]></meta>
            <column name="UNDERLYING_FK" not-null="false" sql-type="BIGINT"/>

        </many-to-one>
        <many-to-one name="exchange" class="ch.algotrader.entity.exchange.ExchangeImpl" foreign-key="SECURITY_FAMILY_EXCHANGE_FKC" not-null="false" lazy="proxy" fetch="select">
            <meta attribute="property-type">ch.algotrader.entity.exchange.Exchange</meta>
            <meta attribute="field-description"><![CDATA[Exchange where securities are traded]]></meta>
            <column name="EXCHANGE_FK" not-null="false" sql-type="BIGINT"/>

        </many-to-one>
        <set name="securities" order-by="SECURITY_FAMILY_FK" lazy="true" fetch="select" inverse="true">
            <meta attribute="field-description"><![CDATA[Represents an entire family of similar {@link ch.algotrader.entity.security.Security Securities}
(e.g. All Options of the SP500)]]></meta>
            <cache usage="read-write" />
            <key foreign-key="SECURITY_SECURITY_FAMILY_FKC">
                <column name="SECURITY_FAMILY_FK" sql-type="BIGINT"/>

            </key>
            <one-to-many class="ch.algotrader.entity.security.SecurityImpl" not-found="exception"/>
        </set>
        <map name="brokerParameters" order-by="SECURITY_FAMILY_FK" lazy="false" fetch="select" inverse="true" cascade="delete">
            <meta attribute="field-description"><![CDATA[Represents an entire family of similar {@link ch.algotrader.entity.security.Security Securities}
(e.g. All Options of the SP500)]]></meta>
            <cache usage="read-write" />
            <key foreign-key="BROKER_PARAMETERS_SECURITY_FAC">
                <column name="SECURITY_FAMILY_FK" sql-type="BIGINT"/>

            </key>
            <map-key column="BROKER" type="java.lang.String"/>
            <one-to-many class="ch.algotrader.entity.security.BrokerParametersImpl" not-found="exception"/>
        </map>
        <joined-subclass name="ch.algotrader.entity.security.FutureFamilyImpl" table="`future_family`" dynamic-insert="false" dynamic-update="false" abstract="false">
            <meta attribute="implements">ch.algotrader.entity.security.FutureFamilyI,ch.algotrader.entity.security.ExpirableFamilyI</meta>
            <meta attribute="generated-class">ch.algotrader.entity.security.FutureFamily</meta>
            <meta attribute="class-code">
<![CDATA[
]]>   
            </meta> 	    
            <key foreign-key="FUTURE_FAMILYIFKC">
                <column name="ID" sql-type="BIGINT"/>
            </key>
            <property name="intrest">
                <meta attribute="field-description"><![CDATA[The current Intrest relevant to the pricing of {@link Future Futures} of this FutureFamily.]]></meta>
                <column name="INTREST" not-null="true" unique="false" sql-type="DOUBLE"/>

                <type name="double"/>
            </property>
            <property name="dividend">
                <meta attribute="field-description"><![CDATA[The current Dividend relevant to the pricing of {@link Future Futures} of this FutureFamily.]]></meta>
                <column name="DIVIDEND" not-null="true" unique="false" sql-type="DOUBLE"/>

                <type name="double"/>
            </property>
            <property name="expirationType">
                <meta attribute="field-description"><![CDATA[The Type of Expiration Logic utilized by {@link Future Futures} of this FutureFamily.]]></meta>
                <meta attribute="property-type">ch.algotrader.enumeration.ExpirationType</meta>
                <column name="EXPIRATION_TYPE" not-null="true" unique="false" sql-type="VARCHAR(255)"/>

                <type name="ch.algotrader.hibernate.HibernateEnumType">
                 <param name="enumClassName">ch.algotrader.enumeration.ExpirationType</param>
                </type>
            </property>
            <property name="expirationDistance">
                <meta attribute="field-description"><![CDATA[The {@link Duration} between two {@link Future Futures} of this FutureFamily. (e.g. 3 Months for EUR.USD Forex Futures)]]></meta>
                <meta attribute="property-type">ch.algotrader.enumeration.Duration</meta>
                <column name="EXPIRATION_DISTANCE" not-null="true" unique="false" sql-type="BIGINT"/>

                <type name="ch.algotrader.hibernate.HibernateEnumType">
                 <param name="enumClassName">ch.algotrader.enumeration.Duration</param>
                </type>
            </property>
            <property name="length">
                <meta attribute="field-description"><![CDATA[Represents the length of this Future Chain (i.e. how many Futures exist at one particular point in time)]]></meta>
                <column name="LENGTH" not-null="true" unique="false" sql-type="INTEGER"/>

                <type name="int"/>
            </property>
        </joined-subclass>
        <joined-subclass name="ch.algotrader.entity.security.OptionFamilyImpl" table="`option_family`" dynamic-insert="false" dynamic-update="false" abstract="false">
            <meta attribute="implements">ch.algotrader.entity.security.OptionFamilyI,ch.algotrader.entity.security.ExpirableFamilyI</meta>
            <meta attribute="generated-class">ch.algotrader.entity.security.OptionFamily</meta>
            <meta attribute="class-code">
<![CDATA[
]]>   
            </meta> 	    
            <key foreign-key="OPTION_FAMILYIFKC">
                <column name="ID" sql-type="BIGINT"/>
            </key>
            <property name="intrest">
                <meta attribute="field-description"><![CDATA[The current Intrest relevant to the pricing of {@link Option Options} of this OptionFamily.]]></meta>
                <column name="INTREST" not-null="true" unique="false" sql-type="DOUBLE"/>

                <type name="double"/>
            </property>
            <property name="dividend">
                <meta attribute="field-description"><![CDATA[The current Dividend relevant to the pricing of {@link Option Options} of this OptionFamily.]]></meta>
                <column name="DIVIDEND" not-null="true" unique="false" sql-type="DOUBLE"/>

                <type name="double"/>
            </property>
            <property name="expirationType">
                <meta attribute="field-description"><![CDATA[The Type of Expiration Logic utilized by {@link Option Options} of this OptionFamily.]]></meta>
                <meta attribute="property-type">ch.algotrader.enumeration.ExpirationType</meta>
                <column name="EXPIRATION_TYPE" not-null="true" unique="false" sql-type="VARCHAR(255)"/>

                <type name="ch.algotrader.hibernate.HibernateEnumType">
                 <param name="enumClassName">ch.algotrader.enumeration.ExpirationType</param>
                </type>
            </property>
            <property name="expirationDistance">
                <meta attribute="field-description"><![CDATA[The {@link Duration} between two {@link Option Options} of this OptionFamily. (e.g. 1 Month for VIX Options)]]></meta>
                <meta attribute="property-type">ch.algotrader.enumeration.Duration</meta>
                <column name="EXPIRATION_DISTANCE" not-null="true" unique="false" sql-type="BIGINT"/>

                <type name="ch.algotrader.hibernate.HibernateEnumType">
                 <param name="enumClassName">ch.algotrader.enumeration.Duration</param>
                </type>
            </property>
            <property name="strikeDistance">
                <meta attribute="field-description"><![CDATA[The distance between two strikes of {@link Option Options} of this OptionFamily.]]></meta>
                <column name="STRIKE_DISTANCE" not-null="true" unique="false" sql-type="DOUBLE"/>

                <type name="double"/>
            </property>
            <property name="weekly">
                <meta attribute="field-description"><![CDATA[marks a weekly option series as opposed to a monthly option series]]></meta>
                <column name="WEEKLY" not-null="true" unique="false" sql-type="TINYINT"/>

                <type name="boolean"/>
            </property>
        </joined-subclass>
        <joined-subclass name="ch.algotrader.entity.security.GenericFutureFamilyImpl" table="`generic_future_family`" dynamic-insert="false" dynamic-update="false" abstract="false">
            <meta attribute="implements">ch.algotrader.entity.security.GenericFutureFamilyI,ch.algotrader.entity.security.ExpirableFamilyI</meta>
            <meta attribute="generated-class">ch.algotrader.entity.security.GenericFutureFamily</meta>
            <meta attribute="class-code">
<![CDATA[
]]>   
            </meta> 	    
            <key foreign-key="GENERIC_FUTURE_FAMILYIFKC">
                <column name="ID" sql-type="BIGINT"/>
            </key>
            <property name="expirationType">
                <meta attribute="field-description"><![CDATA[The Type of Expiration Logic utilized by {@link GenericFuture GenericFutures} of this GenericFutureFamily.]]></meta>
                <meta attribute="property-type">ch.algotrader.enumeration.ExpirationType</meta>
                <column name="EXPIRATION_TYPE" not-null="true" unique="false" sql-type="VARCHAR(255)"/>

                <type name="ch.algotrader.hibernate.HibernateEnumType">
                 <param name="enumClassName">ch.algotrader.enumeration.ExpirationType</param>
                </type>
            </property>
            <property name="expirationDistance">
                <meta attribute="field-description"><![CDATA[The {@link Duration} between two {@link GenericFuture GenericFutures} of this GenericFutureFamily. (e.g. 1 Month for UX)]]></meta>
                <meta attribute="property-type">ch.algotrader.enumeration.Duration</meta>
                <column name="EXPIRATION_DISTANCE" not-null="true" unique="false" sql-type="BIGINT"/>

                <type name="ch.algotrader.hibernate.HibernateEnumType">
                 <param name="enumClassName">ch.algotrader.enumeration.Duration</param>
                </type>
            </property>
        </joined-subclass>
        <joined-subclass name="ch.algotrader.entity.security.BondFamilyImpl" table="`bond_family`" dynamic-insert="false" dynamic-update="false" abstract="false">
            <meta attribute="implements">ch.algotrader.entity.security.BondFamilyI</meta>
            <meta attribute="generated-class">ch.algotrader.entity.security.BondFamily</meta>
            <meta attribute="class-code">
<![CDATA[
]]>   
            </meta> 	    
            <key foreign-key="BOND_FAMILYIFKC">
                <column name="ID" sql-type="BIGINT"/>
            </key>
            <property name="maturityDistance">
                <meta attribute="field-description"><![CDATA[The {@link Duration} between two {@link Bond Bonds} of this BondFamily. (e.g. 3 Months)]]></meta>
                <meta attribute="property-type">ch.algotrader.enumeration.Duration</meta>
                <column name="MATURITY_DISTANCE" not-null="true" unique="false" sql-type="BIGINT"/>

                <type name="ch.algotrader.hibernate.HibernateEnumType">
                 <param name="enumClassName">ch.algotrader.enumeration.Duration</param>
                </type>
            </property>
            <property name="length">
                <meta attribute="field-description"><![CDATA[Represents the length of this Bond Chain (i.e. how many Bonds exist at one particular point in time)]]></meta>
                <column name="LENGTH" not-null="true" unique="false" sql-type="INTEGER"/>

                <type name="int"/>
            </property>
            <property name="quotationStyle">
                <meta attribute="field-description"><![CDATA[The type of quotes received for this BondFamily]]></meta>
                <meta attribute="property-type">ch.algotrader.enumeration.QuotationStyle</meta>
                <column name="QUOTATION_STYLE" not-null="true" unique="false" sql-type="VARCHAR(255)"/>

                <type name="ch.algotrader.hibernate.HibernateEnumType">
                 <param name="enumClassName">ch.algotrader.enumeration.QuotationStyle</param>
                </type>
            </property>
        </joined-subclass>
    </class>
</hibernate-mapping>
