<?xml version="1.0" encoding="UTF-8"?>
<!--
     Attention: Generated code! Do not modify by hand!
     Generated by: hibernate3/hibernate.hbm.xml.vsl in andromda-hibernate-cartridge.
  -->
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
          "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping default-cascade="none">
    <class name="ch.algotrader.entity.property.PropertyHolderImpl"
        table="`property_holder`" dynamic-insert="false" dynamic-update="false" abstract="true">
	    <meta attribute="implements">ch.algotrader.entity.property.PropertyHolderI</meta>      
	    <meta attribute="generated-class">ch.algotrader.entity.property.PropertyHolder</meta>
	    <meta attribute="class-code">
<![CDATA[
    /**
     * Gets the {@code int} Property of the specified name, that belongs to this PropertyHolder. If
     * the specified Property does not exist or is not of type {@code int} and {@link
     * IllegalArgumentException} is thrown
     * @param name 
     * @return int
     */
    public abstract int getIntProperty(java.lang.String name);

    /**
     * Gets the {@code double} Property of the specified name, that belongs to this PropertyHolder.
     * If the specified Property does not exist or is not of type {@code double} and {@link
     * IllegalArgumentException} is thrown
     * @param name 
     * @return double
     */
    public abstract double getDoubleProperty(java.lang.String name);

    /**
     * Gets the {@code money} Property of the specified name, that belongs to this PropertyHolder.
     * If the specified Property does not exist or is not of type {@code money} and {@link
     * IllegalArgumentException} is thrown
     * @param name 
     * @return java.math.BigDecimal
     */
    public abstract java.math.BigDecimal getMoneyProperty(java.lang.String name);

    /**
     * Gets the {@code text} Property of the specified name, that belongs to this PropertyHolder. If
     * the specified Property does not exist or is not of type {@code text} and {@link
     * IllegalArgumentException} is thrown
     * @param name 
     * @return java.lang.String
     */
    public abstract java.lang.String getTextProperty(java.lang.String name);

    /**
     * Gets the {@code date} Property of the specified name, that belongs to this PropertyHolder. If
     * the specified Property does not exist or is not of type {@code date} and {@link
     * IllegalArgumentException} is thrown
     * @param name 
     * @return java.util.Date
     */
    public abstract java.util.Date getDateProperty(java.lang.String name);

    /**
     * Gets the {@code boolean} Property of the specified name, that belongs to this PropertyHolder.
     * If the specified Property does not exist or is not of type {@code boolean} and {@link
     * IllegalArgumentException} is thrown
     * @param name 
     * @return boolean
     */
    public abstract boolean getBooleanProperty(java.lang.String name);

    /**
     * Returns true if a Property with the specified name exists, that belongs to this
     * PropertyHolder
     * @param name 
     * @return java.lang.Boolean
     */
    public abstract java.lang.Boolean hasProperty(java.lang.String name);

    /**
     * Returns a Map containing all Properties of this PropertyHolder. The Map has the {@code name}
     * of the Property as it's key and the Property {@code value} as it's value.
     * @return java.util.Map
     */
    public abstract java.util.Map getPropertyNameValueMap();

]]>   
	    </meta> 	    
        <meta attribute="class-description"><![CDATA[Base class of an Entity that can hold {@link Property Properties}.]]></meta>
        <cache usage="read-write" />
        <id name="id" type="long" >
            <column name="ID" sql-type="BIGINT"/>

            <generator class="increment">
                <!-- id-generator merge-point -->
            </generator>
        </id>
        <version name="version" type="int" column="VERSION"/>
        <map name="props" order-by="PROPERTY_HOLDER_FK" lazy="false" fetch="select" inverse="true" cascade="delete">
            <meta attribute="field-description"><![CDATA[Base class of an Entity that can hold {@link Property Properties}.]]></meta>
            <cache usage="read-write" />
            <key foreign-key="PROPERTY_PROPERTY_HOLDER_FKC">
                <column name="PROPERTY_HOLDER_FK" sql-type="BIGINT"/>

            </key>
            <map-key column="NAME" type="java.lang.String"/>
            <one-to-many class="ch.algotrader.entity.property.PropertyImpl" not-found="exception"/>
        </map>
        <union-subclass name="ch.algotrader.entity.PositionImpl" table="`position`" dynamic-insert="false" dynamic-update="false" abstract="false">
            <meta attribute="implements">ch.algotrader.entity.PositionI</meta>
            <meta attribute="generated-class">ch.algotrader.entity.Position</meta>
            <meta attribute="class-code">
<![CDATA[
    /**
     * Gets the current {@link Direction} of this Position ({@code LONG}, {@code SHORT} or {@code
     * FLAT})
     * @return ch.algotrader.enumeration.Direction
     */
    public abstract ch.algotrader.enumeration.Direction getDirection();

    /**
     * Gets either {@code bid} or {@code ask} depending on the direction of the position. The
     * returned value is always positive.
     * @param marketDataEvent 
     * @return double
     */
    public abstract double getMarketPrice(ch.algotrader.entity.marketData.MarketDataEventI marketDataEvent);

    /**
     * Gets the value of the position based on either {@code bid} or {@code ask} depending on the
     * direction of the position.
     * <ul>
     * <li>short positions: negative</li>
     * <li>long positions: positive</li>
     * </ul>
     * @param marketDataEvent 
     * @return double
     */
    public abstract double getMarketValue(ch.algotrader.entity.marketData.MarketDataEventI marketDataEvent);

    /**
     * Gets the average price of the position based on all relevant opening transactions (always
     * positive).
     * @return double
     */
    public abstract double getAveragePrice();

    /**
     * Gets the unrealized Profit-and-Loss for this Position. To realize this Profit, the Position
     * would have to be closed.
     * @param marketDataEvent 
     * @return double
     */
    public abstract double getUnrealizedPL(ch.algotrader.entity.marketData.MarketDataEventI marketDataEvent);

    /**
     * Gets the current market exposure (market value x leverage).
     * @param marketDataEvent 
     * @param underlyingMarketDataEvent 
     * @return double
     */
    public abstract double getExposure(ch.algotrader.entity.marketData.MarketDataEventI marketDataEvent, ch.algotrader.entity.marketData.MarketDataEventI underlyingMarketDataEvent);

    /**
     * The Currency Attribution of this Position.
     * Forex and Forex Futures are attributed in their Base Currency with the amount equal to their
     * quantity
     * @param marketDataEvent 
     * @return ch.algotrader.vo.CurrencyAmountVO
     */
    public abstract ch.algotrader.vo.CurrencyAmountVO getAttribution(ch.algotrader.entity.marketData.MarketDataEventI marketDataEvent);

    /**
     * Returns {@code true} if the Position is open
     * @return boolean
     */
    public abstract boolean isOpen();

    /**
     * Returns {@code true} if the underlying of the Position is a Forex
     * @return boolean
     */
    public abstract boolean isCashPosition();

]]>   
            </meta> 	    
            <property name="quantity">
                <meta attribute="field-description"><![CDATA[The current quantity of this Position.]]></meta>
                <column name="QUANTITY" not-null="true" unique="false" sql-type="BIGINT"/>

                <type name="long"/>
            </property>
            <property name="cost">
                <meta attribute="field-description"><![CDATA[the cost associated with the current holdings of this Position. Based on the average cost method.]]></meta>
                <column name="COST" not-null="true" unique="false" sql-type="DOUBLE"/>

                <type name="double"/>
            </property>
            <property name="realizedPL">
                <meta attribute="field-description"><![CDATA[the realized Profit-and-Loss of this Position]]></meta>
                <column name="REALIZED_P_L" not-null="true" unique="false" sql-type="DOUBLE"/>

                <type name="double"/>
            </property>
            <property name="persistent">
                <meta attribute="field-description"><![CDATA[If set to {@code false}, the Position will be removed when resetting the database before a simulation run.]]></meta>
                <column name="PERSISTENT" not-null="true" unique="false" sql-type="TINYINT"/>

                <type name="boolean"/>
            </property>
            <many-to-one name="strategy" class="ch.algotrader.entity.strategy.StrategyImpl" foreign-key="POSITION_STRATEGY_FKC" not-null="true" lazy="proxy" fetch="select">
                <meta attribute="property-type">ch.algotrader.entity.strategy.Strategy</meta>
                <meta attribute="field-description"><![CDATA[Represents a running Strategy within the system. In addition the AlgoTrader Server is also
represented by an instance of this class.]]></meta>
                <meta attribute="use-in-equals">true</meta>
                <column name="STRATEGY_FK" not-null="true" sql-type="BIGINT"/>

            </many-to-one>
            <many-to-one name="security" class="ch.algotrader.entity.security.SecurityImpl" foreign-key="POSITION_SECURITY_FKC" not-null="true" lazy="proxy" fetch="select">
                <meta attribute="property-type">ch.algotrader.entity.security.Security</meta>
                <meta attribute="field-description"><![CDATA[The base class of all Securities in the system]]></meta>
                <meta attribute="use-in-equals">true</meta>
                <column name="SECURITY_FK" not-null="true" sql-type="BIGINT"/>

            </many-to-one>
        </union-subclass>
        <union-subclass name="ch.algotrader.entity.SubscriptionImpl" table="`subscription`" dynamic-insert="false" dynamic-update="false" abstract="false">
            <meta attribute="implements">ch.algotrader.entity.SubscriptionI</meta>
            <meta attribute="generated-class">ch.algotrader.entity.Subscription</meta>
            <meta attribute="class-code">
<![CDATA[
]]>   
            </meta> 	    
            <property name="feedType">
                <meta attribute="field-description"><![CDATA[The market data feed that this Subscription is valid for.]]></meta>
                <meta attribute="use-in-equals">true</meta>
                <column name="FEED_TYPE" not-null="true" unique="false" sql-type="VARCHAR(255)"/>
                <type name="java.lang.String"/>
            </property>
            <property name="persistent">
                <meta attribute="field-description"><![CDATA[A {@code persistent} Subscription will always be delivered to the strategy (i.e. for S&P500). A {@code non-persistent} Subscription requested by a strategy for a specific duration of time (i.e. Options on S&P500). When resetting the database before a simulation run, these Subscriptions will be removed]]></meta>
                <column name="PERSISTENT" not-null="true" unique="false" sql-type="TINYINT"/>

                <type name="boolean"/>
            </property>
            <many-to-one name="strategy" class="ch.algotrader.entity.strategy.StrategyImpl" foreign-key="SUBSCRIPTION_STRATEGY_FKC" not-null="true" lazy="false" fetch="join">
                <meta attribute="property-type">ch.algotrader.entity.strategy.Strategy</meta>
                <meta attribute="field-description"><![CDATA[Represents a running Strategy within the system. In addition the AlgoTrader Server is also
represented by an instance of this class.]]></meta>
                <meta attribute="use-in-equals">true</meta>
                <column name="STRATEGY_FK" not-null="true" sql-type="BIGINT"/>

            </many-to-one>
            <many-to-one name="security" class="ch.algotrader.entity.security.SecurityImpl" foreign-key="SUBSCRIPTION_SECURITY_FKC" not-null="true" lazy="false" fetch="join">
                <meta attribute="property-type">ch.algotrader.entity.security.Security</meta>
                <meta attribute="field-description"><![CDATA[The base class of all Securities in the system]]></meta>
                <meta attribute="use-in-equals">true</meta>
                <column name="SECURITY_FK" not-null="true" sql-type="BIGINT"/>

            </many-to-one>
        </union-subclass>
        <union-subclass name="ch.algotrader.entity.trade.OrderPreferenceImpl" table="`order_preference`" dynamic-insert="false" dynamic-update="false" abstract="false">
            <meta attribute="implements">ch.algotrader.entity.trade.OrderPreferenceI</meta>
            <meta attribute="generated-class">ch.algotrader.entity.trade.OrderPreference</meta>
            <meta attribute="class-code">
<![CDATA[
]]>   
            </meta> 	    
            <property name="name">
                <meta attribute="use-in-equals">true</meta>
                <column name="NAME" not-null="true" unique="true" sql-type="VARCHAR(255)"/>

                <type name="java.lang.String"/>
            </property>
            <property name="orderType">
                <meta attribute="property-type">ch.algotrader.enumeration.OrderType</meta>
                <column name="ORDER_TYPE" not-null="true" unique="false" sql-type="VARCHAR(255)"/>

                <type name="ch.algotrader.hibernate.HibernateEnumType">
                 <param name="enumClassName">ch.algotrader.enumeration.OrderType</param>
                </type>
            </property>
            <set name="allocations" order-by="ORDER_PREFERENCE_FK" lazy="true" fetch="select" inverse="true">
                <meta attribute="field-description"><![CDATA[Contains certain order default values (e.g. quantity, orderType, delays, etc.). Except for the
{@link ch.algotrader.enumeration.OrderType OrderType}, all values have to be defined through
Properties.]]></meta>
                <cache usage="read-write" />
                <key foreign-key="ALLOCATION_ORDER_PREFERENCE_FC">
                    <column name="ORDER_PREFERENCE_FK" sql-type="BIGINT"/>

                </key>
                <one-to-many class="ch.algotrader.entity.trade.AllocationImpl" not-found="exception"/>
            </set>
            <many-to-one name="defaultAccount" class="ch.algotrader.entity.AccountImpl" foreign-key="ORDER_PREFERENCE_DEFAULT_ACCOC" not-null="false" lazy="proxy" fetch="select">
                <meta attribute="property-type">ch.algotrader.entity.Account</meta>
                <meta attribute="field-description"><![CDATA[Represents an actual Account / AccountGroup / AllocationProfile with an external Broker / Bank]]></meta>
                <column name="DEFAULT_ACCOUNT_FK" not-null="false" sql-type="BIGINT"/>

            </many-to-one>
        </union-subclass>
        <union-subclass name="ch.algotrader.entity.strategy.StrategyImpl" table="`strategy`" dynamic-insert="false" dynamic-update="false" abstract="false">
            <meta attribute="implements">ch.algotrader.entity.strategy.StrategyI</meta>
            <meta attribute="generated-class">ch.algotrader.entity.strategy.Strategy</meta>
            <meta attribute="class-code">
<![CDATA[
    /**
     * Returns true if this Strategy represents the AlgoTrader Server
     * @return boolean
     */
    public abstract boolean isServer();

]]>   
            </meta> 	    
            <property name="name">
                <meta attribute="use-in-equals">true</meta>
                <column name="NAME" not-null="true" unique="true" sql-type="VARCHAR(255)"/>

                <type name="java.lang.String"/>
            </property>
            <property name="autoActivate">
                <meta attribute="field-description"><![CDATA[In simulation mode all Strategies marked as autoActivate are started]]></meta>
                <column name="AUTO_ACTIVATE" not-null="true" unique="false" sql-type="TINYINT"/>

                <type name="boolean"/>
            </property>
            <property name="allocation">
                <meta attribute="field-description"><![CDATA[Allocation assigned to this strategy
<p>
<i>Note: the total of all Allocations needs to be 1.0</i>]]></meta>
                <column name="ALLOCATION" not-null="true" unique="false" sql-type="DOUBLE"/>

                <type name="double"/>
            </property>
            <set name="portfolioValues" order-by="STRATEGY_FK" lazy="true" fetch="select" inverse="true" cascade="delete">
                <meta attribute="field-description"><![CDATA[Represents a running Strategy within the system. In addition the AlgoTrader Server is also
represented by an instance of this class.]]></meta>
                <cache usage="read-write" />
                <key foreign-key="PORTFOLIO_VALUE_STRATEGY_FKC">
                    <column name="STRATEGY_FK" sql-type="BIGINT"/>

                </key>
                <one-to-many class="ch.algotrader.entity.strategy.PortfolioValueImpl" not-found="exception"/>
            </set>
            <set name="cashBalances" order-by="STRATEGY_FK" lazy="true" fetch="select" inverse="true" cascade="delete">
                <meta attribute="field-description"><![CDATA[Represents a running Strategy within the system. In addition the AlgoTrader Server is also
represented by an instance of this class.]]></meta>
                <cache usage="read-write" />
                <key foreign-key="CASH_BALANCE_STRATEGY_FKC">
                    <column name="STRATEGY_FK" sql-type="BIGINT"/>

                </key>
                <one-to-many class="ch.algotrader.entity.strategy.CashBalanceImpl" not-found="exception"/>
            </set>
            <set name="measurements" order-by="STRATEGY_FK" lazy="true" fetch="select" inverse="true" cascade="delete">
                <meta attribute="field-description"><![CDATA[Represents a running Strategy within the system. In addition the AlgoTrader Server is also
represented by an instance of this class.]]></meta>
                <cache usage="read-write" />
                <key foreign-key="MEASUREMENT_STRATEGY_FKC">
                    <column name="STRATEGY_FK" sql-type="BIGINT"/>

                </key>
                <one-to-many class="ch.algotrader.entity.strategy.MeasurementImpl" not-found="exception"/>
            </set>
        </union-subclass>
    </class>
</hibernate-mapping>
