<?xml version="1.0" encoding="UTF-8"?>
<!--
     Attention: Generated code! Do not modify by hand!
     Generated by: hibernate3/hibernate.hbm.xml.vsl in andromda-hibernate-cartridge.
  -->
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
          "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping default-cascade="none">
    <class name="ch.algotrader.entity.trade.AllocationImpl"
        table="`allocation`" dynamic-insert="false" dynamic-update="false">
	    <meta attribute="implements">ch.algotrader.entity.trade.AllocationI</meta>      
	    <meta attribute="generated-class">ch.algotrader.entity.trade.Allocation</meta>
	    <meta attribute="class-code">
<![CDATA[	    
]]>   
	    </meta> 	    
        <meta attribute="class-description">Represents an allocation to an individual {@link ch.algotrader.entity.Account Account}.
If an OrderPreference is defined for an {@link ch.algotrader.enumeration.OrderType OrderType} that sends orders to multiple Accounts (e.g. {@link ch.algotrader.entity.trade.DistributingOrder DistributingOrder}), allocations to different Accounts can be defined.
p
iNote: the total of all Allocations needs to be 1.0/i</meta>
        <cache usage="read-write" />
        <comment>Represents an allocation to an individual {@link ch.algotrader.entity.Account Account}.
If an OrderPreference is defined for an {@link ch.algotrader.enumeration.OrderType OrderType} that sends orders to multiple Accounts (e.g. {@link ch.algotrader.entity.trade.DistributingOrder DistributingOrder}), allocations to different Accounts can be defined.
p
iNote: the total of all Allocations needs to be 1.0/i</comment>
        <id name="id" type="int" >
            <column name="ID" sql-type="INTEGER"/>
            <generator class="native">
                <!-- id-generator merge-point -->
            </generator>
        </id>
        <property name="value">
            <meta attribute="field-description">The amount that is allocated to the corresponding Account.
p
iNote: the total of all Allocations needs to be 1.0/i</meta>
            <column name="VALUE" not-null="true" unique="false" sql-type="DOUBLE">
                <comment>The amount that is allocated to the corresponding Account.
p
iNote: the total of all Allocations needs to be 1.0/i</comment>
            </column>
            <type name="double"/>
        </property>
        <many-to-one name="orderPreference" class="ch.algotrader.entity.trade.OrderPreferenceImpl" foreign-key="ALLOCATION_ORDER_PREFERENCE_FC" not-null="true" lazy="proxy" fetch="select">
            <meta attribute="property-type">ch.algotrader.entity.trade.OrderPreference</meta>
            <meta attribute="field-description">Contains certain order default values (e.g. quantity, orderType, delays, etc.). Except for the
{@link ch.algotrader.enumeration.OrderType OrderType}, all values have to be defined through
Properties.</meta>
            <column name="ORDER_PREFERENCE_FK" not-null="true" sql-type="INTEGER">
                <comment>Contains certain order default values (e.g. quantity, orderType, delays, etc.). Except for the
{@link ch.algotrader.enumeration.OrderType OrderType}, all values have to be defined through
Properties.</comment>
            </column>
        </many-to-one>
        <many-to-one name="account" class="ch.algotrader.entity.AccountImpl" foreign-key="ALLOCATION_ACCOUNT_FKC" not-null="true" lazy="proxy" fetch="select">
            <meta attribute="property-type">ch.algotrader.entity.Account</meta>
            <meta attribute="field-description">Represents an actual Account / AccountGroup / AllocationProfile with an external Broker / Bank</meta>
            <column name="ACCOUNT_FK" not-null="true" sql-type="INTEGER">
                <comment>Represents an actual Account / AccountGroup / AllocationProfile with an external Broker / Bank</comment>
            </column>
        </many-to-one>
    </class>
</hibernate-mapping>
