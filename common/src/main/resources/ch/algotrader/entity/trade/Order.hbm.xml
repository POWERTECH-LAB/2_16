<?xml version="1.0" encoding="UTF-8"?>
<!--
     Attention: Generated code! Do not modify by hand!
     Generated by: hibernate3/hibernate.hbm.xml.vsl in andromda-hibernate-cartridge.
  -->
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
          "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping default-cascade="none">
    <class name="ch.algotrader.entity.trade.OrderImpl"
        table="`order`" dynamic-insert="false" dynamic-update="false" abstract="true">
	    <meta attribute="implements">ch.algotrader.entity.trade.OrderI</meta>      
	    <meta attribute="generated-class">ch.algotrader.entity.trade.Order</meta>
	    <meta attribute="class-code">
<![CDATA[

   private Order parentOrder;

    /**
     * Base Class for all Order Types
     * @return this.parentOrder Order
     */
    public Order getParentOrder() {
        return this.parentOrder;
    }

    /**
     * Base Class for all Order Types
     * @param parentOrderIn Order
     */
    public void setParentOrder(Order parentOrderIn) {
        this.parentOrder = parentOrderIn;
    }

    private java.util.Collection<Order> childOrders = new java.util.ArrayList<Order>();

    /**
     * Base Class for all Order Types
     * @return this.childOrders java.util.Collection<Order>
     */
    public java.util.Collection<Order> getChildOrders() {
        return this.childOrders;
    }

    /**
     * Base Class for all Order Types
     * @param childOrdersIn java.util.Collection<Order>
     */
    public void setChildOrders(java.util.Collection<Order> childOrdersIn) {
        this.childOrders = childOrdersIn;
    }

    /**
     * Base Class for all Order Types
     * @param elementToAdd Order
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addChildOrders(Order elementToAdd) {
        elementToAdd.setParentOrder(this);
		return this.childOrders.add(elementToAdd);
    }

    /**
     * Base Class for all Order Types
     * @param elementToRemove Order
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeChildOrders(Order elementToRemove) {
        return this.childOrders.remove(elementToRemove);
    }

    /**
     * Gets the description of this Order composed of quantity, OrderType, Security, Strategy &
     * Account
     * @return java.lang.String
     */
    public abstract java.lang.String getDescription();

    /**
     * Gets the extended description of this Order comprised of Order Type specific properties (i.e.
     * {@code limit} for {@link LimitOrder})
     * @return java.lang.String
     */
    public abstract java.lang.String getExtDescription();

    /**
     * Returns the root part of the intId. Example: for ibn123.0 this will return ibn123.
     * @return java.lang.String
     */
    public abstract java.lang.String getRootIntId();

    /**
     * Returns true if this Order is a {@link AlgoOrder}
     * @return boolean
     */
    public abstract boolean isAlgoOrder();

    /**
     * Returns true if this Order is valid. This method can/should be overwritten by subclasses.
     * @throws OrderValidationException
     */
    public abstract void validate()
        throws ch.algotrader.entity.trade.OrderValidationException;

    /**
     * 
     * @param name 
     * @param value 
     * @param type 
     */
    public abstract void addProperty(java.lang.String name, java.lang.String value, ch.algotrader.enumeration.OrderPropertyType type);

    /**
     * 
     * @param name 
     * @return java.lang.String
     */
    public abstract java.lang.String getProperty(java.lang.String name);

    /**
     * gets the Exchange associated with this Order. The Exchange can either be directly associated
     * with the Order or via SecurityFamily
     * @return ch.algotrader.entity.exchange.Exchange
     */
    public abstract ch.algotrader.entity.exchange.Exchange getEffectiveExchange();

]]>   
	    </meta> 	    
        <meta attribute="class-description"><![CDATA[Base Class for all Order Types]]></meta>
        <cache usage="read-write" />
        <id name="id" type="long" >
            <column name="ID" sql-type="BIGINT"/>

            <generator class="native">
                <!-- id-generator merge-point -->
            </generator>
        </id>
        <discriminator column="class" type="string"/>
        <property name="intId">
            <meta attribute="field-description"><![CDATA[The Internal Order Id. The Id is typically comprised of a {@code sessionQualifier}, a {@code rootId} and potentially a {@code version}. Example: ibn123.0]]></meta>
            <meta attribute="use-in-equals">true</meta>
            <column name="INT_ID" not-null="true" unique="false" sql-type="VARCHAR(255)"/>

            <type name="java.lang.String"/>
        </property>
        <property name="extId">
            <meta attribute="field-description"><![CDATA[The External Order Id assigned by the external Broker]]></meta>
            <column name="EXT_ID" not-null="false" unique="false" sql-type="VARCHAR(255)"/>

            <type name="java.lang.String"/>
        </property>
        <property name="dateTime">
            <meta attribute="field-description"><![CDATA[The dateTime the order was sent. This is set automatically by the {@link ch.algotrader.service.OrderService OrderService}]]></meta>
            <column name="DATE_TIME" not-null="true" unique="false" sql-type="TIMESTAMP"/>

            <type name="java.util.Date"/>
        </property>
        <property name="side">
            <meta attribute="field-description"><![CDATA[{@code BUY} or {@code SELL}]]></meta>
            <meta attribute="property-type">ch.algotrader.enumeration.Side</meta>
            <column name="SIDE" not-null="true" unique="false" sql-type="VARCHAR(255)"/>

            <type name="ch.algotrader.hibernate.HibernateEnumType">
                 <param name="enumClassName">ch.algotrader.enumeration.Side</param>
            </type>
        </property>
        <property name="quantity">
            <meta attribute="field-description"><![CDATA[The requested number of contracts]]></meta>
            <column name="QUANTITY" not-null="true" unique="false" sql-type="BIGINT"/>

            <type name="long"/>
        </property>
        <property name="tif">
            <meta attribute="field-description"><![CDATA[Time-In-Force, see {@link TIF}]]></meta>
            <meta attribute="property-type">ch.algotrader.enumeration.TIF</meta>
            <column name="TIF" not-null="true" unique="false" sql-type="VARCHAR(255)"/>

            <type name="ch.algotrader.hibernate.HibernateEnumType">
                 <param name="enumClassName">ch.algotrader.enumeration.TIF</param>
            </type>
        </property>
        <property name="tifDateTime">
            <meta attribute="field-description"><![CDATA[The Time-in-Force date]]></meta>
            <column name="TIF_DATE_TIME" not-null="false" unique="false" sql-type="TIMESTAMP"/>

            <type name="java.util.Date"/>
        </property>
        <many-to-one name="exchange" class="ch.algotrader.entity.exchange.ExchangeImpl" foreign-key="ORDER_EXCHANGE_FKC" not-null="false" lazy="proxy" fetch="select">
            <meta attribute="property-type">ch.algotrader.entity.exchange.Exchange</meta>
            <meta attribute="field-description"><![CDATA[Exchange where securities are traded]]></meta>
            <column name="EXCHANGE_FK" not-null="false" sql-type="BIGINT"/>

        </many-to-one>
        <many-to-one name="security" class="ch.algotrader.entity.security.SecurityImpl" foreign-key="ORDER_SECURITY_FKC" not-null="true" lazy="proxy" fetch="select">
            <meta attribute="property-type">ch.algotrader.entity.security.Security</meta>
            <meta attribute="field-description"><![CDATA[The base class of all Securities in the system]]></meta>
            <column name="SECURITY_FK" not-null="true" sql-type="BIGINT"/>

        </many-to-one>
        <many-to-one name="account" class="ch.algotrader.entity.AccountImpl" foreign-key="ORDER_ACCOUNT_FKC" not-null="true" lazy="proxy" fetch="select">
            <meta attribute="property-type">ch.algotrader.entity.Account</meta>
            <meta attribute="field-description"><![CDATA[Represents an actual Account / AccountGroup / AllocationProfile with an external Broker / Bank]]></meta>
            <column name="ACCOUNT_FK" not-null="true" sql-type="BIGINT"/>

        </many-to-one>
        <map name="orderProperties" order-by="ORDER_FK" lazy="false" fetch="select" inverse="true" cascade="delete">
            <meta attribute="field-description"><![CDATA[Base Class for all Order Types]]></meta>
            <cache usage="read-write" />
            <key foreign-key="ORDER_PROPERTY_ORDER_FKC">
                <column name="ORDER_FK" sql-type="BIGINT"/>

            </key>
            <map-key column="NAME" type="java.lang.String"/>
            <one-to-many class="ch.algotrader.entity.trade.OrderPropertyImpl" not-found="exception"/>
        </map>
        <many-to-one name="strategy" class="ch.algotrader.entity.strategy.StrategyImpl" foreign-key="ORDER_STRATEGY_FKC" not-null="true" lazy="proxy" fetch="select">
            <meta attribute="property-type">ch.algotrader.entity.strategy.Strategy</meta>
            <meta attribute="field-description"><![CDATA[Represents a running Strategy within the system. In addition the AlgoTrader Server is also
represented by an instance of this class.]]></meta>
            <column name="STRATEGY_FK" not-null="true" sql-type="BIGINT"/>

        </many-to-one>
        <subclass name="ch.algotrader.entity.trade.SimpleOrderImpl" discriminator-value="SimpleOrderImpl" dynamic-insert="false" dynamic-update="false" abstract="true">
            <meta attribute="implements">ch.algotrader.entity.trade.SimpleOrderI</meta>
            <meta attribute="generated-class">ch.algotrader.entity.trade.SimpleOrder</meta>
            <meta attribute="class-code">
<![CDATA[
    /**
     * Returns true if this Order is valid. This method can/should be overwritten by subclasses.
     * @throws OrderValidationException
     */
    public abstract void validate()
        throws ch.algotrader.entity.trade.OrderValidationException;

]]>   
            </meta>  
            <subclass name="ch.algotrader.entity.trade.LimitOrderImpl" discriminator-value="LimitOrderImpl" dynamic-insert="false" dynamic-update="false" abstract="false">
                <meta attribute="implements">ch.algotrader.entity.trade.LimitOrderI</meta>
                <meta attribute="generated-class">ch.algotrader.entity.trade.LimitOrder</meta>
                <meta attribute="class-code">
<![CDATA[
]]>   
                </meta>  
                <property name="limit">
                    <meta attribute="field-description"><![CDATA[The limit price.]]></meta>
                    <column name="`LIMIT`" not-null="false" unique="false" sql-type="Decimal(15,6)"/>

                    <type name="java.math.BigDecimal"/>
                </property>
            </subclass>
            <subclass name="ch.algotrader.entity.trade.StopLimitOrderImpl" discriminator-value="StopLimitOrderImpl" dynamic-insert="false" dynamic-update="false" abstract="false">
                <meta attribute="implements">ch.algotrader.entity.trade.StopLimitOrderI,ch.algotrader.entity.trade.StopOrderI, ch.algotrader.entity.trade.LimitOrderI</meta>
                <meta attribute="generated-class">ch.algotrader.entity.trade.StopLimitOrder</meta>
                <meta attribute="class-code">
<![CDATA[
]]>   
                </meta>  
                <property name="limit">
                    <meta attribute="field-description"><![CDATA[the limit price.]]></meta>
                    <column name="`LIMIT`" not-null="false" unique="false" sql-type="Decimal(15,6)"/>

                    <type name="java.math.BigDecimal"/>
                </property>
                <property name="stop">
                    <meta attribute="field-description"><![CDATA[The stop price.]]></meta>
                    <column name="STOP" not-null="false" unique="false" sql-type="Decimal(15,6)"/>

                    <type name="java.math.BigDecimal"/>
                </property>
            </subclass>
            <subclass name="ch.algotrader.entity.trade.MarketOrderImpl" discriminator-value="MarketOrderImpl" dynamic-insert="false" dynamic-update="false" abstract="false">
                <meta attribute="implements">ch.algotrader.entity.trade.MarketOrderI</meta>
                <meta attribute="generated-class">ch.algotrader.entity.trade.MarketOrder</meta>
                <meta attribute="class-code">
<![CDATA[
]]>   
                </meta>  
            </subclass>
            <subclass name="ch.algotrader.entity.trade.StopOrderImpl" discriminator-value="StopOrderImpl" dynamic-insert="false" dynamic-update="false" abstract="false">
                <meta attribute="implements">ch.algotrader.entity.trade.StopOrderI</meta>
                <meta attribute="generated-class">ch.algotrader.entity.trade.StopOrder</meta>
                <meta attribute="class-code">
<![CDATA[
]]>   
                </meta>  
                <property name="stop">
                    <meta attribute="field-description"><![CDATA[The stop price.]]></meta>
                    <column name="STOP" not-null="false" unique="false" sql-type="Decimal(15,6)"/>

                    <type name="java.math.BigDecimal"/>
                </property>
            </subclass>
        </subclass>
    </class>
</hibernate-mapping>
