// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package ch.algotrader.entity.trade;

import ch.algotrader.ServiceLocator;
import ch.algotrader.cache.CacheManager;
import ch.algotrader.entity.BaseEntityI;
import ch.algotrader.enumeration.Status;
import java.io.Serializable;
import org.hibernate.proxy.HibernateProxy;
import org.hibernate.proxy.LazyInitializer;

/**
 * Represents an executed Order with information regarding all associated Transactions. It is
 * guaranteed that all associated DB transactions have been fully committed.
 */
public abstract class SubmittedOrder
    implements Serializable, Comparable<SubmittedOrder>
        , BaseEntityI
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 2185817925599877085L;

    protected transient CacheManager cacheManager;

    public void setCacheManager(CacheManager cacheManager) 
    {
        this.cacheManager = cacheManager;
    }

    // Generate 4 attributes
    private Status status;

    /**
     * The Order {@link Status}
     * @return this.status Status
     */
    public Status getStatus()
    {
        return this.status;
    }

    /**
     * The Order {@link Status}
     * @param statusIn Status
     */
    public void setStatus(Status statusIn)
    {
        this.status = statusIn;
    }

    private long filledQuantity;

    /**
     * The quantity of the Order that has already been filled.
     * @return this.filledQuantity long
     */
    public long getFilledQuantity()
    {
        return this.filledQuantity;
    }

    /**
     * The quantity of the Order that has already been filled.
     * @param filledQuantityIn long
     */
    public void setFilledQuantity(long filledQuantityIn)
    {
        this.filledQuantity = filledQuantityIn;
    }

    private long remainingQuantity;

    /**
     * The remaining quantity of the Order that has not been filled yet.
     * @return this.remainingQuantity long
     */
    public long getRemainingQuantity()
    {
        return this.remainingQuantity;
    }

    /**
     * The remaining quantity of the Order that has not been filled yet.
     * @param remainingQuantityIn long
     */
    public void setRemainingQuantity(long remainingQuantityIn)
    {
        this.remainingQuantity = remainingQuantityIn;
    }

    private int id;

    /**
     * 
     * @return this.id int
     */
    public int getId()
    {
        return this.id;
    }

    /**
     * 
     * @param idIn int
     */
    public void setId(int idIn)
    {
        this.id = idIn;
    }

    // Generate 1 associations
    private Order order;

    /**
     * Base Class for all Order Types
     * @return this.order Order
     */
    public Order getSubmittedOrder()
    {
        return this.order;
    }

    public Order getOrderInitialized()
    {
		if (this.order instanceof HibernateProxy) {

			HibernateProxy proxy = (HibernateProxy) this.order;
			LazyInitializer initializer = proxy.getHibernateLazyInitializer();

			if (initializer.getSession() != null) {
				this.order = (Order) initializer.getImplementation();
			} else if (this.cacheManager != null) {
				this.order = (Order) this.cacheManager.initialze(this, "order");			
			} else {
				this.order = (Order) ServiceLocator.instance().getLazyLoaderService().lazyLoadProxy(this, "SubmittedOrder.getOrder", proxy);
			}
		}
        return this.order;
    }

    /**
     * Base Class for all Order Types
     * @param orderIn Order
     */
    public void setOrder(Order orderIn)
    {
        this.order = orderIn;
    }

    /**
     * 
     * @return String
     */
    public abstract String toString();

    /**
     * Constructs new instances of {@link SubmittedOrder}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link SubmittedOrder}.
         * @return new SubmittedOrderImpl()
         */
        public static SubmittedOrder newInstance()
        {
            return new SubmittedOrderImpl();
        }


        /**
         * Constructs a new instance of {@link SubmittedOrder}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param status Status
         * @param filledQuantity long
         * @param remainingQuantity long
         * @param order Order
         * @return newInstance SubmittedOrder
         */
        public static SubmittedOrder newInstance(Status status, long filledQuantity, long remainingQuantity, Order order)
        {
            final SubmittedOrder entity = new SubmittedOrderImpl();
            entity.setStatus(status);
            entity.setFilledQuantity(filledQuantity);
            entity.setRemainingQuantity(remainingQuantity);
            entity.setOrder(order);
            return entity;
        }
    }

    /**
     * @see Comparable#compareTo
     */
    public int compareTo(SubmittedOrder o)
    {
        int cmp = 0;
        if (this.getId() > 0)
        {
         if ( this.getId() == o.getId() )
         {
            cmp = 0;
         }
         else
         {
            if ( this.getId() > o.getId() )
            {
               cmp = 1;
            }
            else
            {
               cmp = -1;
            }
         }
        }
        else
        {
            if (this.getStatus() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getStatus().compareTo(o.getStatus()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point

// SubmittedOrder Entity merge-point 
}