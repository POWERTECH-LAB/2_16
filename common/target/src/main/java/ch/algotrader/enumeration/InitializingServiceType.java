// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: TypeSafeEnumeration.vsl in andromda-java-cartridge.
// Model Class:  Data::AlgoTrader::ch.algotrader::enumeration::InitializingServiceType
// Metafacade:   org.andromda.metafacades.uml.Enumeration
// Stereotype:  Enumeration
//
package ch.algotrader.enumeration;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * {@code PUT} or {@code CALL}
 */
public enum InitializingServiceType
{
    CORE(0),
    BROKER_INTERFACE(1);

    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -7991848187098285788L;

    private final int enumValue;

    /**
     * The constructor with enumeration literal value allowing
     * super classes to access it.
     */
    private InitializingServiceType(int value)
    {
        this.enumValue = value;
    }

    /*
     * Do not override this method directly. Use an alternate name
     * if providing a different toString implementation
     * @see Object#toString()
    @Override
    public String toString()
    {
        return String.valueOf(this.enumValue);
    }
     */

    /**
     * Retrieves an instance of InitializingServiceType from <code>its name</code>.
     *
     * @param name the name to create the InitializingServiceType from.
     * @return The enumeration literal named after the 'name' argument
     */
    public static InitializingServiceType fromString(String name)
    {
        return InitializingServiceType.valueOf(name);
    }

    /**
     * Returns an enumeration literal int <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @return int with corresponding value
     */
    public int value()
    {
        return this.enumValue;
    }

    /**
     * Returns an instance of InitializingServiceType from int <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @param value the value to create the InitializingServiceType from.
     * @return static Enumeration with corresponding value
     */
    public static InitializingServiceType fromValue(int value)
    {
        for (InitializingServiceType enumName: InitializingServiceType.values())
        {
            if (enumName.getValue() == value)
            {
                return enumName;
            }
        }
        throw new IllegalArgumentException("InitializingServiceType.fromValue(" + String.valueOf(value) + ')');
    }

    /**
     * Gets the underlying value of this type safe enumeration.
     * This method is necessary to comply with DaoBase implementation.
     * @return The name of this literal.
     */
    public int getValue()
    {
        return this.enumValue;
    }

    /**
     * Returns an unmodifiable list containing the literals that are known by this enumeration.
     *
     * @return A List containing the actual literals defined by this enumeration, this list
     *         can not be modified.
     */
    public static List<Integer> literals()
    {
        return InitializingServiceType.literals;
    }

    /**
     * Returns an unmodifiable list containing the names of the literals that are known
     * by this enumeration.
     *
     * @return A List containing the actual names of the literals defined by this
     *         enumeration, this list can not be modified.
     */
    public static List<String> names()
    {
        return InitializingServiceType.names;
    }

    private static Map<Integer, InitializingServiceType> values = new LinkedHashMap<Integer, InitializingServiceType>(2, 1);
    private static List<Integer> literals = new ArrayList<Integer>(2);
    private static List<String> names = new ArrayList<String>(2);
    private static List<InitializingServiceType> valueList = new ArrayList<InitializingServiceType>(2);

    /**
     * Initializes the values.
     */
    static
    {
        synchronized (InitializingServiceType.values)
        {
            InitializingServiceType.values.put(Integer.valueOf(CORE.enumValue), CORE);
            InitializingServiceType.values.put(Integer.valueOf(BROKER_INTERFACE.enumValue), BROKER_INTERFACE);
        }
        synchronized (InitializingServiceType.valueList)
        {
            InitializingServiceType.valueList.add(CORE);
            InitializingServiceType.valueList.add(BROKER_INTERFACE);
            InitializingServiceType.valueList = Collections.unmodifiableList(valueList);
        }
        synchronized (InitializingServiceType.literals)
        {
            InitializingServiceType.literals.add(Integer.valueOf(CORE.enumValue));
            InitializingServiceType.literals.add(Integer.valueOf(BROKER_INTERFACE.enumValue));
            InitializingServiceType.literals = Collections.unmodifiableList(literals);
        }
        synchronized (InitializingServiceType.names)
        {
            InitializingServiceType.names.add("CORE");
            InitializingServiceType.names.add("BROKER_INTERFACE");
            InitializingServiceType.names = Collections.unmodifiableList(names);
        }
    }
    // type-safe-enumeration-object java merge-point
}