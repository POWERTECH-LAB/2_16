<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- edited with XMLSpy v2007 (http://www.altova.com) by name (comp) -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
    <bookinfo>
        <title>AlgoTrader</title>
        <subtitle>Algorithmic Trading Platform</subtitle>
        <productname>Reference Documentation</productname>
        <productnumber>2.0</productnumber>
        <copyright>
            <year>2013</year>
            <holder>Flury Trading</holder>
        </copyright>
        <authorgroup>
            <author>
                <firstname>Andy</firstname>
                <surname>Flury</surname>
                <affiliation>
                    <orgname>Flury Trading</orgname>
                </affiliation>
                <email>andyflury@gmail.com</email>
            </author>
        </authorgroup>
    </bookinfo>
    <preface id="preface">
        <title>Preface</title>
        <section>
            <title>Document Conventions</title>
            <para>This manual uses several conventions to highlight certain words and phrases and draw attention to specific pieces of information.
 </para>
            <para>In PDF and paper editions, this manual uses typefaces drawn from the <ulink url="https://fedorahosted.org/liberation-fonts/">Liberation Fonts</ulink> set. The Liberation Fonts set is also used in HTML editions if the set is installed on your system. If not, alternative but equivalent typefaces are displayed.
 </para>
            <section>
                <title>Typographic Conventions</title>
                <para>The following <application>typographic</application> conventions are used to call attention to specific words and phrases. These conventions, and the circumstances they apply to, are as follows.
  </para>
                <para>System input, including shell commands, file names and paths, and  key caps and key-combinations are presented as follows.
  </para>
                <blockquote>
                    <para>
    To see the contents of the file <filename>my_next_bestselling_novel</filename> in your current working directory, enter the <command>cat my_next_bestselling_novel</command> command at the shell prompt and press <keycap>Enter</keycap> to execute the command.
   </para>
                </blockquote>
                <para>The above includes a file name, a shell command and a key cap, all  distinguishable thanks to context.
  </para>
                <para>Key-combinations can be distinguished from key caps by the symbol connecting each part of a key-combination. For example:
  </para>
                <blockquote>
                    <para>
    Press <keycap>Enter</keycap> to execute the command.
   </para>
                    <para>
    Press  <keycombo>
                            <keycap>Ctrl</keycap>
                            <keycap>Alt</keycap>
                            <keycap>F1</keycap>
                        </keycombo> to switch to the first virtual terminal. Press <keycombo>
                            <keycap>Ctrl</keycap>
                            <keycap>Alt</keycap>
                            <keycap>F7</keycap>
                        </keycombo> to return to your X-Windows session.
   </para>
                </blockquote>
                <para>The first sentence highlights the particular key cap to press. The second highlights two sets of three key caps, each set pressed simultaneously.
  </para>
                <para>If source code is discussed, class names, methods, functions, variable names and returned values mentioned within a paragraph are  presented as follows.
  </para>
                <blockquote>
                    <para>
    File-related classes include <classname>filesystem</classname> for file systems, <classname>file</classname> for files, and <classname>dir</classname> for directories. Each class has its own associated set of permissions.
   </para>
                </blockquote>
                <para>Words or phrases encountered on a system, including application names; dialog box text; labeled buttons; check-box and radio button labels; menu titles and sub-menu titles are presented as follows.
  </para>
                <blockquote>
                    <para>Choose <menuchoice>
                            <guimenu>System</guimenu>
                            <guimenuitem>Preferences</guimenuitem>
                            <guisubmenu>Mouse</guisubmenu>
                        </menuchoice>    from the main menu bar to launch <application>Mouse Preferences</application>. In the <guilabel>Buttons</guilabel> tab, click the <guilabel>Left-handed mouse</guilabel> check box and click <guibutton>Close</guibutton> to switch the primary mouse button from the left to the right (making the mouse suitable for use in the left hand).
   </para>
                    <para>To insert a special character into a <application>gedit</application> file, choose <menuchoice>
                            <guimenu>Applications</guimenu>
                            <guimenuitem>Accessories</guimenuitem>
                            <guisubmenu>Character Map</guisubmenu>
                        </menuchoice>   from the main menu bar. Next, choose <menuchoice>
                            <guimenu>Search</guimenu>
                            <guimenuitem>Find</guimenuitem>
                        </menuchoice>  from the <application>Character Map</application> menu bar, type the name of the character in the <guilabel>Search</guilabel> field and click <guibutton>Next</guibutton>. The character you sought will be highlighted in the <guilabel>Character Table</guilabel>. Double-click this highlighted character to place it in the <guilabel>Text to copy</guilabel> field and then click the <guibutton>Copy</guibutton> button. Now switch back to your document and choose <menuchoice>
                            <guimenu>Edit</guimenu>
                            <guimenuitem>Paste</guimenuitem>
                        </menuchoice>  from the <application>gedit</application> menu bar.
   </para>
                </blockquote>
                <para>The above  text includes application names; system-wide menu names and items; application-specific menu names; and buttons and text found within a GUI interface, all  distinguishable by context.
  </para>
                <para>Note the  shorthand used to indicate traversal through a menu and its sub-menus. This is to avoid the difficult-to-follow &apos;Select <guimenuitem>Mouse</guimenuitem> from the <guimenu>Preferences</guimenu> sub-menu in the <guimenu>System</guimenu> menu of the main menu bar&apos; approach.
  </para>
                <para>Italics denotes text you do not input literally or displayed text that changes depending on circumstance. Replaceable or variable text is presented as follows.
  </para>
                <blockquote>
                    <para>To connect to a remote machine using ssh, type <command>ssh <replaceable>username</replaceable>@<replaceable>domain.name</replaceable>
                        </command> at a shell prompt. If the remote machine is <filename>example.com</filename> and your username on that machine is john, type <command>ssh john@example.com</command>.
   </para>
                    <para>
    The <command>mount -o remount <replaceable>file-system</replaceable>
                        </command> command remounts the named file system. For example, to remount the <filename>home</filename> file system, the command is <command>mount -o remount /home</command>.
   </para>
                    <para>
    To see the version of a currently installed package, use the <command>rpm -q <replaceable>package</replaceable>
                        </command> command. It will return a result as follows: <command>
                            <replaceable>package-version-release</replaceable>
                        </command>.
   </para>
                </blockquote>
                <para>Note the words in bold italics above &mdash; username, domain.name, file-system, package, version and release. Each word is a placeholder, either for text you enter when issuing a command or for text displayed by the system.
  </para>
            </section>
            <section>
                <title>Pull-quote Conventions</title>
                <para>
   Two, commonly multi-line, data types are set off visually from the surrounding text.
  </para>
                <para>
   Output sent to a terminal is presented as follows:
  </para>
                <screen>
books        Desktop   documentation  drafts  mss    photos   stuff  svn
books_tests  Desktop1  downloads      images  notes  scripts  svgs
</screen>
                <para>
   Source-code listings are presented and highlighted as follows:
  </para>
                <programlisting language="Java" role="JAVA">
package org.jboss.book.jca.ex1;

import javax.naming.InitialContext;

public class ExClient
{
   public static void main(String args[])
       throws Exception
   {
      InitialContext iniCtx = new InitialContext();
      Object         ref    = iniCtx.lookup(&quot;EchoBean&quot;);
      EchoHome       home   = (EchoHome) ref;
      Echo           echo   = home.create();

      System.out.println(&quot;Created Echo&quot;);

      System.out.println(&quot;Echo.echo(&apos;Hello&apos;) = &quot; + echo.echo(&quot;Hello&quot;));
   }

}
</programlisting>
            </section>
            <section>
                <title>Notes and Warnings</title>
                <para>Finally, we use three visual styles to draw attention to information that might otherwise be overlooked.
  </para>
                <warning>
                    <title>Warning</title>
                    <para>A Warning should not be ignored. Ignoring warnings will most likely cause data loss.
   </para>
                </warning>
                <important>
                    <title>Important</title>
                    <para>Important boxes detail things that are easily missed: configuration changes that only apply to the current session, or services that need restarting before an update will apply. Ignoring Important boxes won&apos;t cause data loss but may cause irritation and frustration.
   </para>
                </important>
                <note>
                    <title>Note</title>
                    <para>A note is a tip or shortcut or alternative approach to the task at hand. Ignoring a note should have no negative consequences, but you might miss out on a trick that makes your life easier.
   </para>
                </note>
            </section>
        </section>
    </preface>
    <chapter>
        <title>Introduction</title>
        <para>AlgoTrader is an Algorithmic Trading Platform based on the
      following Technologies:</para>
        <itemizedlist>
            <listitem>
                <para>Event Driven Architecture / Complex Event Processing (CEP)
          using <ulink url="http://esper.codehaus.org/"> Esper</ulink>
                </para>
            </listitem>
            <listitem>
                <para>Model Driven Architecture using <ulink url="http://www.uml.org/"> UML</ulink> and <ulink url="http://www.andromda.org/"> AndroMDA</ulink>
                </para>
            </listitem>
            <listitem>
                <para>Service Oriented Architecture using <ulink url="http://www.springsource.org/"> SpringFramework</ulink> and
          <ulink url="http://www.hibernate.org/"> Hibernate</ulink>
                </para>
            </listitem>
            <listitem>
                <para>Messaging based on JMS and [<ulink url="http://activemq.apache.org/"> ActiveMQ</ulink>]</para>
            </listitem>
            <listitem>
                <para>JDBC based Persistence Layer: e.g. [<ulink url="http://www.mysql.com/"> MySql</ulink>] or [<ulink url="http://www.oracle.com/us/products/database/overview/index.html">
          Oracle</ulink>]</para>
            </listitem>
        </itemizedlist>
        <para>Amongst other, the platform provides the following specific
      features: <itemizedlist>
                <listitem>
                    <para>Automate Trading Strategies based on Complex Trading
            Rulesssss</para>
                </listitem>
                <listitem>
                    <para>Develop, simulate and run several strategies in
            parallel</para>
                </listitem>
                <listitem>
                    <para>Multi JVM approach RMI/JMS based communication vs One JVM
            approach based (OSGI &amp; Spring Dynamic Modules)</para>
                </listitem>
                <listitem>
                    <para>Support for the following asset classes: Stock, Index,
            Future, Option, Intrest Rate, Forex as well as synthetic Indices
            &amp; Derviative-Spreads</para>
                </listitem>
                <listitem>
                    <para>Different Order Types including Market, Limit, Stop, Stop
            Limit as well as several Algo Order Types like Slicing,
            Incremental and Distributional Orders (additional Algo Order Types
            can be added)</para>
                </listitem>
                <listitem>
                    <para>Multi Module Strategies (strategies that consist of several
            modules that communicate with each other)</para>
                </listitem>
                <listitem>
                    <para>Inter Module Communication based on Generic Events</para>
                </listitem>
                <listitem>
                    <para>Portfolio Tracking &amp; Performance Measurement</para>
                </listitem>
                <listitem>
                    <para>Both technically and organizationally separated Risk
            Management</para>
                </listitem>
                <listitem>
                    <para>Automated Reconciliation</para>
                </listitem>
                <listitem>
                    <para>Different Numerical and Statistical Libraries</para>
                </listitem>
                <listitem>
                    <para>Multi-Account Functionality (including Sub Account, Account
            Group and Allocation Profile functionality)</para>
                </listitem>
                <listitem>
                    <para>Automated Forex Hedging (based on Spot FX or FX
            Futures)</para>
                </listitem>
                <listitem>
                    <para>Options Pricing Engine</para>
                </listitem>
                <listitem>
                    <para>Multiple Broker Interfaces (Fix 4.2, Fix 4.4, Interactive
            Brokers Native &amp; Fix, JP Morgan via FIX and DukasCopy via
            Fix)</para>
                </listitem>
                <listitem>
                    <para>Backtesting of strategies using Historical Tick- or Bar-Data
            and Exchange Simulator</para>
                </listitem>
                <listitem>
                    <para>Historical Data Download functionality</para>
                </listitem>
                <listitem>
                    <para>Automated Parameter Optimization</para>
                </listitem>
                <listitem>
                    <para>Optimized for low latency and high throughput using a highly
            concurrent / multi-threaded architecture</para>
                </listitem>
                <listitem>
                    <para>JConsole based Client Application with full overview of Open
            Positions, Orders, Transactions, Subscriptions, Portfolio Balances
            as well as manipulation methods like send Order, cancel Order,
            modify Order, set Exit Value, set Variable Value, subscribe &amp;
            unsubscribe, equalize Forex, re balance portfolio, transfer
            position between strategies, etc.</para>
                </listitem>
                <listitem>
                    <para>JConsole based Management of all technical aspects of the
            system: QuickFix Sessions, Esper Engines, JDBC Connections,
            Logging Subsystem &amp; EhCache Database Cache, etc.</para>
                </listitem>
                <listitem>
                    <para>Highly customizable Charting Functionality including Bars,
            Indicators, horizontal/vertical Markers, Annotations, etc.</para>
                </listitem>
                <listitem>
                    <para>Dynamic Datamodel which allows to define custom properties
            (e.g. integer or string property) on Entities like Strategy,
            Position &amp; Subscription</para>
                </listitem>
                <listitem>
                    <para>Subversion / Maven based development / release and change
            management process</para>
                </listitem>
                <listitem>
                    <para>Grails based CRUD Applicaiton (Create, Read, Update &amp;
            Delete) for management of Master Data (e.g. Strategies,
            Securities, Security Families, Accounts, etc.)</para>
                </listitem>
                <listitem>
                    <para>Spring Profiles based system packaging to enable only those
            Spring Services (e.g. FixOrderService types) that are need in the
            concrete environment</para>
                </listitem>
                <listitem>
                    <para>Highly customizable Logging based on log4j including
            Email-Logging, Text-Message-Logging, Portfolio Value Logging,
            etc.</para>
                </listitem>
            </itemizedlist>
        </para>
    </chapter>
    <chapter>
        <title>Architecture</title>
        <para>The System is composed of the following two layers:</para>
        <para>The Trading Framework layer is the base for all strategies running
      on top of it. It is responsible for persistence to the database. It
      holds the connection to the Broker Interfaces to retrieve live market
      data as well as to place orders and receive back executions. The Trading
      Framework is also responsible for Risk Management, Portfolio Management,
      Performance Measurement, Reconciliation, FX Hedging and Strategy
      Rebalancing. For many of its tasks the Trading Framework uses a
      contained Esper Engine Instance.</para>
        <para>On top of the Trading Framework any number of Strategies can be
      installed. In Live Trading mode each strategy runs in its own process.
      Each Strategy contains its own Esper Engine Instance. A Strategy can use
      any type and number of Technical Indicators and custom trading rules to
      evaluate trend and to retrieve market signals. Orders are delegated to
      the underlying Trading Framework for execution.</para>
        <para>
            <inlinemediaobject>
                <imageobject>
                    <imagedata fileref="images/File_Architecture_Layers.gif" scalefit="1" width="100%"/>
                </imageobject>
            </inlinemediaobject>
        </para>
        <section>
            <title>Operating Systems</title>
            <para>The entire system is developed in Java. Therefor the system is
        portable to any environment. The System has been developed on a
        Windows 7 machine and has been in production on FreeBSD as well as
        Linux Servers.</para>
        </section>
        <section>
            <title>Services / Processes</title>
            <para>The following Services / Process are used by the system:</para>
            <informaltable border="1">
                <tr>
                    <td>Service / Process</td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td>Trading Framework</td>
                    <td>This is the main process that should be kept running all the
            times in order to record market data without gaps</td>
                </tr>
                <tr>
                    <td>Strategies</td>
                    <td>In Live Trading Mode each strategy runs in its on Java
            process. In simulation mode, the strategies run within the same
            process as the trading framework</td>
                </tr>
                <tr>
                    <td>ActiveMQ</td>
                    <td>this is the JMS (Java Messaging Service) Broker that is
            responsible to transfer messages between the Trading Framework and
            the Strategies</td>
                </tr>
                <tr>
                    <td>MySql</td>
                    <td>Database process</td>
                </tr>
            </informaltable>
            <para>Because the framework and the strategies are running within
        separate processes, individual strategies can be stopped / altered /
        restarted independent of each other and the framework.</para>
        </section>
    </chapter>
    <chapter>
        <title>UML Model</title>
        <para>The UML Model in use by the system is described in the following
      sections</para>
        <section>
            <title>Entities</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/File_Overview.png" scalefit="1" width="100%"/>
                </imageobject>
            </mediaobject>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/File_BaseEntities.png" scalefit="1" width="100%"/>
                </imageobject>
            </mediaobject>
            <para>Each Entity defines fields and methods. For each field the
        necessary database columns are generated and for each method the
        necessary method signature is generated. A special type of method
        called finder method defines hibernate query statements for database
        lookup of entities.</para>
            <para>Relations are specified using common UML syntax. Based on that
        the necessary referential integrity and join tables are also generated
        automatically.</para>
            <para>The Main Entities of the system are specified within the
        following table:</para>
            <informaltable border="1">
                <tr>
                    <td>Entity</td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td>Strategy</td>
                    <td>Each object of this class represents a running strategy within
            the system</td>
                </tr>
                <tr>
                    <td>Security</td>
                    <td>This is the base class of all securities in the system</td>
                </tr>
                <tr>
                    <td>Subscription</td>
                    <td>Market Data Subscriptions for particular Securities by an
            individual Strategy are represented by this class</td>
                </tr>
                <tr>
                    <td>MarketDataEvent</td>
                    <td>Represents any type of market data related to a particular
            security</td>
                </tr>
                <tr>
                    <td>Order</td>
                    <td>Any type of Order for a particular security</td>
                </tr>
                <tr>
                    <td>Account</td>
                    <td>Represents an actual account / account group / allocation
            profile with an external Broker / Bank</td>
                </tr>
                <tr>
                    <td>Transaction</td>
                    <td>Each Fill is recorded as a transaction in the database using
            this entity. In addition the table transaction also carries
            transactions like intrest, debit, credit &amp; fees</td>
                </tr>
                <tr>
                    <td>Position</td>
                    <td>For each opening transaction a position is created which also
            carries exit values and maintenance margin</td>
                </tr>
            </informaltable>
            <section>
                <title>Strategy</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_Strategy.png" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <para>There are several classes, that are directly related to the
          strategy</para>
                <informaltable border="1">
                    <tr>
                        <td>Class</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td>PortfolioValue</td>
                        <td>Every hour certain portfolio values (like NetLiqValue,
              CashBalance, etc.) are saved to the database for every strategy.
              These will be displayed in the PortfolioChart for every strategy
              (in the client)</td>
                    </tr>
                    <tr>
                        <td>Measurement</td>
                        <td>Custom Measurements related to a strategy can be saved using
              this class</td>
                    </tr>
                    <tr>
                        <td>CashBalance</td>
                        <td>A CashBalance represents the current cash amount of one
              currency of a particular strategy</td>
                    </tr>
                    <tr>
                        <td>OrderPreference</td>
                        <td>This class allows to definition of certain order default
              values for an order(e.g. quantity, orderType, delays, etc.),
              except the orderType, all values have to be defined through
              Properties.</td>
                    </tr>
                    <tr>
                        <td>DefaultOrderPreference</td>
                        <td>This class allows to assignment of an OrderPreference and
              SecurityFamily for an individual strategy. This is useful for
              situations where the Base has to send an order regarding a
              position that belongs to a strategy (e.g. ClosePosition when the
              ExitValue is reached)</td>
                    </tr>
                    <tr>
                        <td>Allocation</td>
                        <td>If an OrderPreference is defined for an OrderType that sends
              orders to multiple accounts (e.g. DistributingOrder),
              allocations to different accounts can be defined.
              <literallayout>
</literallayout>
                            <emphasis>Note: the total of all allocations needs to be
              1.0</emphasis>
                        </td>
                    </tr>
                </informaltable>
            </section>
            <section>
                <title>Security</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_Security.png" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <para>The following UML Class diagram shows all available Security
          classes and related SecurityFamilies</para>
                <para>A Security Family contains the common information about an
          entire family of securities (i.e. all general information about
          options on S&amp;P500 are stored using this class). The class
          provides fields like market, currency, market opening hour &amp;
          market closing hour.</para>
                <section>
                    <title>Combination and Component</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/File_Combination.png" scalefit="1" width="100%"/>
                        </imageobject>
                    </mediaobject>
                    <para>Combinations of Securities (i.e. Option Spreads) are
            represented by the classes Combination and Component. The
            CombinationService is responsible to handle all Combination /
            Component related DB-Operations.</para>
                    <para>A Combination is available to all strategies and can be
            subscribed/unsubscribed in the usual manner.</para>
                    <para>The Base Trading Framework generates Ticks based on the size
            of the components of the combination and the current marketValues
            of the associated securities. This calculation is handled by the
            module module-combination.epl.</para>
                    <para>It is possible to create non-tradeable Positions based
            Combinations. It is also possible to assign exit-values to these
            combination-positions which will initiate closing trades to the
            corresponding securities if the marketPrice of the combination
            reaches the exitValue.</para>
                </section>
            </section>
            <section>
                <title>Market Data Events</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_MarketDataEvent.png" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <para>Market Data exists in two different kinds:</para>
                <informaltable border="1">
                    <tr>
                        <td>Entity</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td>Bar</td>
                        <td>OHLC Price Bars, also containing adjusted close and
              volumes</td>
                    </tr>
                    <tr>
                        <td>Tick</td>
                        <td>Snapshot of the market at a particular point in time,
              containing information like last price, last time, bid, ask,
              volume, etc.</td>
                    </tr>
                </informaltable>
                <para>For simulation purposes Bars and Ticks can be supplied through
          CSV files. In live trading Trades, Bids and Asks are received by the
          broker specific MarketDataService and routed to the Esper Service
          Instances.</para>
            </section>
            <section>
                <title>Order</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_Trade.png" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <para>The following UML Class diagram shows the Order and its
          related subclasses.</para>
                <informaltable border="1">
                    <tr>
                        <td>Entity</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td>Order</td>
                        <td>Orders are submitted to the broker interface using this
              class</td>
                    </tr>
                    <tr>
                        <td>OrderStatus</td>
                        <td>Order Status changes received back from the Broker (i.e.
              PARTIALLY_EXECUTED or CANCELLED) are represented by this
              class</td>
                    </tr>
                    <tr>
                        <td>Fill</td>
                        <td>Filled orders are represented by this Class</td>
                    </tr>
                    <tr>
                        <td>Transaction</td>
                        <td>Each Fill is recorded as a transaction in the database using
              this entity. In addition the table transaction also carries
              transactions like intrest, debit, credit &amp; fees</td>
                    </tr>
                    <tr>
                        <td>SimpleOrder</td>
                        <td>An Order that can be sent directly to the market</td>
                    </tr>
                    <tr>
                        <td>MarketOrder<literallayout>
</literallayout>LimitOrder<literallayout>
</literallayout>StopOrder<literallayout>
</literallayout>StopLimitOrder<literallayout>
</literallayout>TrailingStopOrder</td>
                        <td>Predefined SimpleOrder types</td>
                    </tr>
                    <tr>
                        <td>AlgoOrder</td>
                        <td>A composite order that will generate multiple SimpleOrders.
              A AlgoOrder cannot be sent directly to the market</td>
                    </tr>
                    <tr>
                        <td>SlicingOrder</td>
                        <td>AlgoOrder, that will split a large trade into multiple
              "slices". Size of the slice, time in the market and delay
              between orders are randomized</td>
                    </tr>
                    <tr>
                        <td>Incremental Limit Order</td>
                        <td>AlgoOrder that will "step through" the spread using
              LimitOrders with incremental limits</td>
                    </tr>
                    <tr>
                        <td>TickwiseIncrementalLimitOrder</td>
                        <td>Will step through the spread Tick-by-Tick</td>
                    </tr>
                    <tr>
                        <td>VariableIncrementalLimitOrder</td>
                        <td>Will step through the spread by a specified percentage of
              the spread</td>
                    </tr>
                    <tr>
                        <td>DistributionalOrder</td>
                        <td>an order that generates multiple simple orders, each one
              targeted at a different account according to defined
              allocation</td>
                    </tr>
                </informaltable>
            </section>
            <section>
                <title>Account</title>
                <para>An Account represents either an actual account, an account
          group (IB specific) or an allocation profile (IB specific). An
          account is assigned to a particular OrderServiceType (e.g. IB_NATIVE
          or IB_FIX). In addition there is the field sessionQualifier which is
          needed to define the actual session in place (primarily for FIX
          Connections). With this setup, it is possible that there are
          multiple Sessions (SessionQualifiers) per OrderServiceType and that
          there are multiple Accounts per Session.</para>
                <para>
                    <emphasis>Note: Orders sent to the market will always contain
          Account related information in an adequate way (e.g. as a FIX Tag
          1). Also Transactions which are based on an actual trade will have
          an association with a particular Account. However Positions do not
          hold any information regarding Accounts. It is therefore possible
          that a Position holds aggregated Quantities from several external
          Accounts. There reason for this is, that Strategies should not have
          to worry about the actual Accounts the funds are located in. this
          way, a strategy will always only see one Position per
          Security.</emphasis>
                </para>
            </section>
            <section>
                <title>Position</title>
                <para>In general position values (e.g. marketPrice, marketValue,
          averagePrice, cost, unrealized / realized PL) are calculated per
          actual strategy related position.</para>
                <para>Since some values (e.g. marketValue) depend on whether the
          position is long or short, aggregated position values for the same
          security (of different strategies) cannot be retrieved just by
          adding position values from the corresponding strategies.
          Example:</para>
                <itemizedlist>
                    <listitem>
                        <para>Security: VIX Dec 2012</para>
                    </listitem>
                </itemizedlist>
                <itemizedlist>
                    <listitem>
                        <para>Current Bid: 16.50</para>
                    </listitem>
                </itemizedlist>
                <itemizedlist>
                    <listitem>
                        <para>Current Ask: 16.60</para>
                    </listitem>
                </itemizedlist>
                <itemizedlist>
                    <listitem>
                        <para>Strategy A: quantity +10 -&gt; marketValue: 10 * 1000 *
              16.50 = 165'000</para>
                    </listitem>
                </itemizedlist>
                <itemizedlist>
                    <listitem>
                        <para>Strategy B: quantity -10 -&gt; marketValue: 10 * 1000 *
              16.60 = -166'000</para>
                    </listitem>
                </itemizedlist>
                <para>The sum of above marketValues would be -1'000 which is
          obviously wrong.</para>
                <para>As a consequence the PortfolioDAO provides lookup-methods that
          aggregate positions from the same security (of different strategies)
          in the correct manner (e.g. findOpenPositionsAggregated).</para>
            </section>
            <section>
                <title>Property</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_Property.png" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <para>The classes Strategy, Position, Subscription and
          OrderPreference are derived from the abstract class PropertyHolder.
          Therefore one or more Properties can be assigned to them. A Property
          can be of type int, double, money, text, date or boolean (but only
          one at a time).</para>
                <para>Because PropertyHolders use Hibernate Union-Subclass strategy,
          Id's of different PropertyHolder tables may not overlap. For
          directly in the database created PropertyHolders the following range
          of Id's are reserved:</para>
                <informaltable border="1">
                    <tr>
                        <td>PropertyHolder</td>
                        <td>Range</td>
                    </tr>
                    <tr>
                        <td>Strategy</td>
                        <td>0 - 99</td>
                    </tr>
                    <tr>
                        <td>Subscription</td>
                        <td>100 - 199</td>
                    </tr>
                    <tr>
                        <td>OrderPreference</td>
                        <td>200 - 299</td>
                    </tr>
                    <tr>
                        <td>Position</td>
                        <td>300 - 399</td>
                    </tr>
                </informaltable>
            </section>
        </section>
        <section>
            <title>Services</title>
            <para>The system is based on a Service Oriented Architecture (SOA).
        Therefor all operations of the system are provided as services.
        Available services are grouped into these three groups: <orderedlist numeration="arabic">
                    <listitem>
                        <para>Base Services</para>
                    </listitem>
                    <listitem>
                        <para>Private Services, which are only used by the Base Trading
              Framework</para>
                    </listitem>
                    <listitem>
                        <para>Client Services, which will be instantiated by each
              Strategy (and the Base Trading Framework itself)</para>
                    </listitem>
                </orderedlist>
            </para>
            <para>The purpose of the Main Services is explained by the following
        tables:</para>
            <section>
                <title>Base Services</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_BaseServices.png" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <informaltable border="1">
                    <tr>
                        <td>Service</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td>MarketDataService</td>
                        <td>Responsible for the retrieval of MarketData as well as
              Subscription Management. This service is also responsible to
              generate simulated ticks in simulation mode (i.e. generate
              option ticks based on underlying and volatility ticks)</td>
                    </tr>
                    <tr>
                        <td>OrderService</td>
                        <td>Responsible to send orders to the Market via defined Broker
              Interface</td>
                    </tr>
                    <tr>
                        <td>PositionService</td>
                        <td>Responsible for management of positions. I.e. close
              position, reduce position and set an exit value</td>
                    </tr>
                    <tr>
                        <td>AccountService</td>
                        <td>This service is responsible to carry out operations like
              rebalancing between strategies and reconciliation</td>
                    </tr>
                    <tr>
                        <td>HistoricalDataService</td>
                        <td>The HistoricalDataService is used to retrieve historical
              data of symbols specified</td>
                    </tr>
                    <tr>
                        <td>CombinationService</td>
                        <td>The CombinationService is responsible to handle all
              Combination / Allocation related DB-Operations.</td>
                    </tr>
                    <tr>
                        <td>LazyLoaderService</td>
                        <td>This service makes the standard Hibernate
              Lazy-Loading-Mechanism available to Strategies (that run in a
              different process)</td>
                    </tr>
                    <tr>
                        <td>ForexService</td>
                        <td>This service is responsible for the FX hedging
              mechanism</td>
                    </tr>
                    <tr>
                        <td>StockOptionService<literallayout>
</literallayout>FutureService</td>
                        <td>These services are responsible for all option and future
              specific operations like expire options, margin handling as well
              as creation of dummy (simulated) stock options in simulation
              mode</td>
                    </tr>
                    <tr>
                        <td>LookupService</td>
                        <td>This service provides general data lookup operations to
              other services</td>
                    </tr>
                    <tr>
                        <td>ReportingService</td>
                        <td>This service is responsible to provide actual database
              values to the ManagementService</td>
                    </tr>
                </informaltable>
            </section>
            <section>
                <title>Private Services</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_PrivateServices.png" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <informaltable border="1">
                    <tr>
                        <td>Service</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td>TransactionService</td>
                        <td>This service is responsible for storing orders in the
              database</td>
                    </tr>
                    <tr>
                        <td>CashBalanceService</td>
                        <td>This service manages CashBalances</td>
                    </tr>
                    <tr>
                        <td>SimulationService</td>
                        <td>Responsible for carrying out simulations and automated
              parameter optimizations</td>
                    </tr>
                    <tr>
                        <td>ImportService</td>
                        <td>This service enables import of market data from CSV
              files</td>
                    </tr>
                    <tr>
                        <td>SecurityRetrieverService</td>
                        <td>This service downloads current option and future chains
              usign the broker interface</td>
                    </tr>
                    <tr>
                        <td>BaseManagementService</td>
                        <td>This service provides management features of the trading
              framework itself like reconnect to the broker interface, close
              positions, set exit value, reduce position and display
              connection states.</td>
                    </tr>
                    <tr>
                        <td>TestService</td>
                        <td>This service is used for testing purposes only</td>
                    </tr>
                    <tr>
                        <td>VerificationService</td>
                        <td>This service is used to verify current transactions and
              ticks in the database</td>
                    </tr>
                </informaltable>
            </section>
            <section>
                <title>Client Services</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_ClientServices.png" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <informaltable border="1">
                    <tr>
                        <td>ManagementService</td>
                        <td>This services provides the JMX Management function of the
              system. The ManagementService is therefore tagged as
              @algoTrader.service.manageable. The ManagementService is
              provided by each strategy as well as by the trading framework
              itself and displays all relevant financial data at the current
              time, i.e. Strategy Name, Cash Balance, Net Liquidation Value,
              Leverage, Margin, Positions, Last Ticks, Last Transactions,
              FX-Balances.</td>
                    </tr>
                    <tr>
                        <td>SubscriptionService</td>
                        <td>This service is used by the strategy for subscription
              management. The actual DB related operations are carried out by
              the MarketDataService</td>
                    </tr>
                    <tr>
                        <td>DefaultService</td>
                        <td>This is the base class for all strategy services which has
              references to all necessary services of the base trading
              framework</td>
                    </tr>
                    <tr>
                        <td>RuleService</td>
                        <td>Wrapper service for Esper service instances. Provides
              operations to manage the Esper service instance itself, to
              manage statements and to manage modules, to send and retrieve
              events, to manage timer-handling and to coordinate input
              adapters</td>
                    </tr>
                </informaltable>
            </section>
            <section>
                <title>IB Services</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_IBSyncServices.png" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_IBAsyncServices.png" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <para>The diagrams on the right show the IB implementation of the
          abstract broker interface classes. Sync Services are those services
          that are implemented in a synchronous fashion, whereas Async
          services are implemented asynchronously. meaning that calling
          operations will return immediately without waiting for a
          corresponding response.</para>
            </section>
            <section>
                <title>FIX Services</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_FixServices.png" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <para>The abstract FixOrderService is derived from the general
          ExternalOrderService. Every broker implementation has to derive its
          own FixOrderService from the abstract FixOrderService.</para>
            </section>
            <section>
                <title>Reconciliation</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_Reconciliation.png" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <para>Every BrokerInterface that needs automated reconciliation has
          to derive a ReconciliationService from the abstract
          ReconciliationService. For further information see <ulink url="Reconciliation">Reconciliation</ulink>
                </para>
            </section>
        </section>
        <section>
            <title>Value Object</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/File_ValueObjects.png" scalefit="1" width="100%"/>
                </imageobject>
            </mediaobject>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/File_PrivateValueObjects.png" scalefit="1" width="100%"/>
                </imageobject>
            </mediaobject>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/File_IBValueObjects.png" scalefit="1" width="100%"/>
                </imageobject>
            </mediaobject>
            <para>Value objects are provided for situations where database
        persistence is not necessary or not available. If a value object
        corresponds to an entity, this can be indicated using an association,
        which leads to the corresponding mapping methods being generated by
        AndroMDA. Value objects are pure Java Beans and do not contain
        operations.</para>
            <para>The diagrams on the right show the value objects provided by the
        system. Private Value Objects are in use only by the Base Trading
        Framework. IB Value Objects are in use only by the IB Broker
        Interface</para>
        </section>
        <section>
            <title>Enumeration</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/File_Enumerations.png" scalefit="1" width="100%"/>
                </imageobject>
            </mediaobject>
            <para>Enumerations correspond to and are generated into JDK 5
        Enumerations.</para>
        </section>
        <section>
            <title>Dependencies</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/File_Dependencies.png" scalefit="1" width="100%"/>
                </imageobject>
            </mediaobject>
            <para>Dependencies between services and between services and entities
        (data access objects) are modeled using UML dependencies. At runtime
        dependencies are automatically injected using the
        springframework.</para>
        </section>
    </chapter>
    <chapter>
        <title>Code Generation</title>
        <para>The entire system is developed by means of Model Driven
      Architecture (MDA) using the framework AndroMDA
      (www.andromda.org).</para>
        <para>The following links and tutorials give a good overview of Code
      Generator with AndroMDA: <itemizedlist>
                <listitem>
                    <para>
                        <ulink url="http://www.andromda.org/docs/contrib/birds-eye-view.html"> A
            Bird's Eye view of AndroMDA</ulink>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <ulink url="http://www.andromda.org/docs/starting.html#My20first20AndroMDA20project">
            Getting started with AndroMDA</ulink> or <ulink url="http://www.andromda.org/docs-3.3/andromda-documentation/andromda-getting-started-java/java/env-setup.html">
            Prepare the Development Environment</ulink>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <ulink url="http://www.andromda.org/docs/andromda-documentation/getting-started-java/index.html">
            Getting Started Java - long winded 'TimeTrackingService'
            example</ulink>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <ulink url="http://www.andromda.org/docs/andromda-cartridges/andromda-spring-cartridge/howto.html">
            Spring Cartridge example - short and focused on buisness tier of
            3-tier application architecture</ulink>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <ulink url="http://forum.andromda.org/"> AndroMDA's forum
            where you can get FREE support</ulink>
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        <para>Much of the system is modeled in UML. It is recommended to use
      MagicDraw for modelling (see <ulink url="Installation%23Platform_requirements">
      Platform_requirements</ulink>)</para>
        <para>The actual UML Model is defined in the following xmi images/File_
      <programlisting format="linespecific">/algotrader-mda/src/main/uml/algotrader.xml</programlisting>
        </para>
        <para>The model is transferred into code by means of <ulink url="http://www.andromda.org"> AndroMDA</ulink> which uses <ulink url="http://maven.apache.org"> Maven</ulink> artifacts and <ulink url="http://velocity.apache.org"> Velocity</ulink> templates for code
      generation.</para>
        <para>Generated code is placed under the directory /target, whereas
      implementation classes are generated into the directory /src with only
      the method signatures.</para>
        <para>Configuration of the code generator is placed into the /mda
      directory. It is also this directory that contains template
      modifications as well as mappings from UML artifacts to Java / Database
      objects.</para>
        <para>
            <emphasis>Note:</emphasis>
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis>When opening the file algotrader.xml for the first
          time, the location of the Maven 2 Repository has to be defined. This
          is usually in user-home-directory/.m2/repository.</emphasis>
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>In addition the path to the UML-Standard-Profile has
          to be defined. This file lies in the profiles sub directory of the
          MagicDraw Installation directory (e.g.,
          ..\MagicDraw\profiles\UML_Standard_Profile.xml)</emphasis>
                </para>
            </listitem>
        </itemizedlist>
        <section>
            <title>Tagged Values</title>
            <para>The following custom tagged values are used in the UML
        Model:</para>
            <informaltable border="1">
                <tr>
                    <td>tagged value</td>
                    <td>description</td>
                </tr>
                <tr>
                    <td>algoTrader_entity_transient</td>
                    <td>an entity that is not persisted to the database (no hbm.xml
            and table definitions will be generated)</td>
                </tr>
                <tr>
                    <td>algoTrader_finder_method_locked</td>
                    <td>a finder method that will use table locking (see <ulink url="Hibernate_Concurrency_and_Locking">Hibernate Concurrency and
            Locking</ulink>)</td>
                </tr>
                <tr>
                    <td>algoTrader_finder_method_native_query</td>
                    <td>a native sql query (as opposed to a hibernate query)</td>
                </tr>
                <tr>
                    <td>algoTrader_finder_method_native_query_entity</td>
                    <td>defines the entity (fully qualified class name) that should be
            mapped through this native query</td>
                </tr>
                <tr>
                    <td>algoTrader_service_client</td>
                    <td>a service that will be available locally inside strategies (as
            opposed to a service that is invoked over RMI from the
            client)</td>
                </tr>
                <tr>
                    <td>algoTrader_service_manageable</td>
                    <td>a service that is manageable via JMX</td>
                </tr>
                <tr>
                    <td>algoTrader_service_method_manageable</td>
                    <td>a service method that is manageable via JMX</td>
                </tr>
                <tr>
                    <td>algoTrader_service_method_manageable_attribute</td>
                    <td>a service method that is displayed as an attribute via
            JMX</td>
                </tr>
                <tr>
                    <td>algoTrader_service_no_transaction_interceptor</td>
                    <td>a service that does not have a transaction interceptor
            associated (for services that do not contain any CRUD
            operations)</td>
                </tr>
                <tr>
                    <td>algoTrader_service_no_hibernate_interceptor</td>
                    <td>a service that does not have a hibernate interceptor
            associated (for services that do not access the database at
            all)</td>
                </tr>
                <tr>
                    <td>algoTrader_service_profile</td>
                    <td>assigns one ore more SpringFramework profiles to this
            service</td>
                </tr>
                <tr>
                    <td>algoTrader_service_alias</td>
                    <td>assigns a SpringFramework alias to this service</td>
                </tr>
                <tr>
                    <td>algoTrader_value_object_private</td>
                    <td>a value object that will not be visible to clients</td>
                </tr>
            </informaltable>
            <para>The following standard AndroMDA tagged values are used in the
        UML Model:</para>
            <informaltable border="1">
                <tr>
                    <td>tagged value</td>
                </tr>
                <tr>
                    <td>
                        <ulink url="http://www.andromda.org/andromda-cartridges/andromda-hibernate-cartridge/profile.html#andromda_hibernate_collection_index">
            andromda_hibernate_collection_index</ulink>
                    </td>
                </tr>
                <tr>
                    <td>
                        <ulink url="http://www.andromda.org/andromda-cartridges/andromda-hibernate-cartridge/profile.html#andromda_hibernate_collection_type">
            andromda_hibernate_collection_type</ulink>
                    </td>
                </tr>
                <tr>
                    <td>
                        <ulink url="http://www.andromda.org/andromda-cartridges/andromda-hibernate-cartridge/profile.html#andromda_hibernate_ehcache_maxElementsInMemory">
            andromda_hibernate_ehcache_maxElementsInMemory</ulink>
                    </td>
                </tr>
                <tr>
                    <td>
                        <ulink url="http://www.andromda.org/andromda-cartridges/andromda-hibernate-cartridge/profile.html#andromda_hibernate_entity_cache">
            andromda_hibernate_entity_cache</ulink>
                    </td>
                </tr>
                <tr>
                    <td>
                        <ulink url="http://www.andromda.org/andromda-cartridges/andromda-hibernate-cartridge/profile.html#andromda_hibernate_generator_class">
            andromda_hibernate_generator_class</ulink>
                    </td>
                </tr>
                <tr>
                    <td>
                        <ulink url="http://www.andromda.org/andromda-cartridges/andromda-hibernate-cartridge/profile.html#andromda_hibernate_inheritance">
            andromda_hibernate_inheritance</ulink>
                    </td>
                </tr>
                <tr>
                    <td>
                        <ulink url="http://www.andromda.org/andromda-cartridges/andromda-hibernate-cartridge/profile.html#andromda_hibernate_lazy">
            andromda_hibernate_lazy</ulink>
                    </td>
                </tr>
                <tr>
                    <td>
                        <ulink url="http://www.andromda.org/andromda-cartridges/andromda-hibernate-cartridge/profile.html#andromda_hibernate_outerjoin">
            andromda_hibernate_outerjoin</ulink>
                    </td>
                </tr>
                <tr>
                    <td>
                        <ulink url="http://www.andromda.org/andromda-cartridges/andromda-hibernate-cartridge/profile.html#andromda_hibernate_query">
            andromda_hibernate_query</ulink>
                    </td>
                </tr>
                <tr>
                    <td>
                        <ulink url="http://www.andromda.org/andromda-cartridges/andromda-hibernate-cartridge/profile.html#andromda_hibernate_query_useCache">
            andromda_hibernate_query_useCache</ulink>
                    </td>
                </tr>
                <tr>
                    <td>
                        <ulink url="http://www.andromda.org/andromda-cartridges/andromda-hibernate-cartridge/profile.html#andromda_hibernate_version">
            andromda_hibernate_version</ulink>
                    </td>
                </tr>
                <tr>
                    <td>
                        <ulink url="http://www.andromda.org/andromda-cartridges/andromda-spring-cartridge/profile.html#andromda_service_private">
            andromda_service_private</ulink>
                    </td>
                </tr>
                <tr>
                    <td>
                        <ulink url="http://www.andromda.org/andromda-cartridges/andromda-spring-cartridge/profile.html#andromda_spring_service_config_only">
            andromda_spring_service_config_only</ulink>
                    </td>
                </tr>
                <tr>
                    <td>
                        <ulink url="http://www.andromda.org/andromda-cartridges/andromda-spring-cartridge/profile.html#andromda_spring_service_remoting_type">
            andromda_spring_service_remoting_type</ulink>
                    </td>
                </tr>
                <tr>
                    <td>
                        <ulink url="http://www.andromda.org/andromda-cartridges/andromda-spring-cartridge/profile.html#andromda_spring_transaction_type">
            andromda_spring_transaction_type</ulink>
                    </td>
                </tr>
            </informaltable>
        </section>
    </chapter>
    <chapter>
        <title>Java Development</title>
        <section>
            <title>Eclipse Projects</title>
            <para>The Framework AlgoTrader consists of the following Eclipse
        Projects:</para>
            <itemizedlist>
                <listitem>
                    <para>algotrader (the main project) <itemizedlist>
                            <listitem>
                                <para>algotrader/common (java code directly needed by the
                  strategies)</para>
                            </listitem>
                            <listitem>
                                <para>algotrader/core (internal java code only needed by the
                  base trading framework)</para>
                            </listitem>
                            <listitem>
                                <para>algotrader/mda (UML Model and code generator)</para>
                            </listitem>
                            <listitem>
                                <para>algotrader/client (JMX Client based on
                  JConsole)</para>
                            </listitem>
                            <listitem>
                                <para>algotrader/crud (DB management application)</para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
            </itemizedlist>
            <section>
                <title>common project</title>
                <para>the algotrader common project has the following
          structure:</para>
                <informaltable border="1">
                    <tr>
                        <td>Directory</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td>src/main/java</td>
                        <td>manually created source files</td>
                    </tr>
                    <tr>
                        <td>target/src/main/java</td>
                        <td>generated source files</td>
                    </tr>
                    <tr>
                        <td>src/main/resouces</td>
                        <td>configuration files</td>
                    </tr>
                    <tr>
                        <td>lib</td>
                        <td>jar files need for java agents</td>
                    </tr>
                </informaltable>
            </section>
            <section>
                <title>core project</title>
                <para>the algotrader core project has the following
          structure:</para>
                <informaltable border="1">
                    <tr>
                        <td>Directory</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td>src/main/java</td>
                        <td>manually created source files</td>
                    </tr>
                    <tr>
                        <td>target/src/main/java</td>
                        <td>generated source files</td>
                    </tr>
                    <tr>
                        <td>src/main/resouces</td>
                        <td>configuration files</td>
                    </tr>
                    <tr>
                        <td>bin</td>
                        <td>Launch configuration and shell start scripts</td>
                    </tr>
                    <tr>
                        <td>data</td>
                        <td>needed for Esper EE</td>
                    </tr>
                    <tr>
                        <td>log</td>
                        <td>contains log files</td>
                    </tr>
                    <tr>
                        <td>results</td>
                        <td>files which are created (i.e. copy of retrieved HTML code)
              or imported (i.e. Tick Data) into the system</td>
                    </tr>
                    <tr>
                        <td>lib</td>
                        <td>jar files not available through maven</td>
                    </tr>
                    <tr>
                        <td>sql</td>
                        <td>SQL scripts</td>
                    </tr>
                    <tr>
                        <td>webapps</td>
                        <td>needed for Esper EE</td>
                    </tr>
                </informaltable>
            </section>
            <section>
                <title>mda project</title>
                <para>the algotrader mda project has the following structure:</para>
                <informaltable border="1">
                    <tr>
                        <td>Directory</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td>bin</td>
                        <td>Launch configuration and shell start scripts</td>
                    </tr>
                    <tr>
                        <td>src/main/config</td>
                        <td>AndroMDA config files, customTemplates and mapping
              files</td>
                    </tr>
                    <tr>
                        <td>src/main/uml</td>
                        <td>Contains the UML Model</td>
                    </tr>
                </informaltable>
            </section>
            <section>
                <title>strategy projects</title>
                <para>The strategy projects algotrader-xxx have the following
          structure:</para>
                <informaltable border="1">
                    <tr>
                        <td>Directory</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td>src/main/java</td>
                        <td>java code</td>
                    </tr>
                    <tr>
                        <td>src/main/resources</td>
                        <td>config files</td>
                    </tr>
                    <tr>
                        <td>bin</td>
                        <td>Launch configuration and shell start scripts</td>
                    </tr>
                    <tr>
                        <td>lib</td>
                        <td>jar files not available through maven</td>
                    </tr>
                    <tr>
                        <td>log</td>
                        <td>log files</td>
                    </tr>
                    <tr>
                        <td>results</td>
                        <td>Contains mainly Market Data Files</td>
                    </tr>
                </informaltable>
            </section>
        </section>
        <section>
            <title>Java Packages</title>
            <para>The following table gives an overview of the provided java
        packages:</para>
            <informaltable border="1">
                <tr>
                    <td>Package</td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td>com.algoTrader</td>
                    <td>ServiceLocators</td>
                </tr>
                <tr>
                    <td>com.algoTrader.client</td>
                    <td>Jconsole client</td>
                </tr>
                <tr>
                    <td>com.algoTrader.entity.*</td>
                    <td>Entities and corresponding Hibernate DataAccessObjects</td>
                </tr>
                <tr>
                    <td>com.algoTrader.enumeration</td>
                    <td>Enumerations</td>
                </tr>
                <tr>
                    <td>com.algoTrader.esper.*</td>
                    <td>Files used for Esper (i.e. aggregation functions, listeners
            and subscribers)</td>
                </tr>
                <tr>
                    <td>com.algoTrader.future</td>
                    <td>Contains classes specific to Futures</td>
                </tr>
                <tr>
                    <td>com.algoTrader.sabr</td>
                    <td>SABR Volatility Model</td>
                </tr>
                <tr>
                    <td>com.algoTrader.service.*</td>
                    <td>Contains all Spring Services</td>
                </tr>
                <tr>
                    <td>com.algoTrader.stockOption</td>
                    <td>Contains classes specific to Options</td>
                </tr>
                <tr>
                    <td>com.algoTrader.starter</td>
                    <td>Startup-Classes as well as a generic ServiceInvoker</td>
                </tr>
                <tr>
                    <td>com.algoTrader.test</td>
                    <td>Test-Classes</td>
                </tr>
                <tr>
                    <td>com.algoTrader.util.*</td>
                    <td>General Utility methods</td>
                </tr>
                <tr>
                    <td>com.algoTrader.vo</td>
                    <td>ValueObjects</td>
                </tr>
            </informaltable>
        </section>
        <section>
            <title>Maven Dependencies</title>
            <para>The following maven dependencies are in place</para>
            <section>
                <title>algotrader common</title>
                <informaltable border="1">
                    <tr>
                        <td>Dependency</td>
                        <td>Version</td>
                    </tr>
                    <tr>
                        <td>activemq-core</td>
                        <td>5.5.1</td>
                    </tr>
                    <tr>
                        <td>collections-generic</td>
                        <td>4.01</td>
                    </tr>
                    <tr>
                        <td>commons-beanutils</td>
                        <td>1.8.3</td>
                    </tr>
                    <tr>
                        <td>commons-collections</td>
                        <td>3.2.1</td>
                    </tr>
                    <tr>
                        <td>commons-lang</td>
                        <td>2.6</td>
                    </tr>
                    <tr>
                        <td>commons-logging</td>
                        <td>1.1.1</td>
                    </tr>
                    <tr>
                        <td>commons-math</td>
                        <td>2.2</td>
                    </tr>
                    <tr>
                        <td>esper</td>
                        <td>4.5.0</td>
                    </tr>
                    <tr>
                        <td>esperee-jmx</td>
                        <td>4.4.1</td>
                    </tr>
                    <tr>
                        <td>esperio-csv</td>
                        <td>4.5.0</td>
                    </tr>
                    <tr>
                        <td>esperio-springjms</td>
                        <td>4.5.0</td>
                    </tr>
                    <tr>
                        <td>hibernate-core</td>
                        <td>3.6.9.Final</td>
                    </tr>
                    <tr>
                        <td>javassist</td>
                        <td>3.12.1.GA</td>
                    </tr>
                    <tr>
                        <td>mail</td>
                        <td>1.4.4</td>
                    </tr>
                    <tr>
                        <td>spring-beans</td>
                        <td>3.1.0-RELEASE</td>
                    </tr>
                    <tr>
                        <td>spring-context</td>
                        <td>3.1.0-RELEASE</td>
                    </tr>
                    <tr>
                        <td>spring-core</td>
                        <td>3.1.0-RELEASE</td>
                    </tr>
                    <tr>
                        <td>org.osgi.core</td>
                        <td>4.3.0</td>
                    </tr>
                    <tr>
                        <td>ta-lib</td>
                        <td>0.4.0</td>
                    </tr>
                    <tr>
                        <td>slf4j-api</td>
                        <td>1.6.4</td>
                    </tr>
                    <tr>
                        <td>slf4j-log4j12</td>
                        <td>1.6.4</td>
                    </tr>
                </informaltable>
            </section>
            <section>
                <title>algotrader core</title>
                <informaltable border="1">
                    <tr>
                        <td>Dependency</td>
                        <td>Version</td>
                    </tr>
                    <tr>
                        <td>algotrader-common</td>
                        <td/>
                    </tr>
                    <tr>
                        <td>algotrader-sabr</td>
                        <td>1.0.0</td>
                    </tr>
                    <tr>
                        <td>ant</td>
                        <td>1.8.2</td>
                    </tr>
                    <tr>
                        <td>commons-httpclient</td>
                        <td>3.1</td>
                    </tr>
                    <tr>
                        <td>commons-io</td>
                        <td>2.1</td>
                    </tr>
                    <tr>
                        <td>c3p0</td>
                        <td>0.9.1.2</td>
                    </tr>
                    <tr>
                        <td>ehcache</td>
                        <td>2.5.0</td>
                    </tr>
                    <tr>
                        <td>esperee</td>
                        <td>4.4.1</td>
                    </tr>
                    <tr>
                        <td>hibernate-jmx</td>
                        <td>3.5.6-Final</td>
                    </tr>
                    <tr>
                        <td>ibclient</td>
                        <td>9.6.5</td>
                    </tr>
                    <tr>
                        <td>javabuilder</td>
                        <td>1.0.0</td>
                    </tr>
                    <tr>
                        <td>jtidy</td>
                        <td>r8-21122004</td>
                    </tr>
                    <tr>
                        <td>junit</td>
                        <td>4.10</td>
                    </tr>
                    <tr>
                        <td>maven-invoker</td>
                        <td>2.0.11</td>
                    </tr>
                    <tr>
                        <td>mysql-connector-java</td>
                        <td>5.1.18</td>
                    </tr>
                    <tr>
                        <td>org.osgi.core</td>
                        <td>4.3.0</td>
                    </tr>
                    <tr>
                        <td>SuperCSV</td>
                        <td>1.5.2</td>
                    </tr>
                    <tr>
                        <td>spiffy</td>
                        <td>1.0.0</td>
                    </tr>
                    <tr>
                        <td>spring-context-support</td>
                        <td>3.1.0-RELEASE</td>
                    </tr>
                    <tr>
                        <td>spring-orm</td>
                        <td>3.1.0-RELEASE</td>
                    </tr>
                    <tr>
                        <td>xalan</td>
                        <td>2.7.1</td>
                    </tr>
                    <tr>
                        <td>xmlbeans</td>
                        <td>2.4.0</td>
                    </tr>
                </informaltable>
            </section>
            <section>
                <title>algotrader client</title>
                <informaltable border="1">
                    <tr>
                        <td>Dependency</td>
                        <td>Version</td>
                    </tr>
                    <tr>
                        <td>algotrader-common</td>
                        <td/>
                    </tr>
                    <tr>
                        <td>commons-lang</td>
                        <td>2.6</td>
                    </tr>
                    <tr>
                        <td>commons-beanutils</td>
                        <td>1.8.3</td>
                    </tr>
                    <tr>
                        <td>jcommon</td>
                        <td>1.0.12</td>
                    </tr>
                    <tr>
                        <td>jfreechart</td>
                        <td>1.0.6</td>
                    </tr>
                    <tr>
                        <td>orson</td>
                        <td>0.5.0</td>
                    </tr>
                </informaltable>
            </section>
        </section>
        <section>
            <title>Coding Standards</title>
            <section>
                <title>CheckStyle</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_CheckStyle.gif" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_CheckStyleProject.gif" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <para>The project uses CheckStyle to verify java coding
          standards.:</para>
                <para>CheckStyle is enabled by default in the Maven built.</para>
                <para>In addition the Plugin Eclipse-CS can be used to enable
          Checkstyle inside Eclipse. To use Eclipse-CS a new Global Check
          Configuration has to be added in Eclipse / Window / Preferences /
          Checkstyle pointing to: <programlisting format="linespecific">/algotrader-code/checkstyle.xml</programlisting>
                </para>
                <para>Also, in the java project properties, Checkstyle has to be
          enabled and pointing to the AlgoTrader (Global)
          configuration.</para>
            </section>
            <section>
                <title>Clean Up / Formatter</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_CleanUp-Formatter.gif" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <para>In addition to using Checkstyle, Eclipse has two handy
          features to automatically format Java Code <itemizedlist>
                        <listitem>
                            <para>Clean Up: This feature is responsible to do a general
                clean up when saving a modified File (i.e. remove unused
                imports)</para>
                        </listitem>
                        <listitem>
                            <para>Formatter: This feature will automatically format source
                code according to definable standards (can be invoked through
                right click / source / format)</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>A default set of policies targeted to automatically conform
          with defined checkstyle rules is available. These are available in
          the source code of the project.</para>
                <para>These configurations have to be imported them into Eclipse:
          <itemizedlist>
                        <listitem>
                            <para>Eclipse / Preferences / Java / Code Style / Clean Up:
                <programlisting format="linespecific">AlgoTrader-code/AlgoTrader-CleanUp.xml</programlisting>
                            </para>
                        </listitem>
                        <listitem>
                            <para>Eclipse / Preferences / Java / Code Style / Formatter:
                <programlisting format="linespecific">AlgoTrader-code/AlgoTrader-Formatter.xml</programlisting>
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
            </section>
        </section>
        <section>
            <title>Naming Guidelines</title>
            <section>
                <title>Java</title>
                <itemizedlist>
                    <listitem>
                        <para>Todo</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section>
                <title>Esper</title>
                <itemizedlist>
                    <listitem>
                        <para>Modules: module-xxx.epl</para>
                    </listitem>
                    <listitem>
                        <para>Statements <itemizedlist>
                                <listitem>
                                    <para>CREATE WINDOW: xxx_WINDOW</para>
                                </listitem>
                                <listitem>
                                    <para>CREATE VARIABLE: CREATE_VAR_xxx</para>
                                </listitem>
                                <listitem>
                                    <para>INSERT INTO / ON INSERT: INSERT_INTO_xxx</para>
                                </listitem>
                                <listitem>
                                    <para>ON DELETE: DELETE_FROM_xxx</para>
                                </listitem>
                                <listitem>
                                    <para>ON UPDATE: UPDATE_xxx</para>
                                </listitem>
                                <listitem>
                                    <para>ON SET: SET_xxx</para>
                                </listitem>
                                <listitem>
                                    <para>SELECT: name of action (i.e. CLOSE_POSITION)</para>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </listitem>
                </itemizedlist>
            </section>
            <section>
                <title>MySql</title>
                <itemizedlist>
                    <listitem>
                        <para>Tables: future, stock_option, etc</para>
                    </listitem>
                    <listitem>
                        <para>Fields: ID, NAME, EXIT_VALUE, STRATEGY_FK</para>
                    </listitem>
                </itemizedlist>
            </section>
        </section>
    </chapter>
    <chapter>
        <title>Esper Engine</title>
        <para>The system is built on CEP (Complex Event Processing) using the
      open source framework <ulink url="http://esper.codehaus.org/">
      Esper</ulink>.</para>
        <para>Individual Esper service engines are used inside the trading
      framework as well as within the strategies.</para>
        <para>Each of these engines can contain several modules. Modules
      specified within the column MODULES of the Table strategy, are loaded
      automatically on startup.</para>
        <para>Each strategy will load all Esper configuration files named
      <programlisting format="linespecific">esper-xxx.cfg.xml</programlisting>
      in the classpath. This configuration file defines settings like:</para>
        <itemizedlist>
            <listitem>
                <para>Event Types</para>
            </listitem>
            <listitem>
                <para>Auto Import Classes &amp; Packages</para>
            </listitem>
            <listitem>
                <para>Custom Aggregation Functions</para>
            </listitem>
            <listitem>
                <para>Variables</para>
            </listitem>
            <listitem>
                <para>General Engine Settings</para>
            </listitem>
        </itemizedlist>
        <section>
            <title>Trading Framework Modules</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/File_Esper-statements-simulation.gif" scalefit="1" width="100%"/>
                </imageobject>
            </mediaobject>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/File_Esper-statements-live.gif" scalefit="1" width="100%"/>
                </imageobject>
            </mediaobject>
            <para>The Trading Framework contains the following modules:</para>
            <informaltable border="1">
                <tr>
                    <td>Tag</td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td>module-algo.epl</td>
                    <td>Execution Algos</td>
                </tr>
                <tr>
                    <td>module-current-values.epl</td>
                    <td>Store current market data values (last tick, last bid, last
            ask, last trade, etc.)</td>
                </tr>
                <tr>
                    <td>module-ib.epl</td>
                    <td>IB specific statements</td>
                </tr>
                <tr>
                    <td>module-market-data.epl</td>
                    <td>statements related to market data retrieval</td>
                </tr>
                <tr>
                    <td>module-market-data-simulation.epl</td>
                    <td>simulation of market data</td>
                </tr>
                <tr>
                    <td>module-performance.epl</td>
                    <td>evaluation performance indicators</td>
                </tr>
                <tr>
                    <td>module-portfolio.epl</td>
                    <td>portfolio management functions like setMargin, expirePosition,
            closePosition, rebalancePortfolio, etc.</td>
                </tr>
                <tr>
                    <td>module-trades.epl</td>
                    <td>statements related to orders and executions</td>
                </tr>
            </informaltable>
            <para>The two diagrams on the right display the relationship of
        frequent Event-Types and Statements</para>
        </section>
        <section>
            <title>Strategy Modules</title>
            <para>Strategies are completely free in the definition of their Esper
        Statements. Examples of Statements used by strategies are:</para>
            <itemizedlist>
                <listitem>
                    <para>Creation of technical indicators (i.e. Moving Average,
            Stochastic, MACD, etc.)</para>
                </listitem>
                <listitem>
                    <para>Creation of trade signals</para>
                </listitem>
                <listitem>
                    <para>Trend evaluation</para>
                </listitem>
                <listitem>
                    <para>Open / Close / Increase / Reduce Positions</para>
                </listitem>
                <listitem>
                    <para>Set Exit Values</para>
                </listitem>
                <listitem>
                    <para>Roll Positions (i.e. for Options and Futures)</para>
                </listitem>
                <listitem>
                    <para>Pattern recognition</para>
                </listitem>
                <listitem>
                    <para>Orderbook analysis</para>
                </listitem>
            </itemizedlist>
        </section>
        <section>
            <title>Tags</title>
            <para>In addition to the standard tags provided by Esper the following
        tags are available:</para>
            <informaltable border="1">
                <tr>
                    <td>Tag</td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td>@Condition(key='xxx')</td>
                    <td>Statement is only deployed if defined configuration parameter
            is set to "true"</td>
                </tr>
                <tr>
                    <td>@SimulationOnly</td>
                    <td>Statement is only deployed in simulation</td>
                </tr>
                <tr>
                    <td>@RunTimeOnly()</td>
                    <td>Statement is only deployed in Live-Trading mode</td>
                </tr>
                <tr>
                    <td>@Listeners(classNames={'...'})</td>
                    <td>attaches one or several listeners to the statement</td>
                </tr>
                <tr>
                    <td>@Subscriber(className='...')</td>
                    <td>attaches a subscriber to the statement</td>
                </tr>
            </informaltable>
        </section>
        <section>
            <title>Subscribers</title>
            <para>The system provides the following Subscribers
        out-of-the-box:</para>
            <itemizedlist>
                <listitem>
                    <para>IndicatorSubscriber (print all values to
            indicator.csv)</para>
                </listitem>
                <listitem>
                    <para>PrintPortfolioValueSubscriber (print porftolio values like
            CashBalance, SecuritiesCurrentValue, MaintenanceMargin and
            Leverage to portfolio.csv)</para>
                </listitem>
                <listitem>
                    <para>TestSubscriber (print all values to the console)</para>
                </listitem>
                <listitem>
                    <para>VoidSubscriber (do nothing subscriber, usefull when select
            clauses call static methods)</para>
                </listitem>
            </itemizedlist>
            <para>The class <programlisting format="linespecific">com.algoTrader.esper.subscriber.SubscriberCreator</programlisting>
        can generate Subscriber classes on the fly using <ulink url="http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/">
        javassist</ulink>. Use the following syntax to call a spring service
        method directly:</para>
            <programlisting>@Subscriber(className='com.algoTrader.service.PositionService.setMargins')</programlisting>
        </section>
        <section>
            <title>Listeners</title>
            <para>The system provides the following Listeners
        out-of-the-box:</para>
            <itemizedlist>
                <listitem>
                    <para>IndicatorListener (print all values to indicator.csv)</para>
                </listitem>
                <listitem>
                    <para>RendererListener (print all values to the console in xml
            format)</para>
                </listitem>
                <listitem>
                    <para>TestListener (print all values to the console)</para>
                </listitem>
            </itemizedlist>
        </section>
        <section>
            <title>Aggregation Functions</title>
            <para>The system provides the following three custom aggregation
        functions:</para>
            <itemizedlist>
                <listitem>
                    <para>ExponentialMovingAverageFunction</para>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <listitem>
                    <para>GenericTALibFunction (portation of <ulink url="http://ta-lib.org/">http://ta-lib.org/</ulink> to
            AlgoTrader)</para>
                </listitem>
                <listitem>
                    <para>VariableLengthLinestFunction</para>
                </listitem>
            </itemizedlist>
        </section>
        <section>
            <title>Callbacks</title>
            <section>
                <title>FirstTickCallback</title>
                <para>Objects of the abstract class FirstTickCallback can be handed
          to the <programlisting format="linespecific">RuleService.addFirstTickCallback()</programlisting>.
          Whenever at least one Tick of each specified security has arrived
          the method <programlisting format="linespecific">FirstTickCallback.onFirstTick()</programlisting>
          will be executed.</para>
                <para>A typical use case of a FirstTickCallback looks like
          this:</para>
                <programlisting> EsperManager.addFirstTickCallback(strategyName, securityIds, new TickCallback() {   @Override   public void onFirstTick(String strategyName, List&lt;Tick&gt; ticks) {     placeOrdersBasedOnTicks(ticks);   } });</programlisting>
            </section>
            <section>
                <title>TradeCallback</title>
                <para>Objects of the abstract class TradeCallback can be handed to
          the <programlisting format="linespecific">RuleService.addTradeCallback()</programlisting>.
          Whenever the corresponding trade has been fully executed or
          cancelled the method <programlisting format="linespecific">TradeCallback.onTradeCompleted()</programlisting>
          will be executed. If the parameter expectFullExecution is set onto
          the TradeCallback constructor, there will be an error logged if the
          order did not execute fully. In addition there is a concrete class
          FullExecutionTradeCallback that does nothing except check for full
          execution of the order</para>
                <para>A typical use case of a TradeCallback looks like this:</para>
                <programlisting> EsperManager.addTradeCallback(strategyName, orders, new TradeCallback(true) {      @Override   public void onTradeCompleted(List&lt;OrderStatus&gt; orderStati) {     OrderUtil.checkOrderStati(orderStati);     }  });</programlisting>
            </section>
            <section>
                <title>OpenPositionCallback</title>
                <para>Objects of the abstract class OpenPositionCallback can be
          handed to the <programlisting format="linespecific">RuleService.addOpenPositionCallback()</programlisting>.
          Whenever a corresponding transaction causes a new position to open
          method <programlisting format="linespecific">OpenPositionCallback.onOpenPosition()</programlisting>
          will be executed. Note: it is guaranteed, that the position is fully
          persistent to the database by the time the method <programlisting format="linespecific">OpenPositionCallback.onOpenPosition()</programlisting>
          is called.</para>
                <programlisting> EsperManager.addOpenPositionCallback(getStrategyName(), securityId, new OpenPositionCallback() {   @Override   public void onOpenPosition(OpenPositionVO positionVO) throws Exception {     setExitValue(positionVO.getId());   } });</programlisting>
            </section>
            <section>
                <title>ClosePositionCallback</title>
                <para>Objects of the abstract class ClosePositionCallback can be
          handed to the <programlisting format="linespecific">RuleService.addClosePositionCallback()</programlisting>.
          Whenever a corresponding transaction causes a position to be closed,
          the method <programlisting format="linespecific">ClosePositionCallback.onClosePosition()</programlisting>
          will be executed. Note: it is guaranteed, that the position is fully
          removed from the database by the time the method <programlisting format="linespecific">ClosePositionCallback.onClosePosition()</programlisting>
          is called.</para>
                <programlisting> EsperManager.addClosePositionCallback(getStrategyName(), securityId, new ClosePositionCallback() {   @Override   public void onClosePosition(ClosePositionVO positionVO) throws Exception {     // do something   } });</programlisting>
            </section>
            <section>
                <title>Persistent TradeCallback (Future Implementation)</title>
                <para>If ever a TradeCallback needs make sure, that corresponding
          transactions are fully persistent to the database, the following
          modifications are suggested:</para>
                <para>
                    <itemizedlist>
                        <listitem>
                            <para>add a field persistent to OrderStatus</para>
                        </listitem>
                        <listitem>
                            <para>add (transient) field extOrderId to Transaction</para>
                        </listitem>
                        <listitem>
                            <para>propagate Transactions to EsperEngine BASE</para>
                        </listitem>
                        <listitem>
                            <para>add the parameter expectFullPersistence to
                <programlisting format="linespecific">EsperManager.addTradeCallback</programlisting>
                            </para>
                        </listitem>
                        <listitem>
                            <para>modify statement DELETE_FROM_OPEN_ORDER_WINDOW: replace
                pattern with <programlisting format="linespecific">OrderStatus(status = Status.EXECUTED or status = Status.CANCELED, persistent)</programlisting>
                            </para>
                        </listitem>
                        <listitem>
                            <para>add the following two statements to
                module-trade.epl:</para>
                        </listitem>
                    </itemizedlist>
                    <programlisting>insert into    OrderStatusselect    orderStatus.status as status,    orderStatus.filledQuantity as filledQuantity,    orderStatus.remainingQuantity as remainingQuantity,    orderStatus.ord as ord    true as persistentfrom    pattern[every genericOrder=GenericOrder -&gt;        (every transaction=Transaction(extOrderId = genericOrder.number)        and orderStatus=OrderStatus(ord.number = genericOrder.number, status = Status.EXECUTED or status = Status.CANCELED)" +        and not timer:interval(1 day))] group by    genericOrder.number, orderStatus.filledQuantityhaving    sum(transaction.quantity) = orderStatus.filledQuantity</programlisting>
                </para>
                <programlisting>insert into    OrderStatusselect    status,    filledQuantity,    remainingQuantity,    ord    true as persistentfrom    OrderStatus(status = Status.CANCELED, filledQuantity = 0</programlisting>
            </section>
        </section>
    </chapter>
    <chapter>
        <title>Database</title>
        <para>The database MySql is used by the system.</para>
        <para>The directory <programlisting format="linespecific">algotrader-core/sql</programlisting>
      contains the following a scripts: <itemizedlist>
                <listitem>
                    <para>db-structure.sql (create script for the structure of the
            database)</para>
                </listitem>
                <listitem>
                    <para>db-data.sql (default data for the database)</para>
                </listitem>
                <listitem>
                    <para>db-triggers.sql (create scripts for the triggers)</para>
                </listitem>
                <listitem>
                    <para>db-saldo.sql (create script for the saldo view)</para>
                </listitem>
                <listitem>
                    <para>schema-create.sql (create script generated by
            Hibernate)</para>
                </listitem>
                <listitem>
                    <para>backup.sh (shell script for db backup)</para>
                </listitem>
                <listitem>
                    <para>dump-db.bat (batch script to dump db structure and
            data)</para>
                </listitem>
                <listitem>
                    <para>several analysis sql statements</para>
                </listitem>
            </itemizedlist>
        </para>
        <section>
            <title>Entity Relationship Model</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/File_Schema-base.gif" scalefit="1" width="100%"/>
                </imageobject>
            </mediaobject>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/File_Schema-security.gif" scalefit="1" width="100%"/>
                </imageobject>
            </mediaobject>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/File_Schema-market-data.gif" scalefit="1" width="100%"/>
                </imageobject>
            </mediaobject>
            <para>The Entity Relationship Model of the system is displayed on the
        right. For a description of tables please see <ulink url="UML_Model_and_Code_Generation">UML Model and Code
        Generation</ulink>
            </para>
        </section>
        <section>
            <title>Transaction Handling</title>
            <para>Using AndroMDA and Spring Transaction Boundaries can be declared
        inside the UML model using the tagged value <programlisting format="linespecific">@andromda.spring.transaction.type</programlisting>.
        Transaction Boundaries will be generated into the file <programlisting format="linespecific">applicationContext.xml</programlisting> and
        handled by the <programlisting format="linespecific">org.springframework.transaction.interceptor.TransactionInterceptor</programlisting>.</para>
            <para>for additional info see <ulink url="Hibernate_Transaction_Handling">Hibernate Transaction
        Handling</ulink> and <ulink url="Hibernate_Concurrency_and_Locking">Hibernate Concurrency and
        Locking</ulink>
            </para>
        </section>
    </chapter>
    <chapter>
        <title>Client</title>
        <para>The system does not provide a GUI Frontend. Instead it uses <ulink url="http://docs.oracle.com/javase/tutorial/jmx/index.html"> Java
      Management Extension</ulink> (JMX) and <ulink url="http://docs.oracle.com/javase/7/docs/technotes/tools/share/jconsole.html">
      JConsole</ulink>. Services tagged with <programlisting format="linespecific">@algoTrader.service.manageable</programlisting>
      are automatically exposed through JMX by means of the <programlisting format="linespecific">org.springframework.jmx.export.annotation.AnnotationMBeanExporter</programlisting>.</para>
        <section>
            <title>AlgoTrader Managed Beans</title>
            <para>The following AlgoTader Services are exposed as Managed
        Beans</para>
            <section>
                <title>Management Service</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_ManagementServiceAttributes.gif" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <para>The Management Service is available for every strategy and for
          the Base Trading Framework itself. It provides the Attributes and
          Operations that are not strategy specific:</para>
                <informaltable border="1">
                    <tr>
                        <td>Attribute</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td>CurrentTime</td>
                        <td>Current Local Time</td>
                    </tr>
                    <tr>
                        <td>Balances</td>
                        <td>Balances of each currency, i.e. Cash, Securities and
              NetLiqValue as well as exchangeRate (only available in
              Base)</td>
                    </tr>
                    <tr>
                        <td>Orders</td>
                        <td>currently open orders (might contain AlgoOrders an their
              associated SimpleOrders)</td>
                    </tr>
                    <tr>
                        <td>Positions</td>
                        <td>All Positions of the system / of the strategy</td>
                    </tr>
                    <tr>
                        <td>Ticks</td>
                        <td>Latest ticks off all subscribed securities of the system /
              of the strategy</td>
                    </tr>
                    <tr>
                        <td>Transactions</td>
                        <td>Last 20 Transactions of the system / of the strategy</td>
                    </tr>
                    <tr>
                        <td>Properties</td>
                        <td>All Configuration Values of the system / of the
              strategy</td>
                    </tr>
                    <tr>
                        <td>Allocation</td>
                        <td>Allocation assigned to Base / the strategy</td>
                    </tr>
                    <tr>
                        <td>Available Funds</td>
                        <td>NetLiqValue - InitialMargin</td>
                    </tr>
                    <tr>
                        <td>Cash Balance</td>
                        <td>Amount of Cash available to the system / to the
              strategy</td>
                    </tr>
                    <tr>
                        <td>Leverage</td>
                        <td>
                            <ulink url="Leverage_and_Exposure"> Current Notional
              Exposure delta-adjusted</ulink> of the system / of the
              strategy</td>
                    </tr>
                    <tr>
                        <td>Maintenance Margin</td>
                        <td>Maintenance Margin of the system / of the strategy</td>
                    </tr>
                    <tr>
                        <td>Name</td>
                        <td>Name of the strategy or Base</td>
                    </tr>
                    <tr>
                        <td>NetLiqValue</td>
                        <td>Netto Liquidation Value of the system / of the strategy</td>
                    </tr>
                    <tr>
                        <td>Performance</td>
                        <td>strategy performance of the current month</td>
                    </tr>
                    <tr>
                        <td>SecuritiesCurrentValue</td>
                        <td>Current value of all open positions of the system / of the
              strategy</td>
                    </tr>
                </informaltable>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_ManagementServiceOperations.gif" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <para>In addition the Management Service provides the following
          Operations</para>
                <informaltable border="1">
                    <tr>
                        <td>Operation</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td>addProperty</td>
                        <td>add a property to a PropertyHolder</td>
                    </tr>
                    <tr>
                        <td>cancelOrder</td>
                        <td>cancel an order (AlgoOrder or SimpleOrder)</td>
                    </tr>
                    <tr>
                        <td>closePosition</td>
                        <td>closes a specified position</td>
                    </tr>
                    <tr>
                        <td>deployModule</td>
                        <td>deploys an entire esper module</td>
                    </tr>
                    <tr>
                        <td>deployStatement</td>
                        <td>deploys an individual statement of an esper module</td>
                    </tr>
                    <tr>
                        <td>modifyOrder</td>
                        <td>modifies an existing order (e.g. quantity, limit, etc.)</td>
                    </tr>
                    <tr>
                        <td>reducePositon</td>
                        <td>reduces a position by a specified amount</td>
                    </tr>
                    <tr>
                        <td>removeComponent</td>
                        <td>removes a component from a combination</td>
                    </tr>
                    <tr>
                        <td>removeProperty</td>
                        <td>removes a property from a PropertyHolder</td>
                    </tr>
                    <tr>
                        <td>sendOrder</td>
                        <td>manually send order of the specified type, either
              SimpleOrder or AlgoOrder (defined by the corresponding
              OrderPreference)</td>
                    </tr>
                    <tr>
                        <td>setComponentQuantity</td>
                        <td>sets the quantity of an individual component on a
              combination</td>
                    </tr>
                    <tr>
                        <td>setExitValue</td>
                        <td>adjust an exitValue of a position</td>
                    </tr>
                    <tr>
                        <td>setVariableValue</td>
                        <td>set the value of an esper variable</td>
                    </tr>
                    <tr>
                        <td>shutdown</td>
                        <td>gracefully shutdown the corresponding JVM Process</td>
                    </tr>
                    <tr>
                        <td>subscribe</td>
                        <td>subscribe to the specified security</td>
                    </tr>
                    <tr>
                        <td>unsubscribe</td>
                        <td>unsubscribe to the specified security</td>
                    </tr>
                </informaltable>
            </section>
            <section>
                <title>Base Management Service</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_BaseManagementServiceOperations.gif" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <para>The Base Management Service is only available when connection
          to the Base Trading Framework.</para>
                <para>The service currently only has the Attributes
          <emphasis>MarketChannels</emphasis> and
          <emphasis>DefaultMarketChannel</emphasis>
                </para>
                <para>The Base Management Service has the following
          operations:</para>
                <informaltable border="1">
                    <tr>
                        <td>Operation</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td>cancelAllOrders</td>
                        <td>cancel all orders that are currently in the market</td>
                    </tr>
                    <tr>
                        <td>emptyOpenOrderWindow</td>
                        <td>should only be called if an order was not accepted by the
              broker but is still contained in the openOrderWindow</td>
                    </tr>
                    <tr>
                        <td>equalizeForex</td>
                        <td>adjusts the current FX Hedge for all non-base
              currencies</td>
                    </tr>
                    <tr>
                        <td>rebalancePortfolio</td>
                        <td>redistribute cash between strategies and Base so that the
              target allocation is met</td>
                    </tr>
                    <tr>
                        <td>recordTransaction</td>
                        <td>manually record a transaction to the database</td>
                    </tr>
                    <tr>
                        <td>resetComponentWindow</td>
                        <td>has to be called if a direct modification of components has
              been made in the database</td>
                    </tr>
                    <tr>
                        <td>resetPositionsAndCashBalances</td>
                        <td>recalculates all Positions and Cash Balances by iterating
              over all Transactions</td>
                    </tr>
                    <tr>
                        <td>setDefaultMarketChannel</td>
                        <td>changes the default market channel</td>
                    </tr>
                    <tr>
                        <td>setMargins</td>
                        <td>calculates current maintenance margin for all open
              positions</td>
                    </tr>
                    <tr>
                        <td>transferPosition</td>
                        <td>transfers a position from one strategy to another by taking
              it's current market value</td>
                    </tr>
                </informaltable>
            </section>
            <section>
                <title>StrategyServices</title>
                <para>Each Strategy can define as many manageable Services as
          needed. To be manageable the class has to have the following tagged
          value:</para>
                <programlisting>@ManagedResource(objectName = "com.algoTrader.strategy.eastWest:name=EastWestManagementService")</programlisting>
                <para>ManagedOperations have to be tagged like this:</para>
                <programlisting>@ManagedOperation(description = "manally send an order (orders on Future-Orders will be sent as MarketOrders and Option-Orders will be sent as SteppingLimitOrders")@ManagedOperationParameters({ @ManagedOperationParameter(name = "securityId", description = "securityId"), @ManagedOperationParameter(name = "quantity", description = "quantity"), @ManagedOperationParameter(name = "side", description = "side: i.e. BUY or SELL"),})</programlisting>
            </section>
        </section>
        <section>
            <title>Monitoring Functionality</title>
            <para>The client will invoke the checkIsAlive method of the
        ManagementService according to the defined interval (i.e. AlgoTrader
        program argument "-interval=10"). If the method does not return within
        the specified interval, a timeout message is displayed and an alarm
        sound is played. This way the person in charge of monitoring the
        System has a way of being notified if the system is down or not
        reachable anymore (e.g. stale JVM).</para>
        </section>
        <section>
            <title>Additional MBeans</title>
            <para>In addition the following system functions can be monitored
        through JMX as well:</para>
            <informaltable border="1">
                <tr>
                    <td>JMX Subsystem</td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td>Hibernate</td>
                    <td>Hibernate Management (i.e. Collection, Entity, Query,
            SecondLevelCache and Session statistics)</td>
                </tr>
                <tr>
                    <td>C3P0</td>
                    <td>DataSource Connection Pool Management</td>
                </tr>
                <tr>
                    <td>EhCache</td>
                    <td>Management of the Second Level Cache EhCache<literallayout>
</literallayout> this service has to be used when values are changed in the
            running system</td>
                </tr>
                <tr>
                    <td>Esper</td>
                    <td>Esper Instance Management (i.e. Esper Runtime, Named Windows
            and Statements)</td>
                </tr>
                <tr>
                    <td>Log4J</td>
                    <td>Management of the Log4J Logging System</td>
                </tr>
            </informaltable>
        </section>
        <section>
            <title>JConsole Modification</title>
            <para>A separate Eclipse Project AlgoTraderClient contains the
        following modifications to JConsole:</para>
            <section>
                <title>TabularData</title>
                <para>TabularData Enhancement to display TabularData using JTable
          instead of the built-in HTML format. The JTable is editable (F2).
          This can be used to copy &amp; paste values (Note: modifications are
          however not stored in the AlgoTrader database)</para>
            </section>
            <section>
                <title>Attributes / Operations Split Pane</title>
                <para>For every MBean Attributes and Operations are visible at the
          same time in a Split Pane.</para>
            </section>
            <section>
                <title>Indicator Tab</title>
                <para>The CustomTab Indicators provides a generic indicator display
          functionality (based on <ulink url="http://www.jfree.org/jfreechart/"> JFreeChart</ulink> and
          <ulink url="http://www.jfree.org/orson/"> Orson</ulink>)</para>
                <para>The following image shows an example of the custom tab:</para>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_Indicators.gif" scalefit="1" width="100%"/>
                    </imageobject>
                </mediaobject>
                <para>Indicators can be configured by means of the following XML
          definition:</para>
                <programlisting>&lt;bean id="managementServiceDiagrams" class="org.springframework.beans.factory.config.ListFactoryBean"&gt;  &lt;property name="sourceList"&gt;    &lt;list&gt;      &lt;bean class="com.algoTrader.vo.DiagramVO" p:label="MACD" p:statementName="KEEP_MACD_VO" p:dateTimeParam="dateTime" p:timePeriod="DAY" p:selected="false"&gt;        &lt;property name="axis"&gt;          &lt;list&gt;            &lt;bean class="com.algoTrader.vo.AxisVO" p:number="0" p:label="Indicators" p:autoRange="true"/&gt;            &lt;bean class="com.algoTrader.vo.AxisVO" p:number="1" p:label="Underlying" p:autoRange="true" p:autoRangeIncludesZero="false"/&gt;          &lt;/list&gt;        &lt;/property&gt;        &lt;property name="parameters"&gt;          &lt;list&gt;            &lt;bean class="com.algoTrader.vo.ParameterVO" p:name="macd" p:label="MACD" p:axis="0" p:color="RED" p:selected="true"/&gt;            &lt;bean class="com.algoTrader.vo.ParameterVO" p:name="signal" p:label="MACD Signal" p:axis="0" p:color="BLUE" p:selected="true"/&gt;            &lt;bean class="com.algoTrader.vo.ParameterVO" p:name="underlaying" p:label="Underlying" p:axis="1" p:color="GRAY" p:selected="true"/&gt;          &lt;/list&gt;        &lt;/property&gt;                         &lt;/bean&gt;                &lt;/list&gt;  &lt;/property&gt;&lt;/bean&gt;</programlisting>
            </section>
            <section>
                <title>Generated documentation</title>
                <para>Supplied documentation to fields, operations and parameters
          will be available in JConsole.</para>
                <para>Example: "set the value of an esper variable" is added as
          documentation in UML to the operation
          setVariableValue<literallayout>
</literallayout>
                    <inlinemediaobject>
                        <imageobject>
                            <imagedata fileref="images/File_UML-Operation-Documentation.gif" scalefit="1" width="100%"/>
                        </imageobject>
                    </inlinemediaobject>
                </para>
                <para>This will result in a mouse-over documentation of the
          corresponding operation in JConsole<literallayout>
</literallayout>
                    <inlinemediaobject>
                        <imageobject>
                            <imagedata fileref="images/File_JConsole-Operation-Documentation.gif" scalefit="1" width="100%"/>
                        </imageobject>
                    </inlinemediaobject>
                </para>
            </section>
            <section>
                <title>Custom JMX Agent</title>
                <para>When starting the system a custom JMX agent can be specified
          through the following VM arguments to enable JMX access through SSH
          (through firewalls):</para>
                <programlisting>Dcom.algoTrarder.rmi.registryPort=1099Dcom.algoTrarder.rmi.serverPort=1098Djava.rmi.server.hostname=127.0.0.1javaagent:lib/agent.jar</programlisting>
                <para>When accessing the system through an ssh-tunnel, the following
          two ports have to be tunneled: 1099 and 1098. When starting JConsole
          connect to localhost:1099</para>
            </section>
            <section>
                <title>Read Only JConsole</title>
                <para>By specifying the following VM Argument JConsole can be
          started in Read Only Mode where all Operations are disabled:</para>
                <programlisting>-DreadOnly=true</programlisting>
            </section>
        </section>
    </chapter>
    <chapter>
        <title>CRUD Application</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/File_CrudApplication.gif" scalefit="1" width="100%"/>
            </imageobject>
        </mediaobject>
        <para>The Project AlgoTraderCrud provides CRUD Operations for AlgoTrader
      entities. CRUD stands for Create, Read, Update &amp; Delete</para>
        <para>The running application will look like this (see screenshot on the
      right)</para>
        <para>Currently CRUD Operations are available for the following
      entities: <itemizedlist>
                <listitem>
                    <para>Strategy</para>
                </listitem>
                <listitem>
                    <para>Security</para>
                </listitem>
                <listitem>
                    <para>Forex</para>
                </listitem>
                <listitem>
                    <para>Future</para>
                </listitem>
                <listitem>
                    <para>StockOption</para>
                </listitem>
                <listitem>
                    <para>IntrestRate</para>
                </listitem>
                <listitem>
                    <para>SecurityFamily</para>
                </listitem>
                <listitem>
                    <para>WatchListItem</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>AlgoTraderCrud is based on the <ulink url="http://grails.org">
      grails</ulink> project, which has a feature called scaffolding, that is
      able to automatically create a CRUD application based on hibernate
      mapping files and Java Domain classes (= AndroMDA Entities).</para>
        <para>Please make sure, that the algotrader-code project is available in
      the local maven repository by issuing the following maven command inside
      algotrader-code:</para>
        <programlisting>mvn install</programlisting>
        <section>
            <title>Run using Maven</title>
            <para>to run the application using maven the following two files have
        to be patched in the local maven repository: <itemizedlist>
                    <listitem>
                        <para>
                            <ulink url="http://algo-trader.googlecode.com/files/grails-gorm-1.3.7.jar">
              grails-gorm-1.3.7.jar</ulink> to <programlisting format="linespecific">user_home\.m2\repository\org\grails\grails-gorm\1.3.7</programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <ulink url="http://algo-trader.googlecode.com/files/grails-web-1.3.7.jar">
              grails-web-1.3.7.jar</ulink> to <programlisting format="linespecific">user_home\.m2\repository\org\grails\grails-web\1.3.7</programlisting>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>To start the AlgoTraderCrud application execute the following
        maven command:</para>
            <programlisting>mvn -Ddisable.auto.recompile=true grails:run-app</programlisting>
            <para>After Tomcat has started up, the AlgoTraderCrud application can
        be accessed at the following URL:</para>
            <programlisting>
                <ulink url="http://localhost:8080/algotrader-crud/">http://localhost:8080/algotrader-crud/</ulink>
            </programlisting>
        </section>
        <section>
            <title>Run Using Grails</title>
            <para>Sometimes using Maven, the application gives problems, so the
        second solution to start the application is using Grails
        directly</para>
            <para>Please install version 1.3.7 from <ulink url="http://grails.org/Download">[1]</ulink>
            </para>
            <para>Set the environment variable GRAILS_HOME to the directory where
        you installed grails. and also add the GRAILS_HOME/bin directory to
        the PATH environment variable.</para>
            <para>In addition the following two files have to be patched in the
        local ivy2 repository: <itemizedlist>
                    <listitem>
                        <para>
                            <ulink url="http://algo-trader.googlecode.com/files/grails-gorm-1.3.7.jar">
              grails-gorm-1.3.7.jar</ulink> to <programlisting format="linespecific">user_home\.ivy2\cache\org.grails\grails-gorm\1.3.7</programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <ulink url="http://algo-trader.googlecode.com/files/grails-web-1.3.7.jar">
              grails-web-1.3.7.jar</ulink> to <programlisting format="linespecific">user_home\.ivy2\cache\org.grails\grails-web\1.3.7</programlisting>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>To start the AlgoTraderCrud application execute the following
        grails command:</para>
            <programlisting>grails -Ddisable.auto.recompile=true run-app</programlisting>
            <para>After Tomcat has started up, the AlgoTraderCrud application can
        be accessed at the following URL:</para>
            <programlisting>
                <ulink url="http://localhost:8080/algotrader-crud/">http://localhost:8080/algotrader-crud/</ulink>
            </programlisting>
        </section>
        <section>
            <title>Additional Hints</title>
            <itemizedlist>
                <listitem>
                    <para>At the moment, this is not a production quality application
            yet.</para>
                </listitem>
                <listitem>
                    <para>If unexpected results show up, it usually helps to delete
            everything in the <programlisting format="linespecific">target</programlisting>
            directory inside the AlgoTraderCrud application before starting
            up.</para>
                </listitem>
                <listitem>
                    <para>Also it might help to do a "mvn install" on all AlgoTrader
            maven projects to make sure, that the latest version exists in the
            local repository</para>
                </listitem>
            </itemizedlist>
        </section>
    </chapter>
    <chapter>
        <title>Installation</title>
        <section>
            <title>Platform requirements</title>
            <para>For development of new Strategies the following Platform
        requirements exist:</para>
            <informaltable border="1">
                <tr>
                    <td>Software</td>
                    <td>URL</td>
                    <td>Tested Version</td>
                </tr>
                <tr>
                    <td>Java JDK</td>
                    <td>
                        <ulink url="http://java.sun.com">http://java.sun.com</ulink>
                    </td>
                    <td>1.7.0</td>
                </tr>
                <tr>
                    <td>Eclipse IDE</td>
                    <td>
                        <ulink url="http://www.eclipse.org">http://www.eclipse.org</ulink>
                    </td>
                    <td>newest</td>
                </tr>
                <tr>
                    <td>Subversive SVN Team Provider</td>
                    <td>
                        <ulink url="http://download.eclipse.org/releases/...">http://download.eclipse.org/releases/...</ulink>
                    </td>
                    <td>newest</td>
                </tr>
                <tr>
                    <td>Subversive SVN Connectors</td>
                    <td>via Eclipse Preferences / Team / SVN / SVN Connector</td>
                    <td>newest</td>
                </tr>
                <tr>
                    <td>SVNKit</td>
                    <td>via Eclipse Preferences / Team / SVN / SVN Connector</td>
                    <td>1.3.7 (do not use 1.7.x)</td>
                </tr>
                <tr>
                    <td>m2e</td>
                    <td>
                        <ulink url="http://download.eclipse.org/releases/...">http://download.eclipse.org/releases/...</ulink>
                    </td>
                    <td>newest</td>
                </tr>
                <tr>
                    <td>m2e connector for build-helper-maven-plugin</td>
                    <td>via Eclipse Preferences / Maven / Discovery</td>
                    <td>newest</td>
                </tr>
                <tr>
                    <td>Eclipse XML Tools</td>
                    <td>
                        <ulink url="http://download.eclipse.org/releases/...">http://download.eclipse.org/releases/...</ulink>
                    </td>
                    <td>newest</td>
                </tr>
                <tr>
                    <td>Eclipse Data Tools</td>
                    <td>
                        <ulink url="http://download.eclipse.org/releases/...">http://download.eclipse.org/releases/...</ulink>
                    </td>
                    <td>newest</td>
                </tr>
                <tr>
                    <td>Hibernate Tools</td>
                    <td>
                        <ulink url="http://download.jboss.org/jbosstools/updates/development/xxx||">http://download.jboss.org/jbosstools/updates/development/xxx||</ulink>
            newest</td>
                </tr>
                <tr>
                    <td>Spring IDE Core</td>
                    <td>
                        <ulink url="http://springide.org/updatesite">http://springide.org/updatesite</ulink>
                    </td>
                    <td>newest</td>
                </tr>
                <tr>
                    <td>Spring IDE Autowire Extension</td>
                    <td>
                        <ulink url="http://springide.org/updatesite">http://springide.org/updatesite</ulink>
                    </td>
                    <td>newest</td>
                </tr>
                <tr>
                    <td>Veloeclipse</td>
                    <td>
                        <ulink url="http://veloeclipse.googlecode.com">http://veloeclipse.googlecode.com</ulink>
                    </td>
                    <td>newest</td>
                </tr>
                <tr>
                    <td>Eclipse CheckStyle</td>
                    <td>
                        <ulink url="http://eclipse-cs.sourceforge.net/">http://eclipse-cs.sourceforge.net/</ulink>
                    </td>
                    <td>newest</td>
                </tr>
                <tr>
                    <td>JadClipse</td>
                    <td>
                        <ulink url="http://jadclipse.sf.net/update">http://jadclipse.sf.net/update</ulink>
                    </td>
                    <td>newest</td>
                </tr>
                <tr>
                    <td>MagicDraw UML</td>
                    <td>
                        <ulink url="http://www.magicdraw.com">http://www.magicdraw.com</ulink>
            (commercial software)</td>
                    <td>16.5</td>
                </tr>
                <tr>
                    <td>MySql Database</td>
                    <td>
                        <ulink url="http://www.mysql.com">http://www.mysql.com</ulink>
                    </td>
                    <td>5.1</td>
                </tr>
                <tr>
                    <td>A database management tool (i.e. TOAD for MySql)</td>
                    <td>
                        <ulink url="http://www.quest.com/toad-for-mysql">http://www.quest.com/toad-for-mysql</ulink>
                    </td>
                    <td>5.0</td>
                </tr>
            </informaltable>
        </section>
        <section>
            <title>Subversion Checkout</title>
            <para>It is recommended to use the Plugin m2e for the initial checkout
        (Import / Maven / Check out Maven Projects from SCM).</para>
            <para>
                <emphasis>Note: AndroMDA does not allow any special characters
        (i.e. spaces or exclamation marks) in the project
        path.</emphasis>
            </para>
            <para>Select
        svn+ssh://repo.linardcapital.com/var/svn/repository/trunk/AlgoTrader.
        This will create the following 3 projects in Eclipse:</para>
            <itemizedlist>
                <listitem>
                    <para>algotrader</para>
                </listitem>
                <listitem>
                    <para>algotrader-common</para>
                </listitem>
                <listitem>
                    <para>algotrader-core</para>
                </listitem>
                <listitem>
                    <para>algotrader-client</para>
                </listitem>
                <listitem>
                    <para>algotrader-crud</para>
                </listitem>
                <listitem>
                    <para>algotrader-mda</para>
                </listitem>
            </itemizedlist>
        </section>
        <section>
            <title>Generate the code</title>
            <para>Right click on the project algotrader-mda / Run As / Maven
        install. This will generate all necessary code into algotrader-core
        and algotrader-common target directory.</para>
        </section>
        <section>
            <title>Compile</title>
            <para>Now refresh all projects. Eclipse will compile all java code
        automatically.</para>
            <para>
                <emphasis>Note:Before this is done, please check the Java Build
        Path of algotrader-code project. There are two sources configured. The
        source folder target/src/main/java might have an Exclude defined
        (Star-Star), which needs to be removed.</emphasis>
            </para>
        </section>
        <section>
            <title>Install MySql</title>
            <para>Install latest <ulink url="http://www.mysql.com/downloads/mysql/"> MySql Community
        Server</ulink>
                <itemizedlist>
                    <listitem>
                        <para>use password: password for the root user</para>
                    </listitem>
                    <listitem>
                        <para>run the create-script: <programlisting format="linespecific">algotrader-core/sql/algotrader.sql</programlisting>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Start a Demo Strategy</title>
            <para>Before running a strategy check the database table strategy.
        Only the records "BASE" and the record corresponding to strategy
        should be set to AUTO_ACTIVATE</para>
            <section>
                <title>Periodic Example Strategy</title>
                <para>The purpose of this strategy is to demonstrate AlgoTrader in
          Live Trading mode.</para>
                <para>It currently contains the following examples: <itemizedlist>
                        <listitem>
                            <para>periodic buy/sell trades every 10 seconds</para>
                        </listitem>
                        <listitem>
                            <para>order cancellation if order is not executed within 2
                seconds</para>
                        </listitem>
                        <listitem>
                            <para>order modification every 2 seconds until order is fully
                executed</para>
                        </listitem>
                        <listitem>
                            <para>example Execution Algo SteppingLimitOrder</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>To enable / disable any of these examples uncomment the
          relevant section in: <programlisting format="linespecific">/algotrader-periodic/src/main/java/module-periodic-main.epl</programlisting>
                </para>
                <para>To run any of these examples InteractiveBrokers TWS has to be
          running with the following configuration under API/Settings:
          <itemizedlist>
                        <listitem>
                            <para>Enable ActiveX and Socket Clients</para>
                        </listitem>
                        <listitem>
                            <para>Socket Port: 4001</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>In live trading mode the trading framework and the strategy
          run in separate JVM's and have to be started separately.</para>
                <para>To start the trading framwork, use the provided eclipse lunch
          configuration: <programlisting format="linespecific">/algotrader-core/bin/MarketDataStarter.launch</programlisting>
                </para>
                <para>To start the periodic example strategy, use the provided
          eclipse lunch configuration: <programlisting format="linespecific">/algotrader-periodic/bin/PeriodicStarter.launch</programlisting>
                </para>
            </section>
        </section>
    </chapter>
    <chapter>
        <title>Strategy Development</title>
        <para>The following paragraph will give a short example based on a
      simple moving average strategy (with the Short Name MOV).</para>
        <para>After backtesting, newly developed strategies can be tested in a
      live environment using Paper Trading Accounts. At the end of a thorough
      test procedure, the new strategy can be put into production. The
      following diagram shows the general procedure for developing new
      strategies:</para>
        <para>
            <inlinemediaobject>
                <imageobject>
                    <imagedata fileref="images/File_Strategy_Development_Process.gif" scalefit="1" width="100%"/>
                </imageobject>
            </inlinemediaobject>
        </para>
        <para>A strategy is based on the following minimum artifacts:</para>
        <informaltable border="1">
            <tr>
                <td>Artifact</td>
                <td>Description</td>
            </tr>
            <tr>
                <td>/src/main/java/com/algoTrader/strategy/MovServiceImpl.java</td>
                <td>the strategy service class</td>
            </tr>
            <tr>
                <td>/src/main/resources/module-mov.epl</td>
                <td>Esper Module containing the necessary Esper Statements</td>
            </tr>
            <tr>
                <td>/src/main/resources/conf/conf-mov.properties</td>
                <td>Contains parameters used by the strategy (i.e. Moving average
          durations etc.)</td>
            </tr>
            <tr>
                <td>/src/main/resources/esper-mov.cfg.xml</td>
                <td>Contains event-types, imports, variables and general Esper
          settings</td>
            </tr>
            <tr>
                <td>/src/main/resources/applicationContext-client.xml</td>
                <td>Application Context File for the strategy, mainly containing
          autowire instructions</td>
            </tr>
            <tr>
                <td>/log</td>
                <td>log files</td>
            </tr>
            <tr>
                <td>/lib</td>
                <td>Jar Files not available through maven</td>
            </tr>
            <tr>
                <td>/results/bardata/xxx</td>
                <td>Directory containing Bar Data Files needed for Back Testing</td>
            </tr>
            <tr>
                <td>/results/tickdata/xxx</td>
                <td>Directory containing Tick Data Files needed for Back
          Testing</td>
            </tr>
            <tr>
                <td>DB table strategy</td>
                <td>A record for the strategy</td>
            </tr>
        </informaltable>
        <section>
            <title>MovService.java</title>
            <para>This is the main Java-class containing the Business Logic</para>
            <para>The references to the Services provided by the Base Trading
        Framework will be auto injected on startup by the
        Springframework</para>
            <para>First we need a business method to instruct the base framework
        to open a position:</para>
            <programlisting>public void openPosition(String strategyName, int securityId, BigDecimal currentValue) { Strategy strategy = getLookupService().getStrategyByNameFetched(strategyName); Security security = getLookupService().getSecurity(securityId); int qty = (int) (strategy.getAvailableFundsDouble() / currentValue.doubleValue()); if (qty &lt;= 0) { return; } Order order = new MarketOrderImpl(); order.setSecurity(security); order.setStrategy(strategy); order.setQuantity(qty); order.setSide(Side.BUY); getOrderService().sendOrder(order); // if a position was open (or already existed) set margin and exitValue Position position = getLookupService().getPositionBySecurityAndStrategy(securityId, strategyName); if (position != null &amp;&amp; position.isOpen()) {   getPositionService().setMargin(position.getId());   double exitValue = initialStopLoss * currentValue.doubleValue();   getPositionService().setExitValue(position.getId(), exitValue, true); }}</programlisting>
            <para>The method contains the following steps: <orderedlist numeration="arabic">
                    <listitem>
                        <para>Get a reference to the Strategy Entity by the
              LookpService.</para>
                    </listitem>
                    <listitem>
                        <para>Evaluate the quantity we want to purchase (in this case we
              use all available funds).</para>
                    </listitem>
                    <listitem>
                        <para>Construct an Order Object (simple POJO object) containing
              the name of the strategy, the id of the security, the quantity
              and the transaction type.</para>
                    </listitem>
                    <listitem>
                        <para>The OrderService will then carry out the transaction for
              us.</para>
                    </listitem>
                </orderedlist>
            </para>
        </section>
        <section>
            <title>module-mov-main.epl</title>
            <para>Next thing we have to develop is the Esper module containing our
        statements. The module basically consists of the following three
        statements:</para>
            <programlisting>// Moving Average using Ta-Lib@Name('MOVING_AVERAGE')insert into   Indicatorselect   talib("movingAverage", currentValueDouble, movLengthFast, "Sma") - talib("movingAverage", currentValueDouble, movLengthSlow, "Sma") as valuefrom   Tick(security.isin = underlayingIsin);</programlisting>
            <para>This statement creates a Moving Average Indicator using the
        talib library</para>
            <programlisting>@Name('OPEN_POSITION')@Subscriber(className='com.algoTrader.service.mov.MovServiceImpl$OpenPositionSubscriber')select  engineStrategy.name as strategyName,   indexTick.security.id as underlayingid,  indexTick.currentValue as underlayingSpotfrom   pattern [every (indexTick=Tick(security.isin=underlayingIsin) -&gt; indicator=Indicator)]where   indicator.value &gt; 0and   prior(1, indicator.value) &lt;= 0;</programlisting>
            <para>This statement calls the MovService.openPosition() whenever we
        have a crossover on the indicators. The Tag <programlisting format="linespecific">@Subscriber</programlisting> is used to instruct
        the RuleService to attach the Subscriber to this statement.</para>
        </section>
        <section>
            <title>conf-mov.properties</title>
            <para>Now we need the configuration file, which contains the necessary
        parameters for the strategy:</para>
            <programlisting>underlayingIsin = US38259P5089movLengthFast = 1000movLengthSlow = 2000initialStopLoss = 0.99stopLoss = 0.97</programlisting>
            <para>In our case we use <programlisting format="linespecific">Tick(security.isin = underlayingIsin)</programlisting>
        and the fast/slow lengths to create the two moving average
        lines.</para>
        </section>
        <section>
            <title>esper-mov.cfg.xml</title>
            <para>The esper configuration file consists of the following main
        parts:</para>
            <programlisting>&lt;auto-import import-name="com.algoTrader.util.LookupUtil"/&gt;&lt;auto-import import-name="com.algoTrader.util.RoundUtil"/&gt;&lt;auto-import import-name="com.algoTrader.service.mov.MovUtil"/&gt;&lt;plugin-aggregation-function name="talib" function-class="com.algoTrader.esper.aggregation.GenericTALibFunction"/&gt;                &lt;variable name="engineStrategy" type="com.algoTrader.entity.Strategy"/&gt;&lt;variable name="underlayingIsin" type="String"/&gt;&lt;variable name="movLengthFast" type="int"/&gt;&lt;variable name="movLengthSlow" type="int"/&gt;</programlisting>
            <para>First the two util.LookupUtil class and service.mov.MovUtil are
        configured along with the supporting length variables.</para>
            <para>Note: the actual values for the variables are taken from
        conf-mov.properties.</para>
            <para>The variable engineStrategy gets populated automatically by the
        RuleService and contains a reference to the Strategy-Entity we are
        using.</para>
        </section>
        <section>
            <title>DB table strategy</title>
            <para>For this new Strategy we also need an entry in the DB table
        strategy with the following values:</para>
            <informaltable border="1">
                <tr>
                    <td>NAME</td>
                    <td>FAMILY</td>
                    <td>AUTO_ACTIVATE</td>
                    <td>ALLOCATION</td>
                    <td>MODULES</td>
                </tr>
                <tr>
                    <td>MOV</td>
                    <td>MOV</td>
                    <td>true</td>
                    <td>1.00</td>
                    <td>mov-main</td>
                </tr>
            </informaltable>
            <para>NAME and FAMILY are both set to the name of our strategy.</para>
            <para>AUTO_ACTIVATE means, that the strategy will be automatically run
        in simulation mode. By using this field, you can run several
        strategies in parallel to see how they interact.</para>
            <para>ALLOCATION is the percentage of total assets, that will be
        allocated to this strategy. NOTE: the total of all allocations will
        need to add up to 100%. Example: If only 50% is allocated to our
        Strategy MOV, the reminder of 50% need to be allocated to the "BASE"
        strategy, which represents the trading framework itself.</para>
            <para>NOTE: The same strategy (eclipse project) can be run with
        different parameters (i.e. conf-mov1.properties &amp;
        conf-mov2.properties). In this case NAME will be defined as MOV1 &amp;
        MOV2 and FAMILY will be defined as MOV.</para>
        </section>
    </chapter>
    <chapter>
        <title>Operation Modes</title>
        <section>
            <title>Back Testing / Simulation Mode</title>
            <para>The System can be run in Back Testing / Simulation mode by
        running the class <programlisting format="linespecific">com.algoTrader.starter.SimulationStarter</programlisting>
        inside the core project algotrader-core. In addition the
        strategyproject algotrader-xxx has to be added to the
        classpath.</para>
            <para>If using Eclipse specify the following in the Launch
        Configuration:</para>
            <para>
                <emphasis>Main-Tab:</emphasis>
                <itemizedlist>
                    <listitem>
                        <para>Project: algotrader-core</para>
                    </listitem>
                    <listitem>
                        <para>Main Class: <programlisting format="linespecific">com.algoTrader.starter.SimulationStarter</programlisting>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <emphasis>Arguments-Tab / Programm-Arguments:</emphasis>
                <programlisting>simulateWithCurrentParams</programlisting>
            </para>
            <para>
                <emphasis>Arguments-Tab / VM-Arguments:</emphasis>
                <programlisting>-Dsimulation=true-DdataSource.dataSet=yyy </programlisting>
            </para>
            <para>
                <emphasis>Classpath / User Entries:</emphasis>
                <itemizedlist>
                    <listitem>
                        <para>add project algotrader-xxx (the strategy project)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>In simulation mode the Base Trading Framework as well as all
        strategies marked as autoActivate (in the database table strategy) are
        started inside the same JVM.</para>
            <para>Securities specified within the table watch_list_item are fed to
        the corresponding Esper engine instances. The field persistent has the
        following meaning: <itemizedlist>
                    <listitem>
                        <para>persistent = true: these securities will always be
              delivered to the strategy (i.e. for S&amp;P500)</para>
                    </listitem>
                    <listitem>
                        <para>persistent = false: these are securities requested by a
              strategy for a specific duration of time (i.e. Options on
              S&amp;P500). When restarting the simulation, these have to be
              requested again.</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>The CSV files containing the relevant tickdata has to be placed
        into a subdirectory of <programlisting format="linespecific">/algotrader-core/results/tickdata/</programlisting>.
        This subdirectory has to be specified in the file <programlisting format="linespecific">conf-base.properties</programlisting> or as a VM
        argument as follows:</para>
            <programlisting>dataSource.dataSet = current</programlisting>
            <para>(this will pick CSV files from the directory <programlisting format="linespecific">/algotrader-core/results/tickdata/current</programlisting>
            </para>
            <para>The name of the CSV-File has to be according to the defined isin
        in the table security: i.e. CH0008616382.csv. See <ulink url="Tick_Data_Format">Tick Data Format</ulink>
            </para>
            <para>During simulation all Esper engine instances are set to use
        external timing, meaning that Esper time will advance according to
        supplied market data files. The AdapterCoordinator is responsible to
        create the necessary CurrentTimeEvents and send them to the Esper
        engine instances.</para>
            <para>All orders are carried out in a simulated mode using the actual
        market prices supplied by the tick data. At the end of each
        simulation, performance statistics are displayed:</para>
            <programlisting>execution time (min): 1.38 dataSet: current netLiqValue: 1'152'940.16 month-year:          Mai-10  Jun-10  Jul-10  Aug-10  Sep-10  Okt-10  monthlyPerformance:  -5.40%  -0.30%  -6.77%   1.68%  11.76%  13.09%  n=6 avgM=2.34% stdM=8.42% avgY=28.13% stdY=29.17% sharpRatio=0.959 maxDrawDownM=6.77% bestMonthlyPerformance=13.09% maxDrawDown=24.84% maxDrawDownPeriod=140.00days colmarRatio=1.13</programlisting>
            <para>Before each simulation run, the database is reset to its
        original state. After the simulation the database modifications
        (mainly transactions and positions) are kept, in order to be able to
        perform further DB based analysis.</para>
        </section>
        <section>
            <title>Live Trading Mode</title>
            <para>The live Trading Mode is engaged by setting the following
        parameter inside the file <programlisting format="linespecific">conf-base.properties</programlisting>
        or as a VM argument:</para>
            <programlisting>simulation = false</programlisting>
            <para>In this mode, the system is connected to the broker interface
        specified inside <programlisting format="linespecific">applicationContext-server.xml</programlisting>
        by aliases:</para>
            <programlisting>&lt;alias name="iBOrderService" alias="orderService"/&gt;&lt;alias name="iBMarketDataService" alias="marketDataService"/&gt;</programlisting>
            <para>All Esper engine instances are set to use internal timing.
        Market data received from the broker interface is fed to the Esper
        engine instances in real time. Orders are executed in an automated
        fashion and executions are recorded to the database.</para>
        </section>
    </chapter>
    <chapter>
        <title>Risk Management</title>
        <para>Using the provided functionality of the system, the following risk
      metrics can be enforced by the trading framework: <itemizedlist>
                <listitem>
                    <para>Maximum Margin of the Portfolio</para>
                </listitem>
                <listitem>
                    <para>Trailing Stop-Loss Limit for each Position</para>
                </listitem>
                <listitem>
                    <para>Maximum Redemption Value / Cash-Balance</para>
                </listitem>
                <listitem>
                    <para>Maximum Loss per Position</para>
                </listitem>
                <listitem>
                    <para>Maximum Overnight CVaR</para>
                </listitem>
                <listitem>
                    <para>Maximum Leverage of the Portfolio</para>
                </listitem>
                <listitem>
                    <para>Maximum monthly Draw-Down (after this threshold has been
            reached, the strategy is temporarily paused)</para>
                </listitem>
            </itemizedlist>
        </para>
    </chapter>
    <chapter>
        <title>Forex Handling</title>
        <para>The System provides full Forex Management. FX Rates can be
      retrieved in real-time. All portfolio figures are calculated based on
      up-to-date FX-Rates.</para>
        <section>
            <title>Currency Handling</title>
            <para>In most cases securities are attributed in their currency (as
        defined by SecurityFamily). Their market value is attributed towards
        Securities (e.g. SecuritiesCurrentValue).</para>
            <para>Their are however the following exceptions.</para>
            <section>
                <title>Futures</title>
                <itemizedlist>
                    <listitem>
                        <para>Futures are fully margined, that's why buying a Future
              does not actually influence cash but only the margin
              requirement.</para>
                    </listitem>
                    <listitem>
                        <para>IB displays Future Unrealized P/L under Cash</para>
                    </listitem>
                    <listitem>
                        <para>AlgoTrader however treats Futures as regular Securities
              (i.e. add MarketValue to Securities and deduct TransactionPrice
              from cash)</para>
                    </listitem>
                    <listitem>
                        <para>So to compare AlgoTrader Balances to IB Balances (if there
              are Future Positions), one has to compare the NetLiqValue and
              not Cash / Securities individually</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section>
                <title>Forex</title>
                <itemizedlist>
                    <listitem>
                        <para>Forex (e.g. EUR.USD) consists of the BaseCurrency (e.g.
              EUR) and TransactionCurrency(e.g. USD)</para>
                    </listitem>
                    <listitem>
                        <para>In Balances Forex are attributed towards Cash (and not
              Securities) in the BaseCurrency</para>
                    </listitem>
                    <listitem>
                        <para>The gross value of a transaction is booked in the
              TransactionCurrency, whereas the commission is booked in the
              BaseCurrency. However TWS Trades Window displays commissions in
              Trade Currency, but IB Flex Reports displays commissions
              correctly in the BaseCurrency.</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section>
                <title>ForexFutures</title>
                <itemizedlist>
                    <listitem>
                        <para>Like Forex, ForexFutures (e.g. EUR.USD) consists of the
              BaseCurrency (e.g. EUR) and TransactionCurrency(e.g. USD)</para>
                    </listitem>
                    <listitem>
                        <para>In Balances Forex are attributed towards Securities (and
              not Cash like Forex) in the BaseCurrency</para>
                    </listitem>
                    <listitem>
                        <para>The entire transaction value (price + commission) is
              booked in the TransactionCurrency</para>
                    </listitem>
                    <listitem>
                        <para>IB treats ForexFutures like regular Futures and displays
              their value under Cash in the TransactionCurrency. This way even
              if a Non-Base-Currency Exposure is hedged, the NetLiqValue will
              be none zero</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section>
                <title>Currency Attribution</title>
                <para>The following table describes Currency Attribution of
          Positions. The logic is implemented by
          Position.getAttribution()</para>
                <informaltable border="1">
                    <tr>
                        <td/>
                        <td>General Security</td>
                        <td>Forex</td>
                        <td>ForexFuture</td>
                    </tr>
                    <tr>
                        <td>attributed to</td>
                        <td>Securities</td>
                        <td>Cash</td>
                        <td>Securities</td>
                    </tr>
                    <tr>
                        <td>Currency</td>
                        <td>Currency of Security</td>
                        <td>Portfolio Currency</td>
                        <td>Portfolio Currency</td>
                    </tr>
                    <tr>
                        <td>Amount</td>
                        <td>quantity * contract size * price</td>
                        <td>quantity</td>
                        <td>quantity * contract size</td>
                    </tr>
                </informaltable>
                <para>The following table describes Currency Attribution of
          Transactions. The logic is implemented by
          Transaction.getAttributions()</para>
                <informaltable border="1">
                    <tr>
                        <td/>
                        <td>General Security</td>
                        <td>Forex</td>
                    </tr>
                    <tr>
                        <td>Gross Value</td>
                        <td>Transaction Currency</td>
                        <td>Transaction Currency</td>
                    </tr>
                    <tr>
                        <td>Execution Commission</td>
                        <td>Transaction Currency</td>
                        <td>Portfolio Currency</td>
                    </tr>
                    <tr>
                        <td>Clearing Commission</td>
                        <td>Transaction Currency</td>
                        <td>Transaction Currency</td>
                    </tr>
                </informaltable>
            </section>
        </section>
        <section>
            <title>Forex-Hedging</title>
            <para>In addition, automatic Forex-Hedging is provided by the Service
        <programlisting format="linespecific">com.algoTrader.service.ForexService</programlisting>.
        This service will maintain multiple virtual FX Positions to hedge all
        non base currency balances. For actual Forex-Hedging the following two
        options exist</para>
            <section>
                <title>Virtual FX Positions (IB only)</title>
                <para>InteractiveBrokers offer virtual FX Positions, which are very
          convenient for Hedging purposes. Depending on the current exposure,
          a corresponding virtual FX position is maintained.</para>
            </section>
            <section>
                <title>FX Future</title>
                <para>The second option for FX Heding is by means of FX Futures
          which is a subclass of Future.</para>
                <para>In case of EUR.USD there are three FXFutureFamilies available
          with different contract sizes of 12'500, 62'500 and 125'000 USD.
          Because of this the hedgingFamily has to be defined as a Property on
          the EUR.USD subscription.</para>
                <para>Since FX Futures expire, the Hedging Position has to be rolled
          before Expiration, which is also done automatically</para>
            </section>
        </section>
    </chapter>
    <chapter>
        <title>Option Pricing Engine</title>
        <para>The system provides a sophisticated option pricing engine which is
      developed around the SABR volatility Model.</para>
        <para>Based on historical Volatility at different Moneyness levels (e.g.
      ATM, ATM +10%, ATM +20%, ATM -10% &amp; ATM-20%) or Delta levels (e.g.
      50%, 35%, 75%) volatility parameters are calculated (=calibration) and
      used for option pricing.</para>
        <section>
            <title>SABR Calibration</title>
            <para>The StockOptionService is responsible for SABR calibration. The
        calibration process happens for one specific expiration and takes an
        array of strikes with their corresponding array of volatilities. the
        calibration process returns a SABRSmile ValueObject, which basically
        contains the three parameters rho, volVol and alpha (in addition to
        the time-to-expiration and at-the-money volatility). The actual
        calibration happens through the class SABRCalibration, which uses the
        class SABR, that has been compiled from MatLab and placed into a
        separate Maven Module algoTrader-sabr. The class SABR depends on the
        javabuilder.jar and the [<ulink url="http://www.mathworks.ch/products/compiler/mcr/"> MATLAB Compiler
        Runtime (MCR)</ulink>]</para>
            <para>SABR Calibration can be done either by actual OptionPrices or
        directly by the Implied Volatility. Also there are methods to do a
        SABR Calibration just for one expiration (returning one SABRSmile
        ValueObject) or for an entire Volatility Surface (returning a
        SABRSurface ValueObject which consist of multiple SABRSmile
        ValueObjects)</para>
            <para>The SABR Calibration depends on different ImpliedVolatilties (a
        subclass of Security) being defined in the database. A
        ImpliedVolatility needs to define either a moneyness or a delta (in
        addition to Duration and OptionType).</para>
        </section>
        <section>
            <title>Option Pricing</title>
            <para>Based on the SABR Calibration the actual option pricing takes
        place. This is handled through the class StockOptionUtil with the
        method getImpliedVolatilitySABR. this method takes SABRSurface
        parameter. The actual option pricing happens in two steps:</para>
            <orderedlist numeration="arabic">
                <listitem>
                    <para>For all expirations a volatility is calculated for the
            requested strike</para>
                </listitem>
                <listitem>
                    <para>Using spline interpolation the volatility for the requested
            expiration is calculated</para>
                </listitem>
            </orderedlist>
            <para>
                <emphasis>Note: Using this pricing engine, calculated option
        prices are usually within a range of +/- 1.5% of the actual option
        price for Equity Options and Equity Index Options.</emphasis>
            </para>
        </section>
        <section>
            <title>References</title>
            <itemizedlist>
                <listitem>
                    <para>
                        <ulink url="http://www.lesniewski.us/papers/published/HedgingUnderSABRModel.pdf">
            Hedging under SABR Model, B. Bartlett</ulink> _ Refined risk
            management under the SABR model.</para>
                </listitem>
                <listitem>
                    <para>
                        <ulink url="http://www.riskworx.com/insights/sabr/sabr.html"> A SUMMARY
            OF THE APPROACHES TO THE SABR MODEL FOR EQUITY DERIVATIVE
            SMILES</ulink>
                    </para>
                </listitem>
            </itemizedlist>
        </section>
    </chapter>
    <chapter>
        <title>Automated Parameter Optimization</title>
        <para>The system has a feature that enables to run many simulations in
      parallel. Using cloud based servers thousands of simulation runs can be
      carried out in a matter of a few hours.</para>
        <para>Using Numerical Optimization functions (i.e. Brent &amp; Newton)
      optimal parameter ranges can be determined in an automated
      fashion.</para>
    </chapter>
    <chapter>
        <title>Reconciliation</title>
        <section>
            <title>Partner Systems</title>
            <para>Reconciliation is the automated process to compare the status of
        the system with external partner systems (e.g. executed trades,
        current positions, cash transactions).</para>
            <para>Currently Reconciliation is available for the following
        partners:</para>
            <informaltable border="1">
                <tr>
                    <td>Partner</td>
                    <td>Trades</td>
                    <td>Positions</td>
                    <td>Cash Transactions</td>
                    <td>File Format</td>
                </tr>
                <tr>
                    <td>InteractiveBrokers</td>
                    <td>x</td>
                    <td>x</td>
                    <td>x</td>
                    <td>xml</td>
                </tr>
                <tr>
                    <td>RBS</td>
                    <td>x</td>
                    <td>x</td>
                    <td/>
                    <td>csv</td>
                </tr>
                <tr>
                    <td>Universal</td>
                    <td/>
                    <td>x</td>
                    <td>x</td>
                    <td>proprietary</td>
                </tr>
                <tr>
                    <td>JP Morgan</td>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td>csv</td>
                </tr>
            </informaltable>
            <para>Reconciliation is based on files received via email. For every
        partner a sub class of ReconciliationService has to be created. This
        class has to contain at least the method <programlisting format="linespecific">reconcile</programlisting> which gets the
        fileName of the file received and the actual content of the file as a
        byte array. Depending on the file format used by the partner different
        mechanisms for parsing the files are available:</para>
            <orderedlist numeration="arabic">
                <listitem>
                    <para>xml: Xalan / XPath</para>
                </listitem>
                <listitem>
                    <para>csv: SuperCSV</para>
                </listitem>
            </orderedlist>
        </section>
        <section>
            <title>File Handling</title>
            <para>The actual process of receiving files via email, storing them in
        a directory and passing them along to the ReconcilicationServices is
        implemented through Spring Integration. The entire process is
        configured inside the file applicationContext-server.xml (section
        MAIL) and consists of the following components:</para>
            <itemizedlist>
                <listitem>
                    <para>ImapIdleChannelAdapter: receives email messages in an
            asynchronous fashion via IMAP Idle and sends them to the
            InputChannel</para>
                </listitem>
                <listitem>
                    <para>Dispositions: a Set of Rules (email-from, email-subject) and
            their corresponding ReconciliationService and directory (where the
            files should be stored)</para>
                </listitem>
                <listitem>
                    <para>InputChannel: a DirectChannel for received email
            messages</para>
                </listitem>
                <listitem>
                    <para>InputChain: a HandlerChain invoking the following components
            sequentially and sending the final messages to the OutputChannel
            <itemizedlist>
                            <listitem>
                                <para>EmailDispatcher: adds directory and
                  reconciliationService header based on defined
                  Dispositions</para>
                            </listitem>
                            <listitem>
                                <para>Filter: will only process email messages that contain
                  above assigned directory header</para>
                            </listitem>
                            <listitem>
                                <para>EmailTransfomer: Parses the email message and converts
                  contained attachment into a List of EmailFragments</para>
                            </listitem>
                            <listitem>
                                <para>EmailSplitter: Splits messages with List of
                  EmailFragments into individual EmailFragment messages</para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
                <listitem>
                    <para>OutputChannel: a Publish-Subscribe-Channel for EmailFragment
            messages</para>
                </listitem>
                <listitem>
                    <para>FileOutputChannelAdapter: saves the actual file content of
            EmailFragments into the assigned directory</para>
                </listitem>
                <listitem>
                    <para>ServiceActivator: invokes the assigned ReconcilationService
            with the actual file content</para>
                </listitem>
            </itemizedlist>
        </section>
    </chapter>
    <chapter>
        <title>Broker Interfaces</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/File_IBAsyncServices.png" scalefit="1" width="100%"/>
            </imageobject>
        </mediaobject>
        <para>The System provides generic interface functions to connect
      AlgoTrader to different broker systems.</para>
        <para>The following two broker specific interfaces are currently
      available: <itemizedlist>
                <listitem>
                    <para>InteractiveBrokers via Native &amp; Fix API</para>
                </listitem>
                <listitem>
                    <para>InteractiveBrokers via Fix</para>
                </listitem>
                <listitem>
                    <para>JP Morgan via Fix</para>
                </listitem>
                <listitem>
                    <para>DukasCopy via Fix</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>AlgoTrader uses [<ulink url="http://www.quickfixj.org/">
      QuickFix/J</ulink>] for all fix interfaces.</para>
        <para>The generic broker interface consists of the two abstract services
      ExternalOrderService and MarketDataService. Every broker specific
      implementation has to be subclass these services e.g.
      IBNativeOrderService or FixOrderService (with corresponding subclasses
      like Fix42OrderService or IBFixOrderService). See diagram on the
      right</para>
        <section>
            <title>Orders &amp; Fills</title>
            <para>The UML Activity Diagram on the right explains a typical
        order/execution process.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/File_Order-Execution-Process.gif" scalefit="1" width="100%"/>
                </imageobject>
            </mediaobject>
            <para>Also you can find a class diagram of all currently implemented
        Order Services on the right.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/File_OrderServices.gif" scalefit="1" width="100%"/>
                </imageobject>
            </mediaobject>
            <section>
                <title>Place Order</title>
                <para>Before sending an Order, it is advised to call the validate
          method on the order. This will validate the order regarding limits,
          amount, quantity, etc. In case validation fails, the order can be
          modified. Note: the validate method will be called (again) inside
          the sendOrder method, in case the validation fails, this time an
          Exception will be thrown.</para>
                <para>The method sendOrder of the OrderService is responsible to
          place Orders. This method takes an Order object as parameter. If the
          second parameter named suggest is set to true, there will not be an
          actual Order going to the Broker but instead an Email with a Order
          Suggestion is sent to the registered Email addresses.</para>
                <para>The sendOrder method is responsible to invoke the broker
          specific method sendOrder of the ExternalOrderService. The method
          sendOrder is contained within the generic ExternalOrderService,
          where it is marked abstract, so it will have to be implemented by
          every broker specific subclass.</para>
                <para>The broker specific ExternalOrderService will assign an intId
          (i.e. orderNumber), create and place the broker specific
          Order.</para>
                <para>After sending the Order to the broker, the order object is
          propagated (by the EsperManager) to the BASE Esper service instance
          (running inside the Trading Framework) as well as to the Esper
          service instance of the corresponding strategy (where potential
          actions like <emphasis>cancel order</emphasis> or <emphasis>modify
          order</emphasis> can be executed).</para>
                <para>In addition Open Orders are stored in the OpenOrderWindow
          until there full execution or cancellation.</para>
            </section>
            <section>
                <title>Receive Fills</title>
                <para>Whenever order status events and fills are received back from
          the broker, OrderStatus and Fill objects / events are created and
          propagated to the BASE Esper service Instance.</para>
                <para>The Fill events trigger the createTransaction method of the
          TransactionService which will create a Transaction object (a
          persistent Record in the database) based on the Fill. In addition
          the Fill and corresponding Transactions are also propagated to the
          strategy, where actions can be taken upon.</para>
                <para>
                    <emphasis>Note: Fills and Transactions are separated from each
          other for the following reason. A Fill contains all the information
          received from the broker (and a reference to the Order). Where as a
          Transaction contains all the information related to accounting (i.e.
          references to position and strategy). In addition to Transactions
          related to Fills, there are Transactions, that are independent of
          Fills (i.e. Deposits, Withdrawls, Interest, etc.).</emphasis>
                </para>
                <para>Like Fills and Transactions the generic OrderStatus will also
          be propagated to the corresponding strategy.</para>
                <para>The statement LOG_TRANSACTION_SUMMARY of the module-trades.epl
          is responsible to "collect" all OrderStatus events for an order an
          produce one combined log statement.</para>
                <para>The OpenOrderWindow is updated based on every OrderStatus
          event (e.g. increase filledQuantity &amp; reduce remainingQuantity).
          Once the Order is fully executed, it will be removed from the
          OpenOrderWindow (after a delay of 1 sec).</para>
                <para>If an order does not receive either an Acknowledgment or Fill
          1 sec after sending the Order, an Exception is thrown, as there
          might be a problem with the broker connection.</para>
            </section>
            <section>
                <title>Fix Interface</title>
                <para>AlgoTrader uses [<ulink url="http://www.quickfixj.org/">
          QuickFix/J</ulink>] for it's Fix connections and currently supports
          FIX 4.2 and 4.4. Because FIX message are not compatible between
          different version, the two distinct services Fix42OrderService and
          Fix44OrderService exist. Incoming messages are handled by there
          corresponding Fix42MessageHandler and Fix44MessageHandler, which are
          responsible to create OrderStatus and Fill events.</para>
                <para>The Fix infrastructure consists of the following
          classes:</para>
                <informaltable border="1">
                    <tr>
                        <td>Class</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td>FixClient</td>
                        <td>the main entry point into the Fix environment. It is
              responsible to start up the QuickFix/J engine, create dynamic
              sessions, sendMessages and managed OrderIds.</td>
                    </tr>
                    <tr>
                        <td>FixApplication</td>
                        <td>for each session a FixApplication object is created. it will
              forward incoming messages to the corresponding
              MessageHandler</td>
                    </tr>
                    <tr>
                        <td>FixApplicationFactory</td>
                        <td>custom FixApplicationFactory needed to create one
              FixApplication per session</td>
                    </tr>
                    <tr>
                        <td>FixMultiApplicationSessionFactory</td>
                        <td>custom SessionFactory needed to created one FixApplication
              per session</td>
                    </tr>
                    <tr>
                        <td>FixCodeGenerator</td>
                        <td>Used to generate Custom Fix Messages and Fields based on XML
              QuickFix/J definition files.</td>
                    </tr>
                    <tr>
                        <td>FixUtil</td>
                        <td>Contains utility methods for parsing incoming Fix messages
              (e.g. getStatus)</td>
                    </tr>
                </informaltable>
                <para>Note: QuickFix/J currently supports daily sessions (with a
          daily session 7 times a week) and weekly sessions (with one weekly
          session). However some brokers (e.g. JP Morgan) use daily sessions
          but only during workdays. To accomplish this scenario, the FixClient
          allows creation of a weekly logon/logoff event (e.g. Mo 08:00:00 and
          Fr 18:00:00) using two Esper Statements per Fix Session</para>
            </section>
            <section>
                <title>Exchange Simulator</title>
                <para>In Simulation / Backtesting Mode, the system provides an
          Exchange Simulator Functionality, where the OrderService itself
          creates Fills based on the placed Order. In the currently
          implemented simulation mode all placed orders, will get
          filled</para>
            </section>
            <section>
                <title>OrderId Format</title>
                <para>The Order Entity is marked as <emphasis>transient</emphasis>,
          therefore its local id property is always 0. However the order has
          two additional properties intId and extId. intId is the internally
          (by the framework) assigned OrderId whereas extId is the externally
          (by the broker) assigned OrderId.</para>
                <para>In general the intId has the following format:</para>
                <programlisting>&lt;session_qualifier&gt;&lt;id&gt;.&lt;version&gt;</programlisting>
                <itemizedlist>
                    <listitem>
                        <para>session_qualifier: each session (i.e. FIX session) has a
              unique session qualifier</para>
                    </listitem>
                    <listitem>
                        <para>id: an integer which is auto-incremented per session. For
              Fix, the last id is retrieved from the Fix-Log during start
              up</para>
                    </listitem>
                    <listitem>
                        <para>version: The number of modifications that took place on
              the Order, starting with 0 when the order is first
              submitted.</para>
                    </listitem>
                </itemizedlist>
            </section>
        </section>
        <section>
            <title>Market Data</title>
            <para>Market Data exists in three different types: <itemizedlist>
                    <listitem>
                        <para>Bars (OHLC Price Bars, also containing adjusted close and
              volumes)</para>
                    </listitem>
                    <listitem>
                        <para>Ticks (Snapshot of the market at a particular point in
              time, containing information like last price, last time, bid,
              ask, volume, etc.)</para>
                    </listitem>
                    <listitem>
                        <para>PriceEvent (with it's subclasses Trade, Quote, Bid and Ask
              representing a single atomic event in the market)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>As the following diagram shows, Broker Interfaces can provide
        Price Events (Bid, Ask &amp; Trade) or Ticks. In Simulation Ticks or
        Bars can be provided through CSV-Files.</para>
            <para>
                <inlinemediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_MarketDataEvents.gif" scalefit="1" width="100%"/>
                    </imageobject>
                </inlinemediaobject>
            </para>
            <para>Processing of MarketData is handled through the
        MarketDataService, which is marked abstract and will have to be
        subclassed by broker specific implementations (i.e.
        IBMarketDataService).</para>
            <para>The most important methods provided by the MarketDataService are
        subscribe and unsubscribe. Through the use of these methods new
        MarketData can be subscribed and unsubscribed. Subscribed securities
        are persisted within the DB-table subscription. The actual
        subscription of securities to the external broker is done through the
        broker specific MarketDataService.</para>
            <para>Broker Interfaces are responsible to receive Broker specific
        Market Data and send them into the Esper Service Instance Base. The
        Esper Service Instance Base will then convert these Events into
        generic MarketDataEvents (i.e. Ticks or Bars) which will be propagated
        to subscribed Strategies</para>
            <para>
                <inlinemediaobject>
                    <imageobject>
                        <imagedata fileref="images/File_MarketDataPropagation.gif" scalefit="1" width="100%"/>
                    </imageobject>
                </inlinemediaobject>
            </para>
            <section>
                <title>Market Data Gap Checking</title>
                <para>Since a continuous data feed of market data is essential for
          most trading strategies. AlgoTrader contains a feature that
          automatically warns if no market data has been received for a
          prolonged period of time. For this purpose the class SecurityFamily
          has a property maxGap, that defines the maximum number of minutes
          allowed without any market data updates.</para>
            </section>
            <section>
                <title>Creation of Bars based on Ticks</title>
                <para>In both Simulation and Live Trading, Bars can be generated
          from Ticks or Price Events through the use of Esper Statements: use
          the time_batch to create bars:</para>
                <programlisting>select  first(currentValueDouble) as open,  max(currentValueDouble) as high,  min(currentValueDouble) as low,  last(currentValueDouble) as closefrom  OHLCTick.win:time_batch(1 min) group by  security.id;</programlisting>
                <para>and expr_batch for constant volume bars: <programlisting>select  max(currentValueDouble) as high,  min(currentValueDouble) as low,  first(currentValueDouble) as open,  last(currentValueDouble) as closefrom  Tick.win:expr_batch(sum(volume) &gt; 1000)group by  security.id;</programlisting>
                </para>
            </section>
        </section>
        <section>
            <title>Broker specific implementations</title>
            <section>
                <title>IB Native Interface</title>
                <para>The native IB Interface connects to the local TWS or IB
          Gateway instance and uses methods supplied by the IB client. The
          interface is fully capable of handling IB's Financial Advisor
          functionality like Sub Accounts, Account Groups and Allocation
          Profiles.</para>
                <para>Currently the IB interface is the only option for receiving
          incoming Market Data.</para>
            </section>
            <section>
                <title>IB Fix Interface</title>
                <para>The interface is fully capable of handling IB's Financial
          Advisor functionality like Sub Accounts, Account Groups and
          Allocation Profiles.</para>
            </section>
            <section>
                <title>JP Morgan Fix Interface</title>
                <para>as the JP Morgan Fix Implementation is well conformant with
          the Fix Standard no customizations had to be made</para>
            </section>
            <section>
                <title>DukasCopy Fix Interface</title>
                <para>the DukasCopy Fix Implementation does not follow the Fix
          Standard very well, so quite a few customizations had to be made
          including an fully independent MessageHandler (not subclassing any
          of the existing FixMessageHandler classes)</para>
                <itemizedlist>
                    <listitem>
                        <para>usage of StopLimit for Limit orders</para>
                    </listitem>
                    <listitem>
                        <para>usage of Price for Stop orders instead of StopPx</para>
                    </listitem>
                    <listitem>
                        <para>does not support Securitytype</para>
                    </listitem>
                    <listitem>
                        <para>does not use ExecType instead it uses only
              OrdStatus</para>
                    </listitem>
                    <listitem>
                        <para>requires OrderID (tag 37) for order modifications</para>
                    </listitem>
                    <listitem>
                        <para>does not return OrigClOrdID</para>
                    </listitem>
                    <listitem>
                        <para>does not use OrderStatus PARTIALLY_FILLED</para>
                    </listitem>
                    <listitem>
                        <para>does not use LastPx but only AvgPx</para>
                    </listitem>
                </itemizedlist>
            </section>
        </section>
    </chapter>
    <chapter>
        <title>Spring Services</title>
        <para>As mentioned before, AlgoTrader is built on top of Spring, which
      uses BeanFactory and ApplicationContext to locate Spring Beans (=
      AlgoTrader-Services).</para>
        <para>The <ulink url="http://www.springsource.org/">
      SpringSource</ulink> web site provides excellent <ulink url="http://www.springsource.org/documentation"> documentation</ulink>
      such as <ulink url="http://static.springsource.org/spring/docs/3.0.x/reference/html/beans.html">
      'The IoC container'</ulink> to get you started.</para>
        <para>AlgoTrader provides the class <programlisting format="linespecific">com.algoTrader.ServiceLocator</programlisting>
      which will instantiate the adequate BeanFactories &amp;
      ApplicationContexts for a given operational mode depending on the
      specified <programlisting format="linespecific">BEAN_REFERENCE_LOCATION</programlisting>.</para>
        <para>In Simulation mode the Trading-Framework as well as the Strategy
      run inside the same JVM.</para>
        <para>In Live-Trading mode the TradingFramework and the strategy are
      running in different JVM's. Through the use of RmiServiceExporters and
      RmiProxyFactoryBean, Strategies can call Services from the
      TradingFramework. Behind the scenes this is done transparently through
      RMI.</para>
        <para>Please see <ulink url="http://static.springsource.org/spring/docs/3.0.x/reference/html/remoting.html">
      Remoting and web services using Spring</ulink> for further
      details.</para>
        <section>
            <title>BeanRefFactories</title>
            <para>AlgoTrader provides the following beanRefFactory XML-Files,
        which are instantiated by the ServiceLocators:</para>
            <informaltable border="1">
                <tr>
                    <td>BeanRefFactoriy</td>
                    <td>BEAN_REFERENCE_LOCATION</td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td>beanRefFactoryLocal.xml</td>
                    <td>LOCAL_BEAN_REFERENCE_LOCATION</td>
                    <td>used when no remoting or strategy related functionality is
            needed (i.e. HistoricalDataStarter)</td>
                </tr>
                <tr>
                    <td>beanRefFactoryServer.xml</td>
                    <td>SERVER_BEAN_REFERENCE_LOCATION</td>
                    <td>used to export Services through RMI</td>
                </tr>
                <tr>
                    <td>beanRefFactoryClient.xml</td>
                    <td>CLIENT_BEAN_REFERENCE_LOCATION</td>
                    <td>used by the Strategies in Live Trading Mode to connect to Base
            Services through RMI</td>
                </tr>
                <tr>
                    <td>beanRefFactorySimulation</td>
                    <td>SIMULATION_BEAN_REFERENCE_LOCATION</td>
                    <td>used in simulation</td>
                </tr>
            </informaltable>
        </section>
        <section>
            <title>ApplicationContext</title>
            <para>AlgoTrader provides the following ApplicationContext XML-Files
        :</para>
            <informaltable border="1">
                <tr>
                    <td>ApplicationContext</td>
                    <td>Description</td>
                    <td>Generated</td>
                    <td>Examples</td>
                </tr>
                <tr>
                    <td>applicationContext.xml</td>
                    <td>contains all Services and DAO's (generated by AndroMDA)</td>
                    <td>x</td>
                    <td>Services and DAO's</td>
                </tr>
                <tr>
                    <td>applicationContext-export-remoteServices.xml</td>
                    <td>contains all RmiServiceExporters to make Services remotely
            available (generated by AndroMDA)</td>
                    <td>x</td>
                </tr>
                <tr>
                    <td>applicationContext-import-remoteServices.xml</td>
                    <td>contains all RmiProxyFactoryBean to call remote
            TradingFramework Services from the Strategies through RMI
            (generated by AndroMDA)</td>
                    <td>x</td>
                </tr>
                <tr>
                    <td>applicationContext-common.xml</td>
                    <td>contains common Beans</td>
                    <td/>
                    <td>Configuration and JMX Management</td>
                </tr>
                <tr>
                    <td>applicationContext-server.xml</td>
                    <td>contains beans used by the core project</td>
                    <td/>
                    <td>DataSource, Broker Interfaces, JMX Exporters</td>
                </tr>
                <tr>
                    <td>applicationContext-remote.xml</td>
                    <td>contains beans used by strategies when run in remote mode</td>
                    <td/>
                    <td>i.e. Diagrams, JMS</td>
                </tr>
                <tr>
                    <td>applicationContext-client.xml</td>
                    <td>has to be provided by the Strategies</td>
                    <td/>
                    <td>Defined Services, Diagrams, JMS Queues</td>
                </tr>
            </informaltable>
            <para>The following table shows which ApplicationContext is referenced
        by which BeanRefFactory:</para>
            <informaltable border="1">
                <tr>
                    <td>ApplicationContext</td>
                    <td>Local</td>
                    <td>Server</td>
                    <td>Client</td>
                    <td>Simulation</td>
                </tr>
                <tr>
                    <td>applicationContext</td>
                    <td>x</td>
                    <td>x</td>
                    <td/>
                    <td>x</td>
                </tr>
                <tr>
                    <td>applicationContext-export-remoteServices</td>
                    <td/>
                    <td>x</td>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>applicationContext-import-remoteServices</td>
                    <td/>
                    <td/>
                    <td>x</td>
                    <td/>
                </tr>
                <tr>
                    <td>applicationContext-common</td>
                    <td>x</td>
                    <td>x</td>
                    <td>x</td>
                    <td>x</td>
                </tr>
                <tr>
                    <td>applicationContext-server</td>
                    <td>x</td>
                    <td>x</td>
                    <td/>
                    <td>x</td>
                </tr>
                <tr>
                    <td>applicationContext-remote</td>
                    <td/>
                    <td/>
                    <td>x</td>
                    <td/>
                </tr>
                <tr>
                    <td>applicationContext-client</td>
                    <td/>
                    <td/>
                    <td>x</td>
                    <td>x</td>
                </tr>
            </informaltable>
        </section>
        <section>
            <title>Profiles</title>
            <para>In addition to BeanRefFactories which define the different
        operational modes there are Profiles which can be enabled on top for
        different use Cases or left disabled if they are not needed (e.g.
        SecurityRetrieval in Live-Trading-Mode)</para>
            <informaltable border="1">
                <tr>
                    <td/>
                    <td>trading</td>
                    <td>ucitsReconciliation</td>
                    <td>bviReconciliation</td>
                    <td>iBNative</td>
                    <td>jPMFix</td>
                    <td>iBFix</td>
                    <td>securityRetrieval</td>
                    <td>simulation</td>
                    <td>server</td>
                    <td>misc</td>
                </tr>
                <tr>
                    <td>IBAccountService</td>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>IBHistoricalDataService</td>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>IBSecurityRetrievalService</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>IBNativeOrderService</td>
                    <td/>
                    <td/>
                    <td/>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>IBMarketDataService</td>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>IBReconciliationService</td>
                    <td/>
                    <td>x</td>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>IBFixOrderService</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>JPMFixOrderService</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>UIReconciliationService</td>
                    <td/>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>RBSReconcilitationService</td>
                    <td/>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>SimulationService</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td>x</td>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>ResetService</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td>x</td>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>SimMarketDataService</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td>x</td>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>SimAccountService</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td>x</td>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>LazyLoaderService</td>
                    <td/>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td>x</td>
                    <td/>
                </tr>
                <tr>
                    <td>JMS Beans</td>
                    <td/>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td>x</td>
                    <td/>
                </tr>
                <tr>
                    <td>IBclient</td>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>FixClient</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td>x</td>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>MailMessageHandler</td>
                    <td/>
                    <td>x</td>
                    <td>x</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td>TestService</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td>x</td>
                </tr>
                <tr>
                    <td>VerificationService</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td>x</td>
                </tr>
                <tr>
                    <td>ImportService</td>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td/>
                    <td>x</td>
                </tr>
            </informaltable>
            <para>All other services not mentioned above are active in all
        profiles</para>
            <para>To enable a Profile on startup, the following vm argument has to
        be used:</para>
            <programlisting>-Dspring.profiles.active=server,trading,iBNative</programlisting>
        </section>
        <section>
            <title>Abstract Services</title>
            <para>For many use cases abstract services are in place which can be
        extended for different market channels.</para>
            <para>For abstract services where there will only be one concrete
        implementation active (through profiles), and alias can be defined for
        the concrete service (e.g. iBAccountService, iBMarketDataService). At
        runtime this service can now be accessed through its alias (e.g.
        accountService, marketDataService)</para>
            <para>For abstract services where there will potentially be more than
        one concrete implementation active (through profiles), aliases are not
        available. In this case the following method can be used to look up
        all available concrete services that extend the abstract service (see
        OrderService for an example):</para>
            <programlisting>ServiceLocator.instance().getServices(ExternalOrderService.class)</programlisting>
        </section>
    </chapter>
    <chapter>
        <title>Configuration</title>
        <section>
            <title>Configuration Files</title>
            <para>For the Base as well as for each strategy one or multiple
        configuration file exists in the directory
        /src/main/resources/META-INF.</para>
            <para>The Base Trading Framework contains the following two main
        configuration files.</para>
            <para>conf.properties (the main public configuration file). It
        contains settings related to: <itemizedlist>
                    <listitem>
                        <para>Dataset Configuration</para>
                    </listitem>
                    <listitem>
                        <para>Simulation Parameters</para>
                    </listitem>
                    <listitem>
                        <para>Order / Execution Parameters</para>
                    </listitem>
                    <listitem>
                        <para>RMI Remoting</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>conf-core.properties (contains settings that are only used by
        the core project): <itemizedlist>
                    <listitem>
                        <para>DataSource Configuration</para>
                    </listitem>
                    <listitem>
                        <para>Esper Statements</para>
                    </listitem>
                    <listitem>
                        <para>Http Parameters</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>In addition each Broker Interface has it's own settings file.
        e.g. conf-ib.properties for IB.</para>
            <para>Configuration parameters can also be provided as a VM argument
        when starting up the system, they will overwrite existing
        parameters.</para>
            <para>Most configuration parameters are prefixed with a namespace
        (i.e. dataSource, simulation, statement, misc, etc.)</para>
            <para>Settings of the main config file conf.properties can be
        overwritten by any strategy related property file (i.e. order
        parameters). However only these settings can be overwritten. Settings
        defined within a Strategy cannot be overwritten by a Sub-Strategy
        (because the load order of individual strategy jars is arbitrary).
        Therefore if different Sub-Strategy want to define different values to
        the same variable, all Sub-Strategies have to define the setting in
        their .properties file.</para>
        </section>
        <section>
            <title>Esper Variables</title>
            <para>The configuration files are also used to define values for Esper
        variables. Because the Esper Variable system is strong typed,
        variables with their type has to be configured within the
        corresponding Esper configuration files. i.e.</para>
            <programlisting>&lt;variable name="simulation_eventsPerDay" type="long"/&gt;    </programlisting>
            <para>Namespaces have to be specified using an underscore instead of a
        period. i.e. <programlisting format="linespecific">simulation_eventsPerDay</programlisting>
        corresponds to <programlisting format="linespecific">simulation.eventsPerDay</programlisting>
        in the property file. It is not mandatory to specify a namespace
        however. If a namespace is left out, the variable value is searched in
        main config file of the corresponding strategy.</para>
        </section>
        <section>
            <title>Access to Configuration Values</title>
            <para>the following five Spring Services are used to gain access to
        Configuration Values:</para>
            <informaltable border="1">
                <tr>
                    <td>Service</td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td>
                        <programlisting format="linespecific">org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor</programlisting>
                    </td>
                    <td>uses Java Annotations to assign configuration values to
            Service fields</td>
                </tr>
                <tr>
                    <td>
                        <programlisting format="linespecific">com.algoTrader.util.spring.SystemPropertiesFactoryBean</programlisting>
                    </td>
                    <td>loads configuration values from the conf.properties files</td>
                </tr>
                <tr>
                    <td>
                        <programlisting format="linespecific">org.springframework.beans.factory.config.PropertyPlaceholderConfigurer</programlisting>
                    </td>
                    <td>overwrites configuration values from values specified as Java
            System Properties (i.e. -DalgoTrader...)</td>
                </tr>
                <tr>
                    <td>
                        <programlisting format="linespecific">com.algoTrader.util.spring.Configuration</programlisting>
                    </td>
                    <td>Service containing commonly used configuration values as well
            as strong typed getters to arbitrary configuration values</td>
                </tr>
                <tr>
                    <td>
                        <programlisting format="linespecific">com.algoTrader.util.spring.EntityAnnotationSetter</programlisting>
                    </td>
                    <td>uses Java Annotations to assign configuration values to static
            Entity fields</td>
                </tr>
            </informaltable>
            <para>Using <programlisting format="linespecific">AutowiredAnnotationBeanPostProcessor</programlisting>
        and <programlisting format="linespecific">EntityAnnotationSetter</programlisting>
        configuration values can be assigned to Spring Services and Entities
        using the <ulink url="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/expressions.html">
        Spring Expression Language (SpEL)</ulink>. Examples:</para>
            <programlisting>private @Value("${simulation}") boolean simulation;private @Value("${order.initialMarginMarkup}") double initialMarginMarkup;private @Value("#{T(com.algoTrader.enumeration.Currency).fromString('${misc.portfolioBaseCurrency}')}") Currency portfolioBaseCurrency;</programlisting>
        </section>
    </chapter>
    <chapter>
        <title>Remoting</title>
        <section>
            <title>RMI</title>
            <itemizedlist>
                <listitem>
                    <para>Spring Remoting (RMI Registry 1199): RmiServiceExporter
            defined in applicationContext-export-remoteServices.xml</para>
                </listitem>
                <listitem>
                    <para>Esper EE: Plugins BrokerMgmt / EndpointMgmt /
            EsperHQ_Webapp_Service defined in esper-base.cfg.xml</para>
                </listitem>
                <listitem>
                    <para>JMX (RMI Registry 1099) <itemizedlist>
                            <listitem>
                                <para>AlgoTrader: AnnotationMBeanExporter
                  (applicationContext-common.xml)</para>
                            </listitem>
                            <listitem>
                                <para>Hibernate: hibernate.jmx.StatisticsService
                  (applicationContext-server.xml)</para>
                            </listitem>
                            <listitem>
                                <para>EhCache: net.sf.ehcache.management.ManagementService
                  (applicationContext-server.xml)</para>
                            </listitem>
                            <listitem>
                                <para>Log4J: Log4JExporter
                  (applicationContext-server.xml)</para>
                            </listitem>
                            <listitem>
                                <para>Esper: EsperJMX (esper-xxx.cfg.xml)</para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
            </itemizedlist>
        </section>
        <section>
            <title>Socket</title>
            <informaltable border="1">
                <tr>
                    <td>Socket</td>
                    <td>Description</td>
                    <td>Ports</td>
                </tr>
                <tr>
                    <td>JMX RMI</td>
                    <td>Java Management</td>
                    <td>1099/1098, 1097/1096, 1095/1094,,,</td>
                </tr>
                <tr>
                    <td>RMI Exporter</td>
                    <td>Remote access to Spring services</td>
                    <td>1199</td>
                </tr>
                <tr>
                    <td>MySql</td>
                    <td>Database connection</td>
                    <td>3306</td>
                </tr>
                <tr>
                    <td>Java Debugging Agent</td>
                    <td>specified as a VM argument (testing only)</td>
                    <td>8000 and up</td>
                </tr>
                <tr>
                    <td>IB Gateway</td>
                    <td>defined by IB Gateway configuration</td>
                    <td>4001</td>
                </tr>
            </informaltable>
        </section>
        <section>
            <title>JMX</title>
            <para>Management is provided through JMX. The JMX connection is
        secured through SSL by using the following vm arguments:</para>
            <programlisting>-Dcom.sun.management.jmxremote.authenticate=false-Dcom.sun.management.jmxremote.ssl=true-Dcom.sun.management.jmxremote.ssl.need.client.auth=true-Dcom.sun.management.jmxremote.registry.ssl=true-Djavax.net.ssl.keyStore=keystore-Djavax.net.ssl.keyStorePassword=...-Djavax.net.ssl.trustStore=truststore-Djavax.net.ssl.trustStorePassword=...</programlisting>
            <para>By default only the RMI Registry Port can be defined through vm
        arguments (com.sun.management.jmxremote.port). The RMI Server Port is
        chosen randomly which is not feasible through firewalls. For this
        reason a Custom JMXAgent is in place, which takes the following two vm
        arguments to define both ports:</para>
            <programlisting>-Dcom.algoTrarder.rmi.registryPort-Dcom.algoTrarder.rmi.serverPort</programlisting>
            <para>In order to use this Custom JMXAgent the following has to be
        specified on the commandline:</para>
            <programlisting>-javaagent:lib/agent.jar</programlisting>
            <para>In addition the following vm argument has to be specified, which
        defines the public external host name</para>
            <programlisting>-Djava.rmi.server.hostname=xxx.linardcapital.com</programlisting>
            <para>
                <emphasis>Note 1: This vm argument will also be used by
        SpringRMI. It is therefore important that the public hostname is
        declarded in the local hosts file!!!</emphasis>
            </para>
            <para>
                <emphasis>Note 2: It is easiest if the same keystore and
        truststore files are used on server and client. </emphasis>
            </para>
            <para>
                <emphasis>Note 3: For the keystore the keystore password has to
        be the same as the key password. </emphasis>
            </para>
            <para>
                <emphasis>Note 4: In addition the truststore should also contain
        the default CA Certs (copied from
        jre/lib/security/cacerts).</emphasis>
            </para>
        </section>
    </chapter>
    <chapter>
        <title>Threading and Concurrency</title>
        <para>AlgoTrader is designed for a multi-threaded, highly-concurrent
      environment through the use of Esper Threading.</para>
        <section>
            <title>Esper Threading</title>
            <para>Esper has several options for enabling a multi-threaded
        environment, see <ulink url="http://esper.codehaus.org/esper-4.9.0/doc/reference/en-US/html_single/index.html#api-threading">[2]</ulink>
            </para>
            <para>In Live-Trading Mode AlgoTrader uses outbound threading with 3
        threads by default. This means that all Subscriber / Listener Tasks
        are handled by a thread-pool of 3 threads. Subscribers / Listeners
        working in parallel is generally not a problem as long as they do not
        modify the same Entity at the same time. However if two Subscribers /
        Listeners modify the same Entity (e.g. a Position) at the same time,
        this could lead to an inconsistent state in the database.</para>
            <para>For this purpose AlgoTrader uses general database isolation
        levels as well as Hibernate's optimistic an pessimistic
        locking.</para>
            <para>For debugging reasons AlgoTrader logs the name of the thread
        using log4j, see <ulink url="Logging">Logging</ulink>
            </para>
        </section>
        <section>
            <title>Database Isolation Level</title>
            <para>Mysql operates at Repeatable read isolation level (only Phantom
        reads are possible)</para>
        </section>
        <section>
            <title>Hibernate Locking</title>
            <para>Per default no concurrency control is enabled. If two session
        operate on the same entity at the same time, that last update wins and
        the first update is lost.</para>
            <section>
                <title>Optimistic Locking</title>
                <para>This option is best for situations where concurrent
          modifications happen rarely, but one wishes to be notified in case
          two session operate on the same entity at the same time. In this
          case the first update wins and the second update throws an
          exception.</para>
                <para>Hibernate uses versions for this purpose. To enable add the
          following to the class-mapping: <programlisting>&lt;version name="version"/&gt;</programlisting>
                </para>
                <para>The tagged value andromda_hibernate_version can be used in the
          UML model to enable versioning for an Entity.</para>
                <para>Optimistic Locking is only necessary for tables that are
          actually updated. Currently the following tables are using
          optimistic locking: <itemizedlist>
                        <listitem>
                            <para>CashBalance</para>
                        </listitem>
                        <listitem>
                            <para>PropertyHolder (primariliy used by Position, but for
                union-subclasses, version can only be set on the top-level
                class</para>
                        </listitem>
                        <listitem>
                            <para>Property</para>
                        </listitem>
                        <listitem>
                            <para>Component</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </section>
            <section>
                <title>Pessimistic Locking</title>
                <para>This option is best for situations where concurrent
          modifications are expected and unacceptable (e.g. modifications to
          positions/cashBalances).</para>
                <para>For this purpose Hibernate uses database locks. To request a
          lock do one of the following: <programlisting>session.createQuery(sql).setLockOptions(LockOptions.UPGRADE)session.get(class, id, LockMode.PESSIMISTIC_WRITE)session.refresh(class, id, LockMode.PESSIMISTIC_WRITE)session.buildLockRequest(LockOptions.NONE).lock(entity)</programlisting>
                </para>
                <para>This will execute a <programlisting>SELECT ... FOR UPDATE</programlisting>
                </para>
                <para>AlgoTrader provides the tagged value <programlisting format="linespecific">algotrader_finder_method_lock</programlisting>
          which will use QueryLocking:</para>
                <programlisting>queryObject.setLockOptions(LockOptions.UPGRADE);</programlisting>
                <para>The records that are selected are locked on the database
          level. Unlocked selects are still possible, but the following are
          blocked until the locking session is committed / rolled-back:
          <itemizedlist>
                        <listitem>
                            <para>commit in another session</para>
                        </listitem>
                        <listitem>
                            <para>lock request in another session</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>
                    <emphasis>Note: session.buildLockRequest might through a
          StaleObjectException if the other session holding the lock actually
          modified the object in the meantime. If the exception is thrown, the
          session has to be aborted because recovery of the Exception is not
          possible</emphasis>
                </para>
                <section>
                    <title>Transactions</title>
                    <para>
                        <itemizedlist>
                            <listitem>
                                <para>in order for locks to work, there needs to be a
                  transaction</para>
                            </listitem>
                            <listitem>
                                <para>to find out if there is a transaction call:</para>
                            </listitem>
                        </itemizedlist>
                        <programlisting>getSessionFactory().getCurrentSession().getTransaction().isActive()</programlisting>
                        <itemizedlist>
                            <listitem>
                                <para>for more Info on Transaction see <ulink url="Hibernate_Transaction_Handling">Hibernate Transaction
                  Handling</ulink>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </section>
                <section>
                    <title>Query Locking</title>
                    <para>
                        <itemizedlist>
                            <listitem>
                                <para>locking on a query only works if there are no
                  cross-joins generated</para>
                            </listitem>
                            <listitem>
                                <para>The following HQL will create a cross join:</para>
                            </listitem>
                        </itemizedlist>
                        <programlisting>from PositionImpl as p where and p.strategy.name = 'BASE'</programlisting>
                        <itemizedlist>
                            <listitem>
                                <para>If it is rewritten as follows, there will not be a
                  cross join in the generated SQL:</para>
                            </listitem>
                        </itemizedlist>
                        <programlisting>from PositionImpl as p join p.strategy as s where and s.name = 'BASE'</programlisting>
                        <itemizedlist>
                            <listitem>
                                <para>It is a good idea to test generated SQL statements in
                  an SQL client for locking issues</para>
                            </listitem>
                            <listitem>
                                <para>locked queries should not be cached, because if they
                  are, the second query would not go to the database and
                  therefore would not be locked</para>
                            </listitem>
                            <listitem>
                                <para>If a query is unmatched (e.g. from PositionImpl where
                  id = 10 and the id does not exist), Hibernate locks the
                  entire table! To prevent this either use transaction
                  isolation level READ COMMITTED or set the
                  innodb_locks_unsafe_for_binlog</para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </section>
            </section>
        </section>
    </chapter>
    <chapter>
        <title>Security</title>
        <para>At the current stage the system is a NON secure application. It
      does not provide authentication or authorization services of any kind.
      All passwords are stored in plain-text.</para>
        <para>It is therefore necesary that the system is run in a secure
      environment and not being accessible from the outside world. For remote
      access to the system (i.e. JMX) it is recommended to use an SSH
      tunnel.</para>
        <para>Through extensive use of Logging a very detailed Audit Trail is
      enabled. See <ulink url="Logging">Logging</ulink>
        </para>
    </chapter>
    <chapter>
        <title>Metrics</title>
        <para>In Simulation Mode the performance objective of the system is
      high-throughput, whereas in Live Trading Mode the objective is low
      latency. To pinpoint potential performance bottlenecks, AlgoTrader has a
      built in metrics functionality.</para>
        <section>
            <title>Configuration</title>
            <para>To enable this feature: <itemizedlist>
                    <listitem>
                        <para>in conf.properties set <programlisting format="linespecific">misc.metricsEnabled</programlisting> to
              true</para>
                    </listitem>
                    <listitem>
                        <para>add module <programlisting format="linespecific">metrics</programlisting>
              to all relevant strategy db records</para>
                    </listitem>
                    <listitem>
                        <para>inside esper-common.cfg.xml, uncomment the following
              sections:</para>
                    </listitem>
                </itemizedlist>
                <programlisting>&lt;event-type name="StatementMetric" class="com.algoTrader.vo.StatementMetricVO"/&gt;    &lt;metrics-reporting enabled="true" engine-interval="-1" statement-interval="86400000" /&gt; // in simulation&lt;metrics-reporting enabled="true" engine-interval="-1" statement-interval="10000" /&gt; // in live trading</programlisting>
            </para>
            <para>The class <programlisting format="linespecific">com.algoTrader.util.metric.MetricsUtil</programlisting>
        provides several methods for recording execution time of critical code
        (i.e. account and accountEnd).</para>
        </section>
        <section>
            <title>Metrics Reporting</title>
            <para>AlgoTrader Metrics Reporting loges a detailed summary of all
        metrics as well as statement time consumption to the console.
        Displayed values are Execution time (in nano seconds) and Execution
        Count.</para>
            <para>Metrics Reporting is invoked by one of the following two
        methods: <itemizedlist>
                    <listitem>
                        <para>In Live Trading Mode a metrics report can be invoked
              through the BaseManagementService (through this service it is
              also possible to reset metrics)</para>
                    </listitem>
                    <listitem>
                        <para>In Simulation Mode (if metrics are enabled) there will be
              a metrics report at the end of each simulation run</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>A typical display of performance metrics looks like this, where
        ideally the sum of all items on a sub-level should add up to the
        metrics value of the parent-level: <itemizedlist>
                    <listitem>
                        <para>TotalDuration <itemizedlist>
                                <listitem>
                                    <para>CustomSender.readCSV</para>
                                </listitem>
                                <listitem>
                                    <para>CustomSender.completeRaw <itemizedlist>
                                            <listitem>
                                                <para>LookupService.getMarketDataEventFromRaw
                          <itemizedlist>
                                                        <listitem>
                                                            <para>MarketDataEventDao.rawToEntity</para>
                                                        </listitem>
                                                        <listitem>
                                                            <para>MarketDataEventDao.getSecurityId</para>
                                                        </listitem>
                                                        <listitem>
                                                            <para>MarketDataEventDao.securityLookup</para>
                                                        </listitem>
                                                        <listitem>
                                                            <para>MarketDataEventDao.initialization
                                <itemizedlist>
                                                                    <listitem>
                                                                        <para>Security.positions</para>
                                                                    </listitem>
                                                                    <listitem>
                                                                        <para>Security.subscriptions</para>
                                                                    </listitem>
                                                                    <listitem>
                                                                        <para>Security.underlying</para>
                                                                    </listitem>
                                                                    <listitem>
                                                                        <para>Security.securityFamily</para>
                                                                    </listitem>
                                                                </itemizedlist>
                                                            </para>
                                                        </listitem>
                                                    </itemizedlist>
                                                </para>
                                            </listitem>
                                            <listitem>
                                                <para>Session initialization</para>
                                            </listitem>
                                        </itemizedlist>
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>CustomSender.sendCurrentTimeEvent</para>
                                </listitem>
                                <listitem>
                                    <para>CustomSender.sendMarketDataEvent <itemizedlist>
                                            <listitem>
                                                <para>EsperManager.BASE.BarImpl</para>
                                            </listitem>
                                            <listitem>
                                                <para>EsperManager.BASE.CurrentTimeEvent
                          <itemizedlist>
                                                        <listitem>
                                                            <para>BASE.CLOSE_POSITION</para>
                                                        </listitem>
                                                        <listitem>
                                                            <para>BASE.CURRENT_MARKET_DATA_EVENT</para>
                                                        </listitem>
                                                        <listitem>
                                                            <para>BASE.PROPAGATE_MARKET_DATA_EVENTS</para>
                                                        </listitem>
                                                        <listitem>
                                                            <para>BASE.INSERT_INTO_PORTFOLIO_VALUE</para>
                                                        </listitem>
                                                        <listitem>
                                                            <para>BASE...</para>
                                                        </listitem>
                                                        <listitem>
                                                            <para>LogPortfolioValueSubscriber</para>
                                                        </listitem>
                                                        <listitem>
                                                            <para>TradeCallback.BASE</para>
                                                        </listitem>
                                                        <listitem>
                                                            <para>PropagateMarketDataEventSubscriber.update
                                <itemizedlist>
                                                                    <listitem>
                                                                        <para>EsperManager.STRATEGY1.CurrentTimeEvent</para>
                                                                    </listitem>
                                                                    <listitem>
                                                                        <para>EsperManager.STRATEGY1.BarImpl</para>
                                                                    </listitem>
                                                                    <listitem>
                                                                        <para>EsperManager.STRATEGY1.FillImpl</para>
                                                                    </listitem>
                                                                    <listitem>
                                                                        <para>EsperManager.STRATEGY1.TransactionImpl</para>
                                                                    </listitem>
                                                                    <listitem>
                                                                        <para>EsperManager.STRATEGY1.OrderStatusImpl</para>
                                                                    </listitem>
                                                                    <listitem>
                                                                        <para>EsperManager.STRATEGY1.OpenPositionVO</para>
                                                                    </listitem>
                                                                    <listitem>
                                                                        <para>EsperManager.STRATEGY1.ClosePositionVO
                                      <itemizedlist>
                                                                                <listitem>
                                                                                    <para>STRATEGY1.STATEMENT1</para>
                                                                                </listitem>
                                                                                <listitem>
                                                                                    <para>STRATEGY1.STATEMENT2</para>
                                                                                </listitem>
                                                                                <listitem>
                                                                                    <para>STRATEGY1.STATEMENT3</para>
                                                                                </listitem>
                                                                                <listitem>
                                                                                    <para>STRATEGY1...</para>
                                                                                </listitem>
                                                                                <listitem>
                                                                                    <para>Strategy1ServiceSubscriber1</para>
                                                                                </listitem>
                                                                                <listitem>
                                                                                    <para>Strategy1ServiceSubscriber2</para>
                                                                                </listitem>
                                                                                <listitem>
                                                                                    <para>Strategy1ServiceSubscriber3</para>
                                                                                </listitem>
                                                                                <listitem>
                                                                                    <para>Callback1.STRATEGY1</para>
                                                                                </listitem>
                                                                                <listitem>
                                                                                    <para>Callback2.STRATEGY1</para>
                                                                                </listitem>
                                                                            </itemizedlist>
                                                                        </para>
                                                                    </listitem>
                                                                    <listitem>
                                                                        <para>Esper Overhead STRATEGY1</para>
                                                                    </listitem>
                                                                </itemizedlist>
                                                            </para>
                                                        </listitem>
                                                    </itemizedlist>
                                                </para>
                                            </listitem>
                                            <listitem>
                                                <para>Esper Overhead BASE</para>
                                            </listitem>
                                        </itemizedlist>
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>CustomSender.sendCurrentTimeEvent Overhead</para>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <emphasis>Note: Subscriber time consumption is not included in
        statement metrics, whereas static method invocation is included
        </emphasis>
            </para>
        </section>
    </chapter>
    <chapter>
        <title>Market Data Format</title>
        <para>The first line within the file is the header row.</para>
        <para>The name of the CSV-File has to be according to the defined isin
      in the table security: <programlisting format="linespecific">CH0008616382.csv</programlisting>
        </para>
        <para>If external provided Tickdata uses other time formats (i.e.
      DDMMYYY-hhmmss), these should be converted to milliseconds before using
      with AlgoTrader.</para>
        <para>The following Excel Add-In is provided to convert Excel-Date to
      milliseconds (and vice versa): <ulink url="Media:Functions.xla">Media:Functions.xla</ulink>
        </para>
        <section>
            <title>Tick Data Files</title>
            <para>The Format of the Tick Data Files is based on a standard CSV
        Structure: <itemizedlist>
                    <listitem>
                        <para>dateTime</para>
                    </listitem>
                    <listitem>
                        <para>last</para>
                    </listitem>
                    <listitem>
                        <para>lastDateTime</para>
                    </listitem>
                    <listitem>
                        <para>volBid</para>
                    </listitem>
                    <listitem>
                        <para>volAsk</para>
                    </listitem>
                    <listitem>
                        <para>bid</para>
                    </listitem>
                    <listitem>
                        <para>ask</para>
                    </listitem>
                    <listitem>
                        <para>vol</para>
                    </listitem>
                    <listitem>
                        <para>openIntrest</para>
                    </listitem>
                    <listitem>
                        <para>settlement</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>DateTime and LastDateTime are of type long and represent
        milliseconds since 1970.</para>
            <para>Example:</para>
            <informaltable border="1">
                <tr>
                    <td>dateTime</td>
                    <td>last</td>
                    <td>lastDateTime</td>
                    <td>volBid</td>
                    <td>volAsk</td>
                    <td>bid</td>
                    <td>ask</td>
                    <td>vol</td>
                    <td>openIntrest</td>
                    <td>settlement</td>
                </tr>
                <tr>
                    <td>1299493621002</td>
                    <td>188</td>
                    <td>1299491709000</td>
                    <td>47</td>
                    <td>52</td>
                    <td>178.1</td>
                    <td>183.2</td>
                    <td>20</td>
                    <td>868</td>
                    <td>187</td>
                </tr>
                <tr>
                    <td>1299493680524</td>
                    <td>188</td>
                    <td>1299491709000</td>
                    <td>47</td>
                    <td>52</td>
                    <td>177.2</td>
                    <td>182.9</td>
                    <td>20</td>
                    <td>868</td>
                    <td>187</td>
                </tr>
            </informaltable>
        </section>
        <section>
            <title>Bar Data Files</title>
            <para>The Format of the Bar Data Files is based on a standard CSV
        Structure: <itemizedlist>
                    <listitem>
                        <para>dateTime</para>
                    </listitem>
                    <listitem>
                        <para>open</para>
                    </listitem>
                    <listitem>
                        <para>high</para>
                    </listitem>
                    <listitem>
                        <para>low</para>
                    </listitem>
                    <listitem>
                        <para>close</para>
                    </listitem>
                    <listitem>
                        <para>vol</para>
                    </listitem>
                    <listitem>
                        <para>openIntrest</para>
                    </listitem>
                    <listitem>
                        <para>settlement</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>DateTime is of type long and represent milliseconds since
        1970.</para>
            <para>Example:</para>
            <informaltable border="1">
                <tr>
                    <td>dateTime</td>
                    <td>open</td>
                    <td>high</td>
                    <td>low</td>
                    <td>close</td>
                    <td>vol</td>
                    <td>openIntrest</td>
                    <td>settlement</td>
                </tr>
                <tr>
                    <td>1299493621002</td>
                    <td>1.29366</td>
                    <td>1.29369</td>
                    <td>1.29360</td>
                    <td>1.29369</td>
                    <td>2000</td>
                    <td>12000</td>
                    <td>1.29360</td>
                </tr>
                <tr>
                    <td>1299493680524</td>
                    <td>1.29367</td>
                    <td>1.29389</td>
                    <td>1.29367</td>
                    <td>1.29378</td>
                    <td>2500</td>
                    <td>12500</td>
                    <td>1.29378</td>
                </tr>
            </informaltable>
        </section>
    </chapter>
    <chapter>
        <title>Logging</title>
        <para>Logging is done using the <ulink url="http://logging.apache.org/log4j"> log4j</ulink> framework. The
      Logging system is configured by means of log4j.xml and log4j-prod.xml
      (for productive use) files, which contain the following
      Appenders:</para>
        <section>
            <title>log4j.xml</title>
            <informaltable border="1">
                <tr>
                    <td>Appender</td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td>STDOUT</td>
                    <td>Logs to Standard Out</td>
                </tr>
                <tr>
                    <td>STDERR</td>
                    <td>Logs to Standard Error</td>
                </tr>
                <tr>
                    <td>PORTFOLIO</td>
                    <td>Logs Portfolio Values to the portfolio.csv log file</td>
                </tr>
                <tr>
                    <td>INDICATOR</td>
                    <td>Logs arbitrary values to indicator.csv</td>
                </tr>
                <tr>
                    <td>SOCKET</td>
                    <td>Logs to a Remote Socket Server (used when doing multiple
            simulations in parallel)</td>
                </tr>
            </informaltable>
        </section>
        <section>
            <title>log4j-prod.xml</title>
            <informaltable border="1">
                <tr>
                    <td>Appender</td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td>DEBUG</td>
                    <td>Logs everything to a non-appending file</td>
                </tr>
                <tr>
                    <td>FILE</td>
                    <td>Logs Info and up to a appending file</td>
                </tr>
                <tr>
                    <td>ERROR</td>
                    <td>Sends Email Messages on Errors</td>
                </tr>
                <tr>
                    <td>SMS</td>
                    <td>Sends Text Messages on Errors</td>
                </tr>
                <tr>
                    <td>TRADE</td>
                    <td>Sends Email Messages on executed trades</td>
                </tr>
                <tr>
                    <td>NOTIFICATION</td>
                    <td>Sends arbitrary Email Notifications</td>
                </tr>
            </informaltable>
            <para>
                <emphasis>Notes:</emphasis>
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis> Problems with the Email or SMS Appender go to
              System.err (on server see nohup.log)</emphasis>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis> log4j-prod.xml defines AsyncAppenders for
              appenders that send Emails/SMS to make sure that calling code is
              not blocked by the send operation</emphasis>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis> To prevent saturation of the logs several
              loggers have been defined with a logging level higher than the
              root log level</emphasis>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis> The log level can be changed through the
              following vm-argument: </emphasis>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    </chapter>
    <index/>
</book>
