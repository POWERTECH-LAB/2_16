module base;

@Name('RETRIEVE_MINUTE_TICKS')
@Tag(name='subscriber', value='com.algoTrader.service.MarketDataServiceImpl$RetrieveTickSubscriber')
@Tag(name='runTimeOnly', value='true')
select
    security.id
from
    pattern[every timer:at (*, 7:21, *, *, 1:5)],
    method:LookupUtil.getSecuritiesOnWatchlistByPeriodicity('MINUTE') as security
where
    simulation = false;

@Name('RETRIEVE_HOUR_TICKS')
@Tag(name='subscriber', value='com.algoTrader.service.MarketDataServiceImpl$RetrieveTickSubscriber')
@Tag(name='runTimeOnly', value='true')
select
    security.id
from
    pattern[every timer:at (0, 7:21, *, *, 1:5)],
    method:LookupUtil.getSecuritiesOnWatchlistByPeriodicity('HOUR') as security
where
    simulation = false;

@Name('SET_MARGINS')
@Tag(name='listeners', value='com.algoTrader.service.PositionServiceImpl$SetMarginsListener')
select
    *
from
    pattern[every timer:at (0, 7, *, *, 1:5)];

@Name('EXPIRE_POSITION')
@Tag(name='listeners', value='com.algoTrader.service.PositionServiceImpl$ExpirePositionListener')
select
    *
from
    pattern[every timer:at (0, 13, *, *, 5)];

@Name('PROCESS_CASH_TRANSACTIONS')
@Tag(name='listeners', value='com.algoTrader.service.AccountServiceImpl$ProcessCashTransactionsListener')
@Tag(name='runTimeOnly', value='true')
select *
from
    pattern[every timer:at (0, 8, *, *, 1:5)]
where
    simulation = false;

@Name('CREATE_PORTFOLIO_VALUE')
@Tag(name='subscriber', value='com.algoTrader.subscriber.PrintPortfolioValueSubscriber')
insert into
    Portfolio
select
    current_timestamp() as timestamp,
    LookupUtil.getPortfolioValue() as value,
    cashTransaction
from
    pattern[every(timer:at (0, 10:18, *, *, 1:5) or cashTransaction=Transaction(type=TransactionType.CREDIT or type=TransactionType.DEBIT or type=TransactionType.INTREST or type=TransactionType.FEES))]
where
    LookupUtil.hasLastTicks();

@Name('CREATE_MONTHLY_PERFORMANCE')
@Tag(name='simulationOnly', value='true')
@Priority(2)
insert into
    MonthlyPerformance
select
    current_timestamp().toDate() as date,
    portfolio.value.netLiqValue / prior(1, portfolio.value.netLiqValue) - 1 as value
from
    pattern[every timer:at (0, 0, 1, *, *) -> portfolio=Portfolio]
having
    prior(1, portfolio.value.netLiqValue) != null and
    portfolio.value.netLiqValue != prior(1, portfolio.value.netLiqValue);

@Name('REBALANCE_PORTFOLIO')
@Priority(1)
@Tag(name='listeners', value='com.algoTrader.service.AccountServiceImpl$RebalancePortfolioListener')
select
    *
from
    pattern[every timer:at (0, 18, lastweekday, *, *) -> Portfolio];

@Name('GET_LAST_TICK')
@Priority(6)
select
    tick.security.id as securityId, tick.* as tick
from
    Tick.std:groupwin(security.id).win:time(7 days).win:length(1) as tick;

@Name('CLOSE_POSITION')
@Priority(1)
@Tag(name='subscriber', value='com.algoTrader.service.PositionServiceImpl$ClosePositionSubscriber')
select
    position.id
from
    Tick as tick,
    method:LookupUtil.getPositions(tick.security) as position
where
    position.quantity != 0
    and position.exitValue != null
    and ((position.short and (tick.currentValue >= position.exitValue)) or (position.long and (tick.currentValue <= position.exitValue)));

@Name('CREATE_PERFORMANCE_KEYS')
@Tag(name='simulationOnly', value='true')
insert into
    PerformanceKeys
select
    uni.datapoints as n,
    uni.geomaverage as avgM,
    uni.stddev as stdM,
    Math.pow(1 + uni.geomaverage,12) - 1  as avgY,
    uni.stddev * Math.sqrt(12) as stdY,
    (Math.pow(1 + uni.geomaverage,12) - 1 - marketIntrest) / (uni.stddev * Math.sqrt(12)) as sharpRatio
from
    MonthlyPerformance.win:keepall().stat:uni(value) as uni;

@Name('ALL_TRADES')
@Tag(name='simulationOnly', value='true')
insert into
    AllTrades
select
    count(allTrades) as count,
    sum(allTrades.profit) as totalProfit,
    avg(allTrades.profit) as avgProfit,
    avg(allTrades.profitPct) as avgProfitPct,
    avg(allTrades.avgAge) as avgAge
from
    TradePerformance.win:keepall() as allTrades;

@Name('WINNING_TRADES')
@Tag(name='simulationOnly', value='true')
insert into
    WinningTrades
select
    count(winningTrades) as count,
    sum(winningTrades.profit) as totalProfit,
    avg(winningTrades.profit) as avgProfit,
    avg(winningTrades.profitPct) as avgProfitPct,
    avg(winningTrades.avgAge) as avgAge
from
    TradePerformance(winning = true).win:keepall() as winningTrades;

@Name('LOOSING_TRADES')
@Tag(name='simulationOnly', value='true')
insert into
    LoosingTrades
select
    count(loosingTrades) as count,
    sum(loosingTrades.profit) as totalProfit,
    avg(loosingTrades.profit) as avgProfit,
    avg(loosingTrades.profitPct) as avgProfitPct,
    avg(loosingTrades.avgAge) as avgAge
from
    TradePerformance(winning = false).win:keepall() as loosingTrades;

@Name('KEEP_MONTHLY_PERFORMANCE')
@Tag(name='simulationOnly', value='true')
select
    *
from
    MonthlyPerformance.win:keepall();

@Name('CREATE_DRAW_DOWN')
@Tag(name='simulationOnly', value='true')
insert
    into DrawDown
select
    1 - portfolio.value.netLiqValue / max(portfolio.value.netLiqValue) as amount,
    case
        when portfolio.value.netLiqValue = max(portfolio.value.netLiqValue) then DrawDownUtil.resetDrawDownPeriod()
        else DrawDownUtil.increaseDrawDownPeriod(current_timestamp - prior(1, portfolio.timestamp))
    end as period
from
    Portfolio as portfolio;

@Name('CREATE_MAX_DRAW_DOWN')
@Tag(name='simulationOnly', value='true')
insert into
    MaxDrawDown
select
    max(drawDown.amount) as amount,
    max(drawDown.period) as period
from
    DrawDown as drawDown;
