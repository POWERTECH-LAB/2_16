@Name('INSERT_INTO_MONTHLY_PERFORMANCE')
@SimulationOnly
@Priority(2)
insert into
    MonthlyPerformance
select
    current_timestamp().minus(1 month).toDate() as date,
    portfolio.value.netLiqValue / prior(1, portfolio.value.netLiqValue) - 1 as value
from
    pattern[(every timer:at (0, 0, 1, *, *) or EndOfSimulation) -> portfolio=Portfolio]
having
    prior(1, portfolio.value.netLiqValue) is not null and
    portfolio.value.netLiqValue != prior(1, portfolio.value.netLiqValue);

@Name('INSERT_INTO_PERFORMANCE_KEYS')
@SimulationOnly
insert into
    PerformanceKeys
select
    perf.datapoints as n,
    perf.average as avgM,
    perf.stddev as stdM,
    Math.pow(factor.geomaverage,12) - 1  as avgY,
    perf.stddev * Math.sqrt(12) as stdY,
    (Math.pow(factor.geomaverage,12) - 1 - misc_marketIntrest) / (perf.stddev * Math.sqrt(12)) as sharpRatio
from
    MonthlyPerformance.win:keepall().stat:uni(value) as perf,
    MonthlyPerformance.win:keepall().stat:uni(1 + value) as factor
having
    factor.stddev != Double.NaN
and
    perf.stddev != Double.NaN;

@Name('INSERT_INTO_ALL_TRADES')
@SimulationOnly
insert into
    AllTrades
select
    count(allTrades) as count,
    sum(allTrades.profit) as totalProfit,
    avg(allTrades.profit) as avgProfit,
    avg(allTrades.profitPct) as avgProfitPct,
    avg(allTrades.avgAge) as avgAge
from
    TradePerformance.win:keepall() as allTrades;

@Name('INSERT_INTO_WINNING_TRADES')
@SimulationOnly
insert into
    WinningTrades
select
    count(winningTrades) as count,
    sum(winningTrades.profit) as totalProfit,
    avg(winningTrades.profit) as avgProfit,
    avg(winningTrades.profitPct) as avgProfitPct,
    avg(winningTrades.avgAge) as avgAge
from
    TradePerformance(winning = true).win:keepall() as winningTrades;

@Name('INSERT_INTO_LOOSING_TRADES')
@SimulationOnly
insert into
    LoosingTrades
select
    count(loosingTrades) as count,
    sum(loosingTrades.profit) as totalProfit,
    avg(loosingTrades.profit) as avgProfit,
    avg(loosingTrades.profitPct) as avgProfitPct,
    avg(loosingTrades.avgAge) as avgAge
from
    TradePerformance(winning = false).win:keepall() as loosingTrades;

@Name('KEEP_MONTHLY_PERFORMANCE')
@SimulationOnly
select
    *
from
    MonthlyPerformance.win:keepall();

@Name('INSERT_INTO_DRAW_DOWN')
@SimulationOnly
insert
    into DrawDown
select
    1 - portfolio.value.netLiqValue / max(portfolio.value.netLiqValue) as amount,
    case
        when portfolio.value.netLiqValue = max(portfolio.value.netLiqValue) then DrawDownUtil.resetDrawDownPeriod()
        else DrawDownUtil.increaseDrawDownPeriod(current_timestamp - prior(1, portfolio.timestamp))
    end as period
from
    Portfolio as portfolio;

@Name('INSERT_INTO_MAX_DRAW_DOWN')
@SimulationOnly
insert into
    MaxDrawDown
select
    max(drawDown.amount) as amount,
    max(drawDown.period) as period
from
    DrawDown as drawDown;
