@Name('CREATE_NATURAL_INDEX_TICK')
@Condition(key='statement.loadStockOptionsFromDB')
insert into
    NaturalIndexTick
select
    *
from
    Tick(instanceof(security, com.algoTrader.entity.security.NaturalIndex));

@Name('INSERT_INTO_TICK_OPTIONS_FROM_DB')
@SimulationOnly
@Condition(key='statement.loadStockOptionsFromDB')
@Priority(2)
insert into
    Tick
select
    tick.dateTime as dateTime,
    tick.last as last,
    tick.lastDateTime as lastDateTime,
    tick.vol as vol,
    tick.volBid as volBid,
    tick.volAsk as volAsk,
    case when tick.bid > 0 then tick.bid else 0.01 end as bid,
    tick.ask as ask,
    tick.openIntrest as openIntrest,
    tick.settlement as settlement,
    tick.security as security
from
    NaturalIndexTick as indexTick,
    method:LookupUtil.getSubscribedStockOptions() as stockOption,
    method:LookupUtil.getTickByDateAndSecurityInclSecurityInitialized(indexTick.dateTime, stockOption.id) as tick
where
    stockOption.underlying.id = indexTick.security.id
order by
       tick.security.id;

@Name('INSERT_INTO_TICK_SIMULATED_OPTIONS_BY_IVOL')
@SimulationOnly
@Condition(key='statement.simulateStockOptionsByIVol')
@Priority(2)
insert into
    Tick
select
    current_timestamp.toDate() as dateTime,
    RoundUtil.getBigDecimal(StockOptionUtil.getOptionPrice(option, indexTick.currentValueDouble, StockOptionUtil.getImpliedVolatilitySABR(option, indexTick.currentValueDouble, surface))) as last,
    current_timestamp.toDate() as lastDateTime,
    0 as vol, 0 as volBid, 0 as volAsk, cast(0.0, BigDecimal) as bid, cast(0.0, BigDecimal) as ask, 0 as openIntrest, cast(0.0, BigDecimal) as settlement,
    option as security
from
    Tick(instanceof(security, com.algoTrader.entity.security.Forex)) as fxTick,
    method:LookupUtil.getSABRSurface(fxTick.security.id, current_timestamp.toDate()) as surface,
    method:LookupUtil.getStockOptionsOnWatchlist() as option

@Name('INSERT_INTO_TICK_SIMULATED_FUTURES_BY_UNDERLYING')
@SimulationOnly
@Condition(key='statement.simulateFuturesByUnderlying')
@Priority(2)
insert into
    Tick
select
    current_timestamp.toDate() as dateTime,
    RoundUtil.getBigDecimal(FutureUtil.getFuturePrice(future, indexTick.currentValueDouble)) as last,
    current_timestamp.toDate() as lastDateTime,
    0 as vol, 0 as volBid, 0 as volAsk, cast(0.0, BigDecimal) as bid, cast(0.0, BigDecimal) as ask, 0 as openIntrest, cast(0.0, BigDecimal) as settlement,
    LookupUtil.getSecurityInitialized(future.id) as security
from
    Tick(instanceof(security, com.algoTrader.entity.security.NaturalIndex)) as indexTick,
    method:LookupUtil.getSubscribedFutures() as future
where
    future.underlying.id = indexTick.security.id;

@Name('INSERT_INTO_TICK_SIMULATED_FUTURES_BY_GENERIC_FUTURES')
@SimulationOnly
@Condition(key='statement.simulateFuturesByGenericFutures')
@Priority(2)
insert into
    Tick
select
    current_timestamp.toDate() as dateTime,
    genericFutureTick.last as last,
    current_timestamp.toDate() as lastDateTime,
    0 as vol, 0 as volBid, 0 as volAsk,    cast(0.0, BigDecimal) as bid, cast(0.0, BigDecimal) as ask,    0 as openIntrest, cast(0.0, BigDecimal) as settlement,
    LookupUtil.getSecurityInitialized(future.id) as security
from
    Tick(instanceof(security, com.algoTrader.entity.security.GenericFuture)) as genericFutureTick,
    method:LookupUtil.getSubscribedFutures() as future
where
    future.underlying.id = genericFutureTick.security.underlying.id
and
    future.expiration = cast(genericFutureTick.security.expiration?, java.util.Date);

