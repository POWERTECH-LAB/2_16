@Name('CREATE_FILL')
@RunTimeOnly()
insert into
    Fill
select
    IBUtil.getExecutionDateTime(execDetails) as dateTime,
    IBUtil.getSide(execDetails) as side,
    execDetails.execution.m_shares as quantity,
    RoundUtil.getBigDecimal(execDetails.execution.m_price, genericOrder.security.securityFamily.scale) as price,
    execDetails.execution.m_execId as extId,
    genericOrder as parentOrder
from
    pattern[every genericOrder=GenericOrder
            -> (every execDetails=IBExecDetails(execution.m_orderId = genericOrder.number, not execution.m_execId.startsWith('F-'), not execution.m_execId.startsWith('U+'))
                and not IBOrderStatus(orderId = genericOrder.number, status = 'Filled' or status = 'Cancelled' or status = 'Inactive')
                and not GenericOrder(number = genericOrder.number))];

@Name('CREATE_ORDER_STATUS')
@RunTimeOnly()
insert into
    OrderStatus
select
    IBUtil.getStatus(orderStatus) as status,
    orderStatus.filled as filledQuantity,
    orderStatus.remaining as remainingQuantity,
    genericOrder as parentOrder
from
    pattern[every genericOrder=GenericOrder
            -> (every (orderStatus=IBOrderStatus(orderId = genericOrder.number))
                and not GenericOrder(number = genericOrder.number))]
where
    prior(1, orderStatus) is null
or
    orderStatus.orderId != prior(1, orderStatus.orderId)
or
    orderStatus.status != prior(1, orderStatus.status)
or
    orderStatus.filled != prior(1, orderStatus.filled);
