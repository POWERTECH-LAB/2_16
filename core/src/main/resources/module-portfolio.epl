@Name('SAVE_PORTFOLIO_VALUE')
@Subscriber(className='com.algoTrader.service.AccountService.savePortfolioValues')
@RunTimeOnly()
select
    null
from
    pattern[every timer:at(0, 14:23, *, *, 1:5)]
where
    LookupUtil.hasLastTicks();

@Name('INSERT_INTO_PORTFOLIO_VALUE')
@Subscriber(className='com.algoTrader.esper.subscriber.LogPortfolioValueSubscriber')
@SimulationOnly
insert into
    PortfolioValue
select
    transpose(LookupUtil.getPortfolioValue())
from
    pattern[every (timer:at (0, 23, *, *, 1:5) or EndOfSimulation)]
where
    LookupUtil.hasLastTicks();

@Name('SET_MARGINS')
@Subscriber(className='com.algoTrader.service.PositionService.setMargins')
@Condition(key='statement.setMargins')
select
    null
from
    pattern[every timer:at (0, 7, *, *, 1:5)];

@Name('EXPIRE_POSITION')
@Subscriber(className='com.algoTrader.service.PositionService.expirePositions')
@Condition(key='statement.expirePosition')
select
    null
from
    pattern[every timer:at (0, 13, *, *, *)];

@Name('CLOSE_POSITION')
@Subscriber(className='com.algoTrader.service.PositionService.closePosition')
@Condition(key='statement.closePosition')
@Priority(2)
select
    position.id as positionId,
    false as unsubscribe
from
    Tick as tick,
    method:LookupUtil.getOpenPositions() as position
where
    position.security.id = tick.security.id
and
    position.exitValue is not null
and
    position.direction != Direction.FLAT
and
    ((position.direction = Direction.SHORT and (tick.currentValue >= position.exitValue))
    or
    (position.direction = Direction.LONG and (tick.currentValue <= position.exitValue)))
and
    // there should not be any open trades from this strategy for the same security
    position.security.id not in
        (select
            security.id
        from
            OpenOrderWindow
        where
            strategy.id = position.strategy.id)
and
    // there should not be any open trades at all from this strategy for combination positions
    (not instanceof(position.security, com.algoTrader.entity.security.Combination) or not exists
        (select
            *
        from
            OpenOrderWindow
        where
            strategy.id = position.strategy.id))
group by
    position.id
output
    first every 5 seconds;

@Name('RECONCILE')
@Subscriber(className='com.algoTrader.service.AccountService.reconcile')
@Condition(key='statement.reconcile')
@RunTimeOnly
select
    null
from
    pattern[every timer:at (0, 9, *, *, 1:5)]
where
    simulation = false;

@Name('EQUALIZE_FOREX_PORTFOLIO')
@Subscriber(className='com.algoTrader.service.ForexService.equalizeForex')
@Condition(key='statement.equalizeForex')
select
    null
from
    pattern[every timer:at (0, 10, *, *, 3)];

@Name('REBALANCE_PORTFOLIO')
@Subscriber(className='com.algoTrader.service.AccountService.rebalancePortfolio')
@Condition(key='statement.rebalancePortfolio')
select
    null
from
    pattern[every timer:at (0, 11, *, *, 3)];
