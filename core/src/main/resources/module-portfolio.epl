@Name('CREATE_PORTFOLIO_VALUE')
@Subscriber(className='com.algoTrader.esper.subscriber.PrintPortfolioValueSubscriber')
insert into
    Portfolio
select
    current_timestamp() as timestamp,
    LookupUtil.getPortfolioValue() as value,
    cashTransaction
from
    pattern[
        every(timer:at (0, 10:23, *, *, 1:5)
        or cashTransaction=Transaction(
            type=TransactionType.CREDIT
            or type=TransactionType.DEBIT
            or type=TransactionType.INTREST_PAID
            or type=TransactionType.INTREST_RECEIVED
            or type=TransactionType.FEES
            or type=TransactionType.REFUND)
        or EndOfSimulation)]
where
    LookupUtil.hasLastTicks();

@Name('SET_MARGINS')
@Subscriber(className='com.algoTrader.service.PositionService.setMargins')
@Condition(key='statement.setMargins')
select
    null
from
    pattern[every timer:at (0, 7, *, *, 1:5)];

@Name('EXPIRE_POSITION')
@Subscriber(className='com.algoTrader.service.PositionService.expirePositions')
@Condition(key='statement.expirePosition')
select
    null
from
    pattern[every timer:at (0, 13, *, *, *)];

@Name('CLOSE_POSITION')
@Subscriber(className='com.algoTrader.service.PositionService.closePosition')
@Condition(key='statement.closePosition')
select
    position.id,
    false as unsubscribe
from
    Tick as tick,
    method:LookupUtil.getOpenPositions() as position
where
    tick.security.id not in
        (select
            openOrder.security.id
        from
            OpenOrder as openOrder)
and
    position.security.id = tick.security.id
and
    position.direction != Direction.FLAT
and
    position.exitValue is not null
and
    ((position.direction = Direction.SHORT and (tick.currentValue >= position.exitValue))
    or
    (position.direction = Direction.LONG and (tick.currentValue <= position.exitValue)));

@Name('RECONCILE')
@Subscriber(className='com.algoTrader.service.AccountService.reconcile')
@Condition(key='statement.reconcile')
@RunTimeOnly
select
    null
from
    pattern[every timer:at (0, 9, *, *, 1:5)]
where
    simulation = false;

@Name('EQUALIZE_FOREX_PORTFOLIO')
@Subscriber(className='com.algoTrader.service.ForexService.equalizeForex')
@Condition(key='statement.equalizeForex')
select
    null
from
    pattern[every timer:at (0, 10, *, *, 3)];

@Name('REBALANCE_PORTFOLIO')
@Subscriber(className='com.algoTrader.service.AccountService.rebalancePortfolio')
@Condition(key='statement.rebalancePortfolio')
select
    null
from
    pattern[every timer:at (0, 11, *, *, 3)];
