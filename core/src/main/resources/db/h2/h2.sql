DROP TABLE IF EXISTS "property";
CREATE TABLE "property" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(255) NOT NULL,
  `PERSISTENT` bit(1) NOT NULL,
  `INT_VALUE` int(11) DEFAULT NULL,
  `DOUBLE_VALUE` double DEFAULT NULL,
  `MONEY_VALUE` decimal(15,6) DEFAULT NULL,
  `TEXT_VALUE` varchar(255) DEFAULT NULL,
  `DATE_TIME_VALUE` datetime DEFAULT NULL,
  `BOOLEAN_VALUE` bit(1) DEFAULT NULL,
  `PROPERTY_HOLDER_FK` bigint(20) NOT NULL,
  `VERSION` int(11) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `PROPERTY_NAME_PROPERTY_HOLDER_UNIQUE` (`NAME`,`PROPERTY_HOLDER_FK`),
  KEY `PROPERTY_NAME` (`NAME`),
  KEY `PROPERTY_PROPERTY_HOLDER_FK` (`PROPERTY_HOLDER_FK`)
) ;

DROP TABLE IF EXISTS "account";
CREATE TABLE "account" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(20) NOT NULL,
  `ACTIVE` bit(1) NOT NULL,
  `BROKER` varchar(100) DEFAULT NULL,
  `ORDER_SERVICE_TYPE` varchar(100) NOT NULL,
  `SESSION_QUALIFIER` varchar(10) DEFAULT NULL,
  `EXT_ACCOUNT` varchar(20) DEFAULT NULL,
  `EXT_ACCOUNT_GROUP` varchar(20) DEFAULT NULL,
  `EXT_ALLOCATION_PROFILE` varchar(20) DEFAULT NULL,
  `EXT_CLEARING_ACCOUNT` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `ACCOUNT_NAME_UNIQUE` (`NAME`),
  KEY `ACCOUNT_ACTIVE` (`ACTIVE`),
  KEY `ACCOUNT_BROKER` (`BROKER`),
  KEY `ACCOUNT_ORDER_SERVICE_TYPE` (`ORDER_SERVICE_TYPE`)
) ;

DROP TABLE IF EXISTS "strategy";
CREATE TABLE "strategy" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(30) NOT NULL,
  `AUTO_ACTIVATE` bit(1) NOT NULL,
  `VERSION` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  UNIQUE KEY `STRATEGY_NAME_UNIQUE` (`NAME`)
) ;

DROP TABLE IF EXISTS "exchange";
CREATE TABLE "exchange" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `CODE` varchar(10) DEFAULT NULL,
  `MIC` varchar(4) DEFAULT NULL,
  `BLOOMBERG_CODE` varchar(3) DEFAULT NULL,
  `IB_CODE` varchar(10) DEFAULT NULL,
  `TIME_ZONE` varchar(50) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `EXCHANGE_NAME_UNIQUE` (`NAME`)
) ;

DROP TABLE IF EXISTS "trading_hours";
CREATE TABLE "trading_hours" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `OPEN` time NOT NULL,
  `CLOSE` time NOT NULL,
  `SUNDAY` bit(1) NOT NULL,
  `MONDAY` bit(1) NOT NULL,
  `TUESDAY` bit(1) NOT NULL,
  `WEDNESDAY` bit(1) NOT NULL,
  `THURSDAY` bit(1) NOT NULL,
  `FRIDAY` bit(1) NOT NULL,
  `SATURDAY` bit(1) NOT NULL,
  `EXCHANGE_FK` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`),
  KEY `TRADING_HOURS_EXCHANGE_FKC` (`EXCHANGE_FK`),
  CONSTRAINT `TRADING_HOURS_EXCHANGE_FKC` FOREIGN KEY (`EXCHANGE_FK`) REFERENCES `exchange` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ;

DROP TABLE IF EXISTS "holiday";
CREATE TABLE "holiday" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `DATE` date NOT NULL,
  `LATE_OPEN` time DEFAULT NULL,
  `EARLY_CLOSE` time DEFAULT NULL,
  `EXCHANGE_FK` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `HOLIDAY_DATE_EXCHANGE_UNIQUE` (`DATE`,`EXCHANGE_FK`),
  KEY `HOLIDAY_EXCHANGE_FKC` (`EXCHANGE_FK`),
  KEY `HOLIDAY_DATE` (`DATE`),
  CONSTRAINT `HOLIDAY_EXCHANGE_FKC` FOREIGN KEY (`EXCHANGE_FK`) REFERENCES `exchange` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ;

DROP TABLE IF EXISTS "security_family";
CREATE TABLE "security_family" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `CLASS` varchar(255) DEFAULT NULL,
  `NAME` varchar(20) NOT NULL,
  `SYMBOL_ROOT` varchar(20) DEFAULT NULL,
  `ISIN_ROOT` varchar(20) DEFAULT NULL,
  `RIC_ROOT` varchar(20) DEFAULT NULL,
  `CURRENCY` varchar(100) NOT NULL,
  `CONTRACT_SIZE` double NOT NULL,
  `SCALE` int(11) NOT NULL,
  `TICK_SIZE_PATTERN` varchar(100) NOT NULL,
  `EXECUTION_COMMISSION` decimal(5,2) DEFAULT NULL,
  `CLEARING_COMMISSION` decimal(5,2) DEFAULT NULL,
  `FEE` decimal(5,2) DEFAULT NULL,
  `TRADEABLE` bit(1) NOT NULL,
  `SYNTHETIC` bit(1) NOT NULL,
  `PERIODICITY` varchar(100) DEFAULT NULL,
  `MAX_GAP` int(11) DEFAULT NULL,
  `UNDERLYING_FK` bigint(20) DEFAULT NULL,
  `EXCHANGE_FK` bigint(20) DEFAULT NULL,
  `INTREST` double DEFAULT NULL,
  `DIVIDEND` double DEFAULT NULL,
  `EXPIRATION_TYPE` varchar(100) DEFAULT NULL,
  `EXPIRATION_DISTANCE` varchar(100) DEFAULT NULL,
  `STRIKE_DISTANCE` double DEFAULT NULL,
  `WEEKLY` bit(1) DEFAULT NULL,
  `MATURITY_DISTANCE` varchar(100) DEFAULT NULL,
  `LENGTH` int(11) DEFAULT NULL,
  `QUOTATION_STYLE` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `SECURITY_FAMILY_NAME_UNIQUE` (`NAME`),
  KEY `SECURITY_FAMILY_UNDERLAYING_FKC` (`UNDERLYING_FK`),
  KEY `SECURITY_FAMILY_EXCHANGE_FKC` (`EXCHANGE_FK`),
  KEY `SECURITY_FAMILY_CLASS` (`CLASS`),
  KEY `SECURITY_FAMILY_SYMBOL_ROOT` (`SYMBOL_ROOT`),
  KEY `SECURITY_FAMILY_ISIN_ROOT` (`ISIN_ROOT`),
  KEY `SECURITY_FAMILY_RIC_ROOT` (`RIC_ROOT`),
  KEY `SECURITY_FAMILY_CURRENCY` (`CURRENCY`),
  KEY `SECURITY_FAMILY_TRADEABLE` (`TRADEABLE`),
  KEY `SECURITY_FAMILY_SYNTHETIC` (`SYNTHETIC`),
  KEY `SECURITY_FAMILY_PERIODICITY` (`PERIODICITY`),
  KEY `SECURITY_FAMILY_EXPIRATION_TYPE` (`EXPIRATION_TYPE`),
  KEY `SECURITY_FAMILY_EXPIRATION_DISTANCE` (`EXPIRATION_DISTANCE`),
  KEY `SECURITY_FAMILY_WEEKLY` (`WEEKLY`),
  KEY `SECURITY_FAMILY_QUOTATION_STYLE` (`QUOTATION_STYLE`),
  CONSTRAINT `SECURITY_FAMILY_EXCHANGE_FKC` FOREIGN KEY (`EXCHANGE_FK`) REFERENCES `exchange` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ;

DROP TABLE IF EXISTS "broker_parameters";
CREATE TABLE "broker_parameters" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `BROKER` varchar(100) NOT NULL,
  `SYMBOL_ROOT` varchar(20) DEFAULT NULL,
  `CONTRACT_SIZE` double DEFAULT NULL,
  `SCALE` int(11) DEFAULT NULL,
  `TICK_SIZE_PATTERN` varchar(100) DEFAULT NULL,
  `EXECUTION_COMMISSION` decimal(5,2) DEFAULT NULL,
  `CLEARING_COMMISSION` decimal(5,2) DEFAULT NULL,
  `FEE` decimal(5,2) DEFAULT NULL,
  `PRICE_MULTIPLIER` double DEFAULT NULL,
  `SECURITY_FAMILY_FK` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `BROKER_SECURITY_FAMILY_UNIQUE` (`BROKER`,`SECURITY_FAMILY_FK`),
  KEY `BROKER_PARAMETERS_SECURITY_FKC` (`SECURITY_FAMILY_FK`),
  KEY `BROKER_PARAMETERS_BROKER` (`BROKER`),
  CONSTRAINT `BROKER_PARAMETERS_SECURITY_FKC` FOREIGN KEY (`SECURITY_FAMILY_FK`) REFERENCES `security_family` (`ID`)
) ;

DROP TABLE IF EXISTS "security";
CREATE TABLE "security" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `CLASS` varchar(255) DEFAULT NULL,
  `SYMBOL` varchar(30) DEFAULT NULL,
  `DESCRIPTION` varchar(100) DEFAULT NULL,
  `ISIN` varchar(20) DEFAULT NULL,
  `BBGID` varchar(12) DEFAULT NULL,
  `RIC` varchar(20) DEFAULT NULL,
  `CONID` varchar(30) DEFAULT NULL,
  `LMAXID` varchar(30) DEFAULT NULL,
  `TTID` varchar(255) DEFAULT NULL,
  `UNDERLYING_FK` bigint(20) DEFAULT NULL,
  `SECURITY_FAMILY_FK` bigint(20) NOT NULL,
  `MATURITY` date DEFAULT NULL,
  `COUPON` double DEFAULT NULL,
  `COMMODITY_TYPE` varchar(100) DEFAULT NULL,
  `BASE_CURRENCY` varchar(100) DEFAULT NULL,
  `EXPIRATION` date DEFAULT NULL,
  `MONTH_YEAR` char(6) DEFAULT NULL,
  `FIRST_NOTICE` date DEFAULT NULL,
  `DURATION` varchar(100) DEFAULT NULL,
  `ASSET_CLASS` varchar(100) DEFAULT NULL,
  `STRIKE` decimal(12,5) DEFAULT NULL,
  `OPTION_TYPE` varchar(100) DEFAULT NULL,
  `GICS` char(8) DEFAULT NULL,
  `UUID` char(36) DEFAULT NULL,
  `COMBINATION_TYPE` varchar(100) DEFAULT NULL,
  `PERSISTENT` bit(1) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `SECURITY_SYMBOL_SECURITY_FAMILY_UNIQUE` (`SYMBOL`,`SECURITY_FAMILY_FK`),
  UNIQUE KEY `SECURITY_ISIN_UNIQUE` (`ISIN`),
  UNIQUE KEY `SECURITY_BBGID_UNIQUE` (`BBGID`),
  UNIQUE KEY `SECURITY_RIC_UNIQUE` (`RIC`),
  UNIQUE KEY `SECURITY_CONID_UNIQUE` (`CONID`),
  UNIQUE KEY `SECURITY_LMAXID_UNIQUE` (`LMAXID`),
  UNIQUE KEY `SECURITY_TTID_UNIQUE` (`TTID`),
  UNIQUE KEY `SECURITY_CLASS_SECURITY_FAMILY_MATURITY_UNIQUE` (`CLASS`,`SECURITY_FAMILY_FK`,`MATURITY`),
  UNIQUE KEY `SECURITY_CLASS_SECURITY_FAMILY_MONTH_YEAR_UNIQUE` (`CLASS`,`SECURITY_FAMILY_FK`,`MONTH_YEAR`),
  UNIQUE KEY `SECURITY_CLASS_SECURITY_FAMILY_DURATION_UNIQUE` (`CLASS`,`SECURITY_FAMILY_FK`,`DURATION`),
  UNIQUE KEY `SECURITY_CLASS_S_F_EXPIRATION_STRIKE_OPT_TYPE_UNIQUE` (`CLASS`,`SECURITY_FAMILY_FK`,`EXPIRATION`,`STRIKE`,`OPTION_TYPE`),
  UNIQUE KEY `SECURITY_UUID_UNIQUE` (`UUID`),
  KEY `SECURITY_SECURITY_FAMILY_FKC` (`SECURITY_FAMILY_FK`),
  KEY `SECURITY_UNDERLYING_FKC` (`UNDERLYING_FK`),
  KEY `SECURITY_MATURITY` (`MATURITY`),
  KEY `SECURITY_EXPIRATION` (`EXPIRATION`),
  KEY `SECURITY_MONTH_YEAR` (`MONTH_YEAR`),
  KEY `SECURITY_FIRST_NOTICE` (`FIRST_NOTICE`),
  KEY `SECURITY_DURATION` (`DURATION`),
  KEY `SECURITY_STRIKE` (`STRIKE`),
  KEY `SECURITY_OPTION_TYPE` (`OPTION_TYPE`),
  KEY `SECURITY_GICS` (`GICS`),
  KEY `SECURITY_CLASS` (`CLASS`),
  KEY `SECURITY_SYMBOL` (`SYMBOL`),
  KEY `SECURITY_COMBINATION_TYPE` (`COMBINATION_TYPE`),
  KEY `SECURITY_COMMODITY_TYPE` (`COMMODITY_TYPE`),
  KEY `SECURITY_ASSET_CLASS` (`ASSET_CLASS`),
  KEY `SECURITY_BASE_CURRENCY` (`BASE_CURRENCY`),
  CONSTRAINT `SECURITY_SECURITY_FAMILY_FKC` FOREIGN KEY (`SECURITY_FAMILY_FK`) REFERENCES `security_family` (`ID`) ON UPDATE CASCADE,
  CONSTRAINT `SECURITY_UNDERLYING_FKC` FOREIGN KEY (`UNDERLYING_FK`) REFERENCES `security` (`ID`) ON UPDATE CASCADE
) ;

ALTER TABLE "security_family"
  ADD CONSTRAINT `SECURITY_FAMILY_UNDERLAYING_FKC` FOREIGN KEY (`UNDERLYING_FK`) REFERENCES "security" (`ID`) ON DELETE CASCADE ON UPDATE CASCADE;

DROP TABLE IF EXISTS "security_reference";
CREATE TABLE "security_reference" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(100) NOT NULL,
  `OWNER_FK` bigint(20) NOT NULL,
  `TARGET_FK` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `SECURITY_REFERENCE_NAME_OWNER_TARGET_UNIQUE` (`NAME`,`OWNER_FK`,`TARGET_FK`),
  KEY `SECURITY_REFERENCE_OWNER_FKC` (`OWNER_FK`),
  KEY `SECURITY_REFERENCE_TARGET_FKC` (`TARGET_FK`),
  KEY `SECURITY_REFERENCE_NAME` (`NAME`),
  CONSTRAINT `SECURITY_REFERENCE_OWNER_FKC` FOREIGN KEY (`OWNER_FK`) REFERENCES `security` (`ID`),
  CONSTRAINT `SECURITY_REFERENCE_TARGET_FKC` FOREIGN KEY (`TARGET_FK`) REFERENCES `security` (`ID`)
) ;

DROP TABLE IF EXISTS "component";
CREATE TABLE "component" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `QUANTITY` bigint(20) NOT NULL,
  `PERSISTENT` bit(1) NOT NULL,
  `SECURITY_FK` bigint(20) NOT NULL,
  `COMBINATION_FK` bigint(20) NOT NULL,
  `VERSION` int(11) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `COMPONENT_SECURITY_COMBINATION_UNIQUE` (`SECURITY_FK`,`COMBINATION_FK`),
  KEY `COMPONENT_COMBINATION_FK` (`COMBINATION_FK`),
  KEY `COMPONENT_SECURITY_FKC` (`SECURITY_FK`),
  CONSTRAINT `COMPONENT_COMBINATION_FK` FOREIGN KEY (`COMBINATION_FK`) REFERENCES `security` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `COMPONENT_SECURITY_FKC` FOREIGN KEY (`SECURITY_FK`) REFERENCES `security` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ;

DROP TABLE IF EXISTS "easy_to_borrow";
CREATE TABLE "easy_to_borrow" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `DATE` date NOT NULL,
  `BROKER` varchar(100) NOT NULL,
  `QUANTITY` bigint(20) NOT NULL,
  `STOCK_FK` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `EASY_TO_BORROW_DATE_BROKER_STOCK_UNIQUE` (`DATE`,`BROKER`,`STOCK_FK`),
  KEY `EASY_TO_BORROW_STOCK_FKC` (`STOCK_FK`),
  KEY `EASY_TO_BORROW_DATE` (`DATE`),
  KEY `EASY_TO_BORROW_BROKER` (`BROKER`),
  CONSTRAINT `EASY_TO_BORROW_STOCK_FKC` FOREIGN KEY (`STOCK_FK`) REFERENCES `security` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ;

DROP TABLE IF EXISTS "order";
CREATE TABLE "order" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `class` varchar(255) NOT NULL,
  `INT_ID` varchar(30) NOT NULL,
  `EXT_ID` varchar(50) DEFAULT NULL,
  `DATE_TIME` datetime NOT NULL,
  `SIDE` varchar(100) NOT NULL,
  `QUANTITY` bigint(20) NOT NULL,
  `TIF` varchar(100) NOT NULL,
  `TIF_DATE_TIME` datetime DEFAULT NULL,
  `LIMIT` decimal(15,6) DEFAULT NULL,
  `STOP` decimal(15,6) DEFAULT NULL,
  `ACCOUNT_FK` bigint(20) NOT NULL,
  `SECURITY_FK` bigint(20) NOT NULL,
  `STRATEGY_FK` bigint(20) NOT NULL,
  `EXCHANGE_FK` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `ORDER_ACCOUNT_FKC` (`ACCOUNT_FK`),
  KEY `ORDER_SECURITY_FKC` (`SECURITY_FK`),
  KEY `ORDER_STRATEGY_FKC` (`STRATEGY_FK`),
  KEY `ORDER_EXCHANGE_FKC` (`EXCHANGE_FK`),
  KEY `ORDER_INT_ID` (`INT_ID`),
  KEY `ORDER_EXT_ID` (`EXT_ID`),
  KEY `ORDER_DATE_TIME` (`DATE_TIME`),
  KEY `ORDER_SIDE` (`SIDE`),
  KEY `ORDER_TIF` (`TIF`),
  CONSTRAINT `ORDER_ACCOUNT_FKC` FOREIGN KEY (`ACCOUNT_FK`) REFERENCES `account` (`ID`),
  CONSTRAINT `ORDER_EXCHANGE_FKC` FOREIGN KEY (`EXCHANGE_FK`) REFERENCES `exchange` (`ID`),
  CONSTRAINT `ORDER_SECURITY_FKC` FOREIGN KEY (`SECURITY_FK`) REFERENCES `security` (`ID`),
  CONSTRAINT `ORDER_STRATEGY_FKC` FOREIGN KEY (`STRATEGY_FK`) REFERENCES `strategy` (`ID`)
) ;

DROP TABLE IF EXISTS "order_preference";
CREATE TABLE "order_preference" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `ORDER_TYPE` varchar(100) NOT NULL,
  `DEFAULT_ACCOUNT_FK` bigint(20) DEFAULT NULL,
  `VERSION` int(11) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `ORDER_PREFERENCE_NAME_UNIQUE` (`NAME`),
  KEY `ORDER_PREFERENCE_DEFAULT_ACCOC` (`DEFAULT_ACCOUNT_FK`),
  CONSTRAINT `ORDER_PREFERENCE_DEFAULT_ACCOC` FOREIGN KEY (`DEFAULT_ACCOUNT_FK`) REFERENCES `account` (`ID`) ON UPDATE CASCADE
) ;

DROP TABLE IF EXISTS "order_property";
CREATE TABLE "order_property" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(30) NOT NULL,
  `VALUE` varchar(255) NOT NULL,
  `TYPE` varchar(100) NOT NULL,
  `ORDER_FK` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `ORDER_PROPERTY_NAME_ORDER_UNIQUE` (`NAME`,`ORDER_FK`),
  KEY `ORDER_PROPERTY_ORDER_FKC` (`ORDER_FK`),
  KEY `ORDER_PROPERTY_NAME` (`NAME`),
  CONSTRAINT `ORDER_PROPERTY_ORDER_FKC` FOREIGN KEY (`ORDER_FK`) REFERENCES `order` (`ID`)
) ;

DROP TABLE IF EXISTS "order_status";
CREATE TABLE "order_status" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `DATE_TIME` datetime NOT NULL,
  `EXT_DATE_TIME` datetime DEFAULT NULL,
  `STATUS` varchar(100) NOT NULL,
  `FILLED_QUANTITY` bigint(20) NOT NULL,
  `REMAINING_QUANTITY` bigint(20) NOT NULL,
  `AVG_PRICE` decimal(15,6) DEFAULT NULL,
  `LAST_PRICE` decimal(15,6) DEFAULT NULL,
  `INT_ID` varchar(30) DEFAULT NULL,
  `EXT_ID` varchar(50) DEFAULT NULL,
  `SEQUENCE_NUMBER` bigint(20) NOT NULL,
  `REASON` varchar(255) DEFAULT NULL,
  `ORDER_FK` bigint(20) NOT NULL,
  `LAST_QUANTITY` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`),
  KEY `ORDER_STATUS_ORDER_FKC` (`ORDER_FK`),
  KEY `ORDER_STATUS_DATE_TIME` (`DATE_TIME`),
  KEY `ORDER_STATUS_EXT_DATE_TIME` (`EXT_DATE_TIME`),
  KEY `ORDER_STATUS_STATUS` (`STATUS`),
  KEY `ORDER_STATUS_INT_ID` (`INT_ID`),
  KEY `ORDER_STATUS_EXT_ID` (`EXT_ID`),
  KEY `ORDER_STATUS_SEQUENCE_NUMBER` (`SEQUENCE_NUMBER`),
  CONSTRAINT `ORDER_STATUS_ORDER_FKC` FOREIGN KEY (`ORDER_FK`) REFERENCES `order` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ;

DROP TABLE IF EXISTS "portfolio_value";
CREATE TABLE "portfolio_value" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `DATE_TIME` datetime NOT NULL,
  `NET_LIQ_VALUE` decimal(15,6) NOT NULL,
  `MARKET_VALUE` decimal(15,6) NOT NULL,
  `REALIZED_P_L` decimal(15,6) NOT NULL,
  `UNREALIZED_P_L` decimal(15,6) NOT NULL,
  `CASH_BALANCE` decimal(15,6) NOT NULL,
  `OPEN_POSITIONS` int(11) NOT NULL,
  `LEVERAGE` double NOT NULL,
  `CASH_FLOW` decimal(15,6) DEFAULT NULL,
  `STRATEGY_FK` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `PORTFOLIO_VALUE_DATE_TIME_STRATEGY_UNIQUE` (`DATE_TIME`,`STRATEGY_FK`),
  KEY `PORTFOLIO_VALUE_STRATEGY_FKC` (`STRATEGY_FK`),
  KEY `PORTFOLIO_VALUE_DATE_TIME` (`DATE_TIME`),
  CONSTRAINT `PORTFOLIO_VALUE_STRATEGY_FKC` FOREIGN KEY (`STRATEGY_FK`) REFERENCES `strategy` (`ID`) ON UPDATE CASCADE
) ;

DROP TABLE IF EXISTS "position";
CREATE TABLE "position" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `QUANTITY` bigint(20) NOT NULL,
  `COST` decimal(15,2) NOT NULL,
  `REALIZED_P_L` decimal(15,2) NOT NULL,
  `PERSISTENT` bit(1) NOT NULL,
  `SECURITY_FK` bigint(20) NOT NULL,
  `STRATEGY_FK` bigint(20) NOT NULL,
  `VERSION` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  UNIQUE KEY `POSITION_SECURITY_STRATEGY_UNIQUE` (`SECURITY_FK`,`STRATEGY_FK`),
  KEY `POSITION_SECURITY_FKC` (`SECURITY_FK`),
  KEY `POSITION_STRATEGY_FKC` (`STRATEGY_FK`),
  CONSTRAINT `POSITION_SECURITY_FKC` FOREIGN KEY (`SECURITY_FK`) REFERENCES `security` (`ID`) ON UPDATE CASCADE,
  CONSTRAINT `POSITION_STRATEGY_FKC` FOREIGN KEY (`STRATEGY_FK`) REFERENCES `strategy` (`ID`) ON UPDATE CASCADE
) ;

DROP TABLE IF EXISTS "subscription";
CREATE TABLE "subscription" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `SECURITY_FK` bigint(20) NOT NULL,
  `STRATEGY_FK` bigint(20) NOT NULL,
  `FEED_TYPE` varchar(100) NOT NULL,
  `PERSISTENT` bit(1) NOT NULL,
  `VERSION` int(11) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `SUBSCRIPTION_STRATEGY_SECURITY_FEED_TYPE_UNIQUE` (`SECURITY_FK`,`STRATEGY_FK`,`FEED_TYPE`),
  KEY `SUBSCRIPTION_SECURITY_FKC` (`SECURITY_FK`),
  KEY `SUBSCRIPTION_STRATEGY_FKC` (`STRATEGY_FK`),
  KEY `SUBSCRIPTION_PERSISTENT` (`PERSISTENT`),
  KEY `SUBSCRIPTION_FEED_TYPE` (`FEED_TYPE`),
  CONSTRAINT `SUBSCRIPTION_SECURITY_FKC` FOREIGN KEY (`SECURITY_FK`) REFERENCES `security` (`ID`) ON UPDATE CASCADE,
  CONSTRAINT `SUBSCRIPTION_STRATEGY_FKC` FOREIGN KEY (`STRATEGY_FK`) REFERENCES `strategy` (`ID`) ON UPDATE CASCADE
) ;

DROP TABLE IF EXISTS "transaction";
CREATE TABLE "transaction" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `UUID` char(36) NOT NULL,
  `EXT_ID` varchar(100) DEFAULT NULL,
  `INT_ORDER_ID` varchar(30) DEFAULT NULL,
  `EXT_ORDER_ID` varchar(50) DEFAULT NULL,
  `DATE_TIME` datetime NOT NULL,
  `SETTLEMENT_DATE` date DEFAULT NULL,
  `QUANTITY` bigint(20) NOT NULL,
  `PRICE` decimal(15,6) NOT NULL,
  `EXECUTION_COMMISSION` decimal(15,2) DEFAULT NULL,
  `CLEARING_COMMISSION` decimal(15,2) DEFAULT NULL,
  `FEE` decimal(15,2) DEFAULT NULL,
  `CURRENCY` varchar(100) NOT NULL,
  `TYPE` varchar(100) NOT NULL,
  `DESCRIPTION` varchar(255) DEFAULT NULL,
  `SECURITY_FK` bigint(20) DEFAULT NULL,
  `STRATEGY_FK` bigint(20) NOT NULL,
  `POSITION_FK` bigint(20) DEFAULT NULL,
  `ACCOUNT_FK` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `TRANSACTION_EXT_ID_UNIQUE` (`EXT_ID`),
  KEY `TRANSACTION_DATE_TIME` (`DATE_TIME`),
  KEY `TRANSACTION_SETTLEMENT_DATE` (`SETTLEMENT_DATE`),
  KEY `TRANSACTION_CURRENCY` (`CURRENCY`),
  KEY `TRANSACTION_STRATEGY_FKC` (`STRATEGY_FK`),
  KEY `TRANSACTION_POSITION_FKC` (`POSITION_FK`),
  KEY `TRANSACTION_SECURITY_FKC` (`SECURITY_FK`),
  KEY `TRANSACTION_ACCOUNT_FKC` (`ACCOUNT_FK`),
  KEY `TRANSACTION_INT_ORDER_ID` (`INT_ORDER_ID`),
  KEY `TRANSACTION_EXT_ORDER_ID` (`EXT_ORDER_ID`),
  KEY `TRANSACTION_TYPE` (`TYPE`),
  CONSTRAINT `TRANSACTION_ACCOUNT_FKC` FOREIGN KEY (`ACCOUNT_FK`) REFERENCES `account` (`ID`) ON UPDATE CASCADE,
  CONSTRAINT `TRANSACTION_POSITION_FKC` FOREIGN KEY (`POSITION_FK`) REFERENCES `position` (`ID`) ON UPDATE CASCADE,
  CONSTRAINT `TRANSACTION_SECURITY_FKC` FOREIGN KEY (`SECURITY_FK`) REFERENCES `security` (`ID`) ON UPDATE CASCADE,
  CONSTRAINT `TRANSACTION_STRATEGY_FKC` FOREIGN KEY (`STRATEGY_FK`) REFERENCES `strategy` (`ID`) ON UPDATE CASCADE
) ;

DROP TABLE IF EXISTS "cash_balance";
CREATE TABLE "cash_balance" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `CURRENCY` varchar(100) NOT NULL,
  `AMOUNT` decimal(15,2) NOT NULL,
  `STRATEGY_FK` bigint(20) NOT NULL,
  `VERSION` int(11) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `CASH_BALANCE_CURRENCY_STRATEGY_UNIQUE` (`CURRENCY`,`STRATEGY_FK`),
  KEY `CASH_BALANCE_STRATEGY_FKC` (`STRATEGY_FK`),
  KEY `CASH_BALANCE_CURRENCY` (`CURRENCY`),
  CONSTRAINT `CASH_BALANCE_STRATEGY_FKC` FOREIGN KEY (`STRATEGY_FK`) REFERENCES `strategy` (`ID`) ON UPDATE CASCADE
) ;

DROP TABLE IF EXISTS "tick";
CREATE TABLE "tick" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `DATE_TIME` datetime NOT NULL,
  `LAST` decimal(13,6) DEFAULT NULL,
  `LAST_DATE_TIME` datetime DEFAULT NULL,
  `VOL` int(11) NOT NULL,
  `VOL_BID` int(11) NOT NULL,
  `VOL_ASK` int(11) NOT NULL,
  `BID` decimal(13,6) DEFAULT NULL,
  `ASK` decimal(13,6) DEFAULT NULL,
  `FEED_TYPE` varchar(100) DEFAULT NULL,
  `SECURITY_FK` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `TICK_DATE_TIME_SECURITY_FEED_TYPE_UNIQUE` (`DATE_TIME`,`SECURITY_FK`,`FEED_TYPE`),
  KEY `TICK_DATE_TIME` (`DATE_TIME`),
  KEY `TICK_SECURITY_FK` (`SECURITY_FK`),
  KEY `TICK_FEED_TYPE` (`FEED_TYPE`)
) ;

DROP TABLE IF EXISTS "bar";
CREATE TABLE "bar" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `DATE_TIME` datetime NOT NULL,
  `OPEN` decimal(13,6) NOT NULL,
  `HIGH` decimal(13,6) NOT NULL,
  `LOW` decimal(13,6) NOT NULL,
  `CLOSE` decimal(13,6) NOT NULL,
  `VOL` int(11) NOT NULL,
  `VWAP` decimal(13,6) DEFAULT NULL,
  `BAR_SIZE` varchar(100) NOT NULL,
  `FEED_TYPE` varchar(100) DEFAULT NULL,
  `SECURITY_FK` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `BAR_DATE_TIME_SECURITY_BAR_SIZE_UNIQUE` (`DATE_TIME`,`SECURITY_FK`,`BAR_SIZE`),
  KEY `BAR_DATE_TIME` (`DATE_TIME`),
  KEY `BAR_SECURITY_FK` (`SECURITY_FK`),
  KEY `BAR_BAR_SIZE` (`BAR_SIZE`),
  KEY `BAR_FEED_TYPE` (`FEED_TYPE`)
) ;

DROP TABLE IF EXISTS "generic_tick";
CREATE TABLE "generic_tick" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `DATE_TIME` datetime NOT NULL,
  `FEED_TYPE` varchar(100) NOT NULL,
  `SECURITY_FK` bigint(20) NOT NULL,
  `TICK_TYPE` varchar(100) NOT NULL,
  `MONEY_VALUE` decimal(13,6) DEFAULT NULL,
  `DOUBLE_VALUE` double DEFAULT NULL,
  `INT_VALUE` int(11) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `GENERIC_TICK_DATE_TIME_SECURITY_FEED_TYPE_TICK_TYPE_UNIQUE` (`DATE_TIME`,`SECURITY_FK`,`FEED_TYPE`,`TICK_TYPE`),
  KEY `GENERIC_TICK_SECURITY_FKC` (`SECURITY_FK`),
  KEY `GENERIC_TICK_DATE_TIME` (`DATE_TIME`),
  KEY `GENERIC_TICK_FEED_TYPE` (`FEED_TYPE`),
  KEY `GENERIC_TICK_TICK_TYPE` (`TICK_TYPE`)
) ;

DROP TABLE IF EXISTS "measurement";
CREATE TABLE "measurement" (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(255) NOT NULL,
  `DATE_TIME` datetime NOT NULL,
  `INT_VALUE` int(11) DEFAULT NULL,
  `DOUBLE_VALUE` double DEFAULT NULL,
  `MONEY_VALUE` decimal(15,6) DEFAULT NULL,
  `TEXT_VALUE` varchar(50) DEFAULT NULL,
  `BOOLEAN_VALUE` bit(1) DEFAULT NULL,
  `STRATEGY_FK` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `MEASUREMENT_DATE_NAME_STRATEGY_UNIQUE` (`DATE_TIME`,`NAME`,`STRATEGY_FK`),
  KEY `MEASUREMENT_STRATEGY_FKC` (`STRATEGY_FK`),
  KEY `MEASUREMENT_NAME` (`NAME`),
  KEY `MEASUREMENT_DATE_TIME` (`DATE_TIME`),
  CONSTRAINT `MEASUREMENT_STRATEGY_FKC` FOREIGN KEY (`STRATEGY_FK`) REFERENCES `strategy` (`ID`) ON UPDATE CASCADE
) ;

INSERT INTO "strategy" (`ID`, `NAME`, `AUTO_ACTIVATE`, `VERSION`) VALUES (1,'SERVER','1',0);

INSERT INTO "cash_balance" (`ID`, `CURRENCY`, `AMOUNT`, `STRATEGY_FK`, `VERSION`) VALUES (1,'USD',1000000.00,1,1);

INSERT INTO "transaction" (`ID`, `UUID`, `EXT_ID`, `INT_ORDER_ID`, `EXT_ORDER_ID`, `DATE_TIME`, `SETTLEMENT_DATE`, `QUANTITY`, `PRICE`, `EXECUTION_COMMISSION`, `CLEARING_COMMISSION`, `FEE`, `CURRENCY`, `TYPE`, `DESCRIPTION`, `SECURITY_FK`, `STRATEGY_FK`, `POSITION_FK`, `ACCOUNT_FK`) VALUES (1,'',NULL,NULL,NULL,'2012-08-16 00:00:00',NULL,1,1000000.000000,NULL,NULL,NULL,'USD','CREDIT',NULL,NULL,1,NULL,NULL);

INSERT INTO "account"(ID, NAME, ACTIVE, BROKER, ORDER_SERVICE_TYPE) VALUES (1, 'TEST_ACCOUNT', True, 'IB', 'IB_NATIVE');

INSERT INTO "order_preference" (ID, NAME, ORDER_TYPE, DEFAULT_ACCOUNT_FK, VERSION) VALUES (200, 'DEFAULT', 'MARKET', 1, 0);
