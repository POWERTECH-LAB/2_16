// ------------------------------ Slicing Limit Order ---------------------------------------

@Name('SLICINING_DECREASE_OFFSET_TICKS')
@RunTimeOnly
@Subscriber(className='ch.algotrader.esper.subscriber.VoidSubscriber')
select
    cast(currentOrder.parentOrder, ch.algotrader.entity.trade.SlicingOrder).decreaseOffsetTicks()
from
    //every Order -> (OrderStatusC and not (OrderStatusEorPE or Order))
    pattern [every currentOrder=`Order`(instanceof(parentOrder,ch.algotrader.entity.trade.SlicingOrder))
        -> (OrderStatus(status = Status.CANCELED, `order`.intId = currentOrder.intId)
            and not (OrderStatus(status = Status.EXECUTED or status = Status.PARTIALLY_EXECUTED, `order`.intId = currentOrder.intId) or `Order`(intId = currentOrder.intId)))];

@Name('SLICINING_INCREASE_OFFSET_TICKS')
@RunTimeOnly
@Subscriber(className='ch.algotrader.esper.subscriber.VoidSubscriber')
select
    cast(currentOrder.parentOrder, ch.algotrader.entity.trade.SlicingOrder).increaseOffsetTicks()
from
    //every Order -> (OrderStatusEorPE and not (OrderStatusC or Order))
    pattern [every currentOrder=`Order`(instanceof(parentOrder,ch.algotrader.entity.trade.SlicingOrder))
        -> (OrderStatus(status = Status.EXECUTED or status = Status.PARTIALLY_EXECUTED, `order`.intId = currentOrder.intId)
            and not (OrderStatus(status = Status.CANCELED, `order`.intId = currentOrder.intId) or `Order`(intId = currentOrder.intId)))];

@Name('SLICINING_CANCEL_ORDER')
@RunTimeOnly
@Subscriber(className='ch.algotrader.service.OrderService.cancelOrder')
select
    currentOrder
from
    //every Order -> (timer:interval and not OrderStatusEorC)
    pattern [every currentOrder=`Order`(instanceof(parentOrder,ch.algotrader.entity.trade.SlicingOrder))
        -> (timer:interval(cast(currentOrder.parentOrder.minDuration?,double) + (cast(currentOrder.parentOrder.maxDuration?,double) - cast(currentOrder.parentOrder.minDuration?,double)) * Math.random())
            and not OrderStatus(status = Status.EXECUTED or status = Status.CANCELED, `order`.intId = currentOrder.intId))];

@Name('SLICINING_NEXT_ORDER')
@RunTimeOnly
@Subscriber(className='ch.algotrader.service.OrderService.sendOrder')
select
    slicingOrder.nextOrder(openOrderWindow.remainingQuantity)
from
    // every SlicingOrder -> every ((OrderStatusLimit -> timer:interval) and not OrderStatusSlicing)
    pattern [every slicingOrder=ch.algotrader.entity.trade.SlicingOrder
            -> every (OrderStatus(status = Status.EXECUTED or status = Status.CANCELED, `order`.parentOrder.intId = slicingOrder.intId)
            -> timer:interval(slicingOrder.minDelay + (slicingOrder.maxDelay - slicingOrder.minDelay) * Math.random()))] unidirectional,
    OpenOrderWindow() as openOrderWindow
where
    openOrderWindow.intId = slicingOrder.intId
and
    openOrderWindow.status != Status.EXECUTED
and
    openOrderWindow.status != Status.CANCELED;
