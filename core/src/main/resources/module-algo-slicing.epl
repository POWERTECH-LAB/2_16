// ------------------------------ Slicing Limit Order ---------------------------------------

@Name('SLICING_DECREASE_OFFSET_TICKS')
@RunTimeOnly
@Subscriber(className='slicingOrderService#decreaseOffsetTicks')
select
    cast(currentOrder.parentOrder, ch.algotrader.entity.trade.algo.SlicingOrder)
from
    //every Order -> (OrderStatusC and not (OrderStatusEorPE or Order))
    pattern [every currentOrder=`Order`(instanceof(parentOrder,ch.algotrader.entity.trade.algo.SlicingOrder))
        -> (OrderStatus(status = Status.CANCELED, intId = currentOrder.intId)
            and not (OrderStatus(status = Status.EXECUTED or status = Status.PARTIALLY_EXECUTED, intId = currentOrder.intId) or `Order`(intId = currentOrder.intId)))];

@Name('SLICING_INCREASE_OFFSET_TICKS')
@RunTimeOnly
@Subscriber(className='slicingOrderService#increaseOffsetTicks')
select
    cast(currentOrder.parentOrder, ch.algotrader.entity.trade.algo.SlicingOrder)
from
    //every Order -> (OrderStatusEorPE and not (OrderStatusC or Order))
    pattern [every currentOrder=`Order`(instanceof(parentOrder,ch.algotrader.entity.trade.algo.SlicingOrder))
        -> (OrderStatus(status = Status.EXECUTED or status = Status.PARTIALLY_EXECUTED, intId = currentOrder.intId)
            and not (OrderStatus(status = Status.CANCELED, intId = currentOrder.intId) or `Order`(intId = currentOrder.intId)))];

@Name('SLICING_CANCEL_ORDER')
@RunTimeOnly
@Subscriber(className='orderService#cancelOrder')
select
    currentOrder
from
    //every Order -> (timer:interval and not OrderStatusEorCorR)
    pattern [every currentOrder=`Order`(instanceof(parentOrder,ch.algotrader.entity.trade.algo.SlicingOrder))
        -> (timer:interval(cast(currentOrder.parentOrder.minDuration?,double) + (cast(currentOrder.parentOrder.maxDuration?,double) - cast(currentOrder.parentOrder.minDuration?,double)) * Math.random())
            and not OrderStatus(status = Status.EXECUTED or status = Status.CANCELED or status = Status.REJECTED, intId = currentOrder.intId))];

@Name('SLICING_NEXT_ORDER')
@RunTimeOnly
@Subscriber(className='slicingOrderService#sendNextOrder')
select
    slicingOrder
from
    // every SlicingOrder -> every (OrderStatusLimit -> (timer:interval and not OrderStatusSlicing))
    pattern [every slicingOrder=ch.algotrader.entity.trade.algo.SlicingOrder
            -> every (OrderStatus(status = Status.EXECUTED or status = Status.CANCELED, `order`.parentOrder.intId = slicingOrder.intId)
            -> (timer:interval(slicingOrder.minDelay + (slicingOrder.maxDelay - slicingOrder.minDelay) * Math.random())
               and not OrderStatus(status = Status.EXECUTED or status = Status.CANCELED or status = Status.REJECTED, intId = slicingOrder.intId)))];
               
@Name('SLICING_STORE_FILL')
@RunTimeOnly
@Subscriber(className='slicingOrderService#storeFill')
select
    fill
from
    // every SlicingOrder -> every (Fill and not OrderStatusSlicing)
    pattern [every slicingOrder=ch.algotrader.entity.trade.algo.SlicingOrder
            -> every (fill=Fill(`order`.parentOrder.intId = slicingOrder.intId)
            and not OrderStatus(status = Status.EXECUTED or status = Status.CANCELED or status = Status.REJECTED, intId = slicingOrder.intId))];
