/*
 * Priorities on TickVO:
 * Prio 4: CURRENT_MARKET_DATA_EVENT
 * Prio 3: UPDATE_COMPONENT_WINDOW
 * Prio 2: CLOSE_POSITION
 * Prio 1: PROPAGATE_MARKET_DATA_EVENTS
 */

@Name('TICK_WINDOW')
@RunTimeOnly()
create window
    TickWindow.std:unique(securityId, feedType)
as select
    "" as tickerId,
    securityId,
    feedType,
    dateTime,
    last,
    lastDateTime,
    bid,
    ask,
    vol,
    volBid,
    volAsk,
    false as refresh
from
    TickVO;

@Name('INSERT_INTO_TICK_WINDOW')
@RunTimeOnly()
insert into
    TickWindow
select
    tickerId,
    feedType,
    securityId,
    current_timestamp.toDate() as dateTime,
    null as last,
    null as lastDateTime,
    null as bid,
    null as ask,
    0 as vol,
    0 as volBid,
    0 as volAsk,
    false as refresh
from
    SubscribeTickEventVO;

@Name('UPDATE_TICK_WINDOW_FROM_TRADE')
@RunTimeOnly()
on
    TradeVO as trade
update
    TickWindow as tickWindow
set
    tickWindow.dateTime = trade.lastDateTime,
    tickWindow.lastDateTime = trade.lastDateTime,
    tickWindow.last = (case when trade.last = 0 then null
        else RoundUtil.getBigDecimal(trade.last, lookupService.getSecurityFamilyBySecurity(tickWindow.securityId).getScale()) end),
    tickWindow.vol = trade.vol,
    tickWindow.refresh = true
where
    tickWindow.feedType = trade.feedType
and
    tickWindow.tickerId = trade.tickerId
and
    // Issue with variable initialization affecting Esper 5.2 and 5.3
    lookupService is not null;

@Name('UPDATE_TICK_WINDOW_FROM_BID')
@RunTimeOnly()
on
    BidVO as bid
update
    TickWindow as tickWindow
set
    tickWindow.dateTime = bid.dateTime,
    tickWindow.bid = (case when bid.bid = 0 then null
        else RoundUtil.getBigDecimal(bid.bid, lookupService.getSecurityFamilyBySecurity(tickWindow.securityId).getScale()) end),
    tickWindow.volBid = bid.volBid,
    tickWindow.refresh = true
where
    tickWindow.feedType = bid.feedType
and
    tickWindow.tickerId = bid.tickerId
and
    // Issue with variable initialization affecting Esper 5.2 and 5.3
    lookupService is not null;

@Name('UPDATE_TICK_WINDOW_FROM_ASK')
@RunTimeOnly()
on
    AskVO as ask
update
    TickWindow as tickWindow
set
    tickWindow.dateTime = ask.dateTime,
    tickWindow.ask = (case when ask.ask = 0 then null
        else RoundUtil.getBigDecimal(ask.ask, lookupService.getSecurityFamilyBySecurity(tickWindow.securityId).getScale()) end),
    tickWindow.volAsk = ask.volAsk,
    tickWindow.refresh = true
where
    tickWindow.feedType = ask.feedType
and
    tickWindow.tickerId = ask.tickerId
and
    // Issue with variable initialization affecting Esper 5.2 and 5.3
    lookupService is not null;

@Name('INCOMING_TICK')
@RunTimeOnly()
on
    TickWindow as trigger
insert into
    IncomingTick
select
    new ch.algotrader.entity.marketData.TickVO(
        0L,
        tickWindow.dateTime,
        tickWindow.feedType,
        tickWindow.securityId,
        tickWindow.last,
        tickWindow.lastDateTime,
        tickWindow.bid,
        tickWindow.ask,
        tickWindow.volBid,
        tickWindow.volAsk,
        tickWindow.vol) as value
from
    TickWindow as tickWindow
where
    trigger.securityId = tickWindow.securityId and trigger.feedType = tickWindow.feedType
and
    tickWindow.refresh
and
    calendarService.isOpen(lookupService.getExchangeBySecurity(tickWindow.securityId).getId(), current_timestamp.toDate());

@Name('VALIDATE_TICK')
@RunTimeOnly()
insert into
    TickVO
select
    transpose(incomingTick.value)
from
    IncomingTick as incomingTick
where
    marketDataService.isTickValid(incomingTick.value);

@Name('CHECK_TICK_GAPS')
@Subscriber(className='marketDataService#logTickGap')
@RunTimeOnly()
@Condition(key='statement.marketDataGap')
select
    tick.securityId
from
    pattern [every tick=TickVO(not lookupService.getSecurityFamilyBySecurity(tick.securityId).getMaxGap() is null)
            -> (timer:interval(lookupService.getSecurityFamilyBySecurity(tick.securityId).getMaxGap() * 60) and not TickVO(securityId = tick.securityId))]
where
    calendarService.isOpen(lookupService.getExchangeBySecurity(tick.securityId).getId(), current_timestamp.toDate());

@Name('PROPAGATE_MARKET_DATA_EVENTS')
@Subscriber(className='eventPropagator#propagateMarketData')
@Priority(1)
select
    *
from
    MarketDataEventVO;

@Name('PROPAGATE_GENERIC_EVENTS')
@Subscriber(className='eventPropagator#propagateGenericEvent')
@Priority(1)
select
    *
from
    ch.algotrader.vo.GenericEventVO;

// ------------------------------TRADING STATUS--------------------------------

@Name('TRADING_CONTEXT')
create context
    TradingStatusContext
partition by
    feedType and tickerId
from
    TradingHaltVO;

@Name('TRADING_HALTED')
@RunTimeOnly()
insert into
    TradingStatusEventVO
select
    TradingStatus.TRADING_HALT,
    tickWindow.securityId,
    halt.feedType,
    halt.dateTime
from
    TradingHaltVO as halt unidirectional,
    TickWindow as tickWindow
where
    tickWindow.feedType = halt.feedType
and
    tickWindow.tickerId = halt.tickerId;

@Name('TRADING_RESUMED')
@RunTimeOnly()
context TradingStatusContext
insert into
    TradingStatusEventVO
select
    TradingStatus.READY_TO_TRADE,
    tickWindow.securityId,
    halt.feedType,
    halt.dateTime
from
    pattern[every (halt=TradingHaltVO -> (
        AskVO(tickerId=halt.tickerId, feedType=halt.feedType) or
        BidVO(tickerId=halt.tickerId, feedType=halt.feedType) or
        TradeVO(tickerId=halt.tickerId, feedType=halt.feedType)))] unidirectional,
    TickWindow as tickWindow
where
    tickWindow.feedType = halt.feedType
and
    tickWindow.tickerId = halt.tickerId;

@Name('PROPAGATE_TRADING_STATUS_EVENTS')
@Subscriber(className='eventPropagator#propagateTradingStatusEvent')
@Priority(1)
select
    *
from
    TradingStatusEventVO;

