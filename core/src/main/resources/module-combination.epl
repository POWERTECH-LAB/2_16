@Name('COMPONENT_WINDOW')
create window
    ComponentWindow.std:groupwin(componentId).std:lastevent()
as
    (componentId int,
    quantity long,
    securityId int,
    parentSecurityId int,
    dateTime java.util.Date,
    volBid int,
    volAsk int,
    bid java.math.BigDecimal,
    ask java.math.BigDecimal);

@Name('INSERT_INTO_COMPONENT_WINDOW')
insert into
    ComponentWindow
select
    componentId,
    quantity,
    securityId,
    parentSecurityId,
    null as dateTime,
    0 as volBid,
    0 as volAsk,
    null as bid,
    null as ask
from
    InsertComponentEvent;

@Name('DELETE_FROM_COMPONENT_WINDOW')
on
    RemoveComponentEvent as removeComponentEvent
delete from
    ComponentWindow as componentWindow
where
    componentWindow.componentId = removeComponentEvent.componentId;

@Name('UPDATE_COMPONENT_WINDOW')
@Priority(3)
on
    Tick as tick
update
    ComponentWindow as componentWindow
set
    componentWindow.dateTime = tick.dateTime,
    componentWindow.volBid = tick.volBid,
    componentWindow.volAsk = tick.volAsk,
    componentWindow.bid = tick.bid,
    componentWindow.ask = tick.ask
where
    componentWindow.securityId = tick.security.id;

@Name('INSERT_INTO_COMBINATION_TICK')
insert into
    CombinationTick
select
    max(win.dateTime) as dateTime,
    Math.abs(cast(min((case when win.quantity > 0 then win.volBid else win.volAsk end) / Math.abs(win.quantity)) * sum(win.quantity), int)) as volBid,
    Math.abs(cast(min((case when win.quantity > 0 then win.volAsk else win.volBid end) / Math.abs(win.quantity)) * sum(win.quantity), int)) as volAsk,
    RoundUtil.getBigDecimalNullSafe(sum((case when win.quantity > 0 then win.bid.doubleValue() else win.ask.doubleValue() end) * win.quantity) / sum(win.quantity)) as bid,
    RoundUtil.getBigDecimalNullSafe(sum((case when win.quantity > 0 then win.ask.doubleValue() else win.bid.doubleValue() end) * win.quantity) / sum(win.quantity)) as ask,
    last(LookupUtil.getSecurityInclComponentsInitialized(win.parentSecurityId)) as security, // needed to getcomponentCount
    count(win.componentId) as componentCount,
    max(win.dateTime.time) - min(win.dateTime.time) as timeDiff
from
    ComponentWindow as win
where
    win.quantity != 0 // ignore zero-qty components
and
    not win.dateTime is null // ignore new components having null dateTime
group by
    win.parentSecurityId
order by
    win.parentSecurityId;

// filter CombinationTicks (must be done in separate statement due to Esper Bug)
@Name('INSERT_INTO_TICK_FROM_COMPONENT_WINDOW')
insert into
    Tick
select
    dateTime,
    volBid,
    volAsk,
    bid,
    ask,
    security
from
    CombinationTick
where
    componentCount = security.componentCount // total count of non-ignored components must equal component count of the parent
and
    timeDiff < Constants.ONE_HOUR // ignore components older hand an hour;
