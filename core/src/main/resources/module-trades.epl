// ------------------------------OPEN ORDER MANAGEMENT--------------------------------

@Name('INSERT_INTO_ORDER_COMPLETION')
@RunTimeOnly()
insert into
    OrderCompletionVO
select
    currentOrder.intId,
    currentOrder.strategy.name,
    currentOrder.security.id,
    current_timestamp.toDate() as dateTime,
    orderStatus.status as status,
    orderStatus.filledQuantity as filledQuantity,
    orderStatus.remainingQuantity as remainingQuantity,
    sum(transaction.price * transaction.quantity) / sum(transaction.quantity) as avgPrice,
    sum(transaction.grossValue) as grossValue,
    sum(transaction.netValue) as netValue,
    sum(transaction.totalCharges) as totalCharges,
    cast(count(transaction),int) as fills,
    (current_timestamp - orderStatus.`order`.dateTime.toMillisec()) / 1000.0 as executionTime
from
    pattern[every currentOrder=`Order` ->
        (every transaction=Transaction(intOrderId = currentOrder.intId)
        and orderStatus=OrderStatus(`order`.intId = currentOrder.intId, status = Status.EXECUTED or status = Status.CANCELED)
        and not timer:interval(1 day))]
group by
    currentOrder.intId, orderStatus.filledQuantity
having
    sum(Math.abs(transaction.quantity)) = orderStatus.filledQuantity;

@Name('NOTIFY_MISSING_ORDER_REPLY')
@Subscriber(className='ch.algotrader.esper.subscriber.ExceptionSubscriber')
@Condition(key='statement.notifyMissingOrderReply')
@RunTimeOnly()
select
    "missing reply on order: " || currentOrder.toString() as reason
from
    pattern[every currentOrder = `Order`(not (tif=TIF.ATC or tif=TIF.ATO)) -> (timer:interval(misc_orderAckSeconds) and not OrderStatus(`order`.intId = currentOrder.intId))];

@Name('EVICT_EXECUTED_ORDERS')
@Subscriber(className='orderService#evictExecutedOrders')
select
    null
from
    pattern[every timer:at (0, 0, *, *, *)];

// ------------------------------LOGGING / PROPAGATION--------------------------------

@Name('LOG_TRANSACTION_SUMMARY')
@RunTimeOnly()
@Subscriber(className='transactionService#logFillSummary')
select
    fill
from
    pattern [every fill=Fill -> orderStatus=OrderStatus(
        status = Status.EXECUTED or status = Status.CANCELED,
        (not fill.`order`.parentOrder is null and `order`.intId = fill.`order`.parentOrder.intId) or
        (fill.`order`.parentOrder is null and `order`.intId = fill.`order`.intId))];

@Name('PROPAGATE_ORDER_COMPLETION')
@RunTimeOnly()
@Subscriber(className='eventPropagator#propagateOrderCompletion')
select
    *
from
    OrderCompletionVO;
