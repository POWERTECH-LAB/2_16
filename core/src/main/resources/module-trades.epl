@Name('OPEN_ORDER_WINDOW')
create
    window OpenOrderWindow.std:groupwin(security.id, strategy.id).std:lastevent()
as select
    *,
    Status.OPEN as status,
    0L as filledQuantity,
    0L as remainingQuantity
from
    GenericOrder;

@Name('INSERT_INTO_OPEN_ORDER_WINDOW')
@RunTimeOnly()
insert into
    OpenOrderWindow
select
    *,
    Status.OPEN as status,
    0L as filledQuantity,
    quantity as remainingQuantity
from
    GenericOrder;

@Name('UPDATE_OPEN_ORDER_WINDOW')
@RunTimeOnly()
on
    OrderStatus(status != Status.EXECUTED and status != Status.CANCELED) as orderStatus
update
    OpenOrderWindow
set
    status = orderStatus.status,
    filledQuantity = orderStatus.filledQuantity,
    remainingQuantity = orderStatus.remainingQuantity
where
    number = orderStatus.parentOrder.number;

@Name('DELETE_FROM_OPEN_ORDER_WINDOW')
@RunTimeOnly()
on
    OrderStatus(status = Status.EXECUTED or status = Status.CANCELED) as orderStatus
delete from
    OpenOrderWindow as openOrderWindow
where
    orderStatus.parentOrder is null
or
    orderStatus.parentOrder.number = openOrderWindow.number;

@Name('LOG_TRANSACTION_SUMMARY')
@Subscriber(className='com.algoTrader.service.TransactionServiceImpl$LogTransactionSummarySubscriber')
@RunTimeOnly()
select
    fill,
    orderStatus
from
    pattern [every fill=Fill -> orderStatus=OrderStatus(parentOrder.number = fill.parentOrder.number, status = Status.EXECUTED or status = Status.CANCELED)];

@Name('PROPAGATE_ORDER_STATUS')
@Subscriber(className='com.algoTrader.service.OrderService.propagateOrderStatus')
select
    *
from
    OrderStatus;

@Name('PROPAGATE_FILL')
@Priority(1)
@Subscriber(className='com.algoTrader.service.TransactionService.propagateFill')
select
    *
from
    Fill;

@Name('CREATE_TRANSACTION')
@Subscriber(className='com.algoTrader.service.TransactionService.createTransaction')
select
    *
from
    Fill;
