// ------------------------------OPEN ORDER MANAGEMENT--------------------------------

@Name('INSERT_INTO_ORDER_COMPLETION')
@RunTimeOnly()
insert into
    OrderCompletionVO
select
    currentOrder.intId,
    currentOrder.strategy.name,
    current_timestamp.toDate() as dateTime,
    orderStatus.status as status,
    orderStatus.filledQuantity as filledQuantity,
    orderStatus.remainingQuantity as remainingQuantity,
    sum(transaction.price * transaction.quantity) / sum(transaction.quantity) as avgPrice,
    sum(transaction.grossValue) as grossValue,
    sum(transaction.netValue) as netValue,
    sum(transaction.totalCharges) as totalCharges,
    cast(count(transaction),int) as fills,
    (current_timestamp - orderStatus.`order`.dateTime.toMillisec()) / 1000.0 as executionTime
from
    pattern[every currentOrder=`Order` ->
        (every transaction=Transaction(intOrderId = currentOrder.intId)
        and orderStatus=OrderStatus(`order`.intId = currentOrder.intId, status = Status.EXECUTED or status = Status.CANCELED)
        and not timer:interval(1 day))]
group by
    currentOrder.intId, orderStatus.filledQuantity
having
    sum(Math.abs(transaction.quantity)) = orderStatus.filledQuantity;

@Name('NOTIFY_MISSING_ORDER_REPLY')
@Subscriber(className='ch.algotrader.esper.subscriber.ExceptionSubscriber')
@Condition(key='statement.notifyMissingOrderReply')
@RunTimeOnly()
select
    "missing reply on order: " || currentOrder.toString() as reason
from
    pattern[every currentOrder = `Order`(not (tif=TIF.ATC or tif=TIF.ATO)) -> (timer:interval(misc_orderAckSeconds) and not OrderStatus(`order`.intId = currentOrder.intId))];

// ------------------------------ALGO ORDERS--------------------------------

@Name('SEND_INITIAL_ALGO_ORDERS')
@RunTimeOnly
@Subscriber(className='orderService#sendOrders')
select
    currentOrder.getInitialOrders(cast(marketDataWindow.marketDataEvent, ch.algotrader.entity.marketData.TickI))
from
    ch.algotrader.entity.trade.AlgoOrder as currentOrder unidirectional,
    MarketDataWindow as marketDataWindow
where
	marketDataWindow.securityId = currentOrder.security.id
order by
	marketDataWindow.marketDataEvent.dateTime desc
limit
	1;

@Name('INSERT_INTO_ALGO_ORDER_STATUS_SUBMITTED')
@RunTimeOnly()
insert into
    OrderStatus
select
    0L as id,
    current_timestamp.toDate() as dateTime,
    Status.SUBMITTED as status,
    0L as filledQuantity,
    orderExec.remainingQuantity as remainingQuantity,
    `order`.parentOrder.intId as intId,
    0 as sequenceNumber,
    `order`.parentOrder as `order`
from
    OrderStatus(status = Status.SUBMITTED, `order`.parentOrder.algoOrder) as orderStatus unidirectional,
    method:orderService.getStatusByIntId(`order`.parentOrder.intId) as orderExec
where
    orderExec.status = Status.OPEN;

@Name('INSERT_INTO_ALGO_ORDER_STATUS_FROM_FILL')
@RunTimeOnly()
insert into
    OrderStatus
select
    0L as id,
    current_timestamp.toDate() as dateTime,
    case when orderExec.remainingQuantity - fill.quantity > 0 then Status.PARTIALLY_EXECUTED else Status.EXECUTED end as status,
    orderExec.filledQuantity + fill.quantity as filledQuantity,
    orderExec.remainingQuantity - fill.quantity as remainingQuantity,
    `order`.parentOrder.intId as intId,
    0 as sequenceNumber,
    `order`.parentOrder as `order`
from
    Fill(`order`.parentOrder.algoOrder) as fill unidirectional,
    method:orderService.getStatusByIntId(`order`.parentOrder.intId) as orderExec;

// ------------------------------LOGGING / PROPAGATION--------------------------------

@Name('LOG_TRANSACTION_SUMMARY')
@RunTimeOnly()
@Subscriber(className='transactionService#logFillSummary')
select
    fill
from
    pattern [every fill=Fill -> orderStatus=OrderStatus(
        status = Status.EXECUTED or status = Status.CANCELED,
        (not fill.`order`.parentOrder is null and `order`.intId = fill.`order`.parentOrder.intId) or
        (fill.`order`.parentOrder is null and `order`.intId = fill.`order`.intId))];

@Name('PROPAGATE_ORDER_STATUS')
@Subscriber(className='orderService#propagateOrderStatus')
select
    *
from
    OrderStatus;

@Name('PROPAGATE_ORDER_COMPLETION')
@RunTimeOnly()
@Subscriber(className='orderService#propagateOrderCompletion')
select
    *
from
    OrderCompletionVO;

@Name('PROPAGATE_FILL')
@Priority(1)
@Subscriber(className='transactionService#propagateFill')
select
    *
from
    Fill;

@Name('CREATE_TRANSACTION')
@Subscriber(className='transactionService#createTransaction')
select
    *
from
    Fill;
