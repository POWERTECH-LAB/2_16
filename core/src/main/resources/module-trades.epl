// ------------------------------OPEN_ORDER_WINDOW--------------------------------

@Name('OPEN_ORDER_WINDOW')
create
    window OpenOrderWindow.std:groupwin(rootIntId).std:lastevent()
as select
    *,
    Status.OPEN as status,
    0L as filledQuantity,
    0L as remainingQuantity
from
    GenericOrder;

@Name('INSERT_INTO_OPEN_ORDER_WINDOW')
@RunTimeOnly()
insert into
    OpenOrderWindow
select
    *,
    Status.OPEN as status,
    0L as filledQuantity,
    quantity as remainingQuantity
from
    GenericOrder;

@Name('UPDATE_OPEN_ORDER_WINDOW')
@RunTimeOnly()
on
    OrderStatus as orderStatus
update
    OpenOrderWindow  as openOrderWindow
set
    openOrderWindow.status = orderStatus.status,
    openOrderWindow.filledQuantity = orderStatus.filledQuantity,
    openOrderWindow.remainingQuantity = orderStatus.remainingQuantity,
    openOrderWindow.intId = case when orderStatus.intId is not null then orderStatus.intId else orderStatus.ord.intId end,
    openOrderWindow.extId = case when orderStatus.extId is not null then orderStatus.extId else orderStatus.ord.extId end
where
    openOrderWindow.intId = orderStatus.ord.intId;

@Name('DELETE_FROM_OPEN_ORDER_WINDOW')
@RunTimeOnly()
on
    pattern[every orderStatus=OrderStatus(status = Status.EXECUTED or status = Status.CANCELED) -> timer:interval(1 sec)]
delete from
    OpenOrderWindow as openOrderWindow
where
    orderStatus.ord is null
or
    orderStatus.ord.intId = openOrderWindow.intId
or
    orderStatus.intId = openOrderWindow.intId;

@Name('NOTIFY_MISSING_ORDER_REPLY')
@Subscriber(className='ch.algotrader.esper.subscriber.ExceptionSubscriber')
@RunTimeOnly()
select
    "missing reply on order: " || currentOrder.toString() as reason
from
    pattern[every currentOrder=GenericOrder -> (timer:interval(1 sec) and not OrderStatus(ord.intId = currentOrder.intId))];

// ------------------------------ALGO ORDERS--------------------------------

@Name('SEND_INITIAL_ALGO_ORDERS')
@RunTimeOnly
@Subscriber(className='ch.algotrader.service.OrderService.sendOrders')
select
    currentOrder.getInitialOrders()
from
    ch.algotrader.entity.trade.AlgoOrder as currentOrder;

@Name('INSERT_INTO_ALGO_ORDER_STATUS_SUBMITTED')
@RunTimeOnly()
insert into
    OrderStatus
select
    Status.SUBMITTED as status,
    0 as filledQuantity,
    openOrderWindow.remainingQuantity as remainingQuantity,
    ord.parentOrder as ord
from
    OrderStatus(status = Status.SUBMITTED, ord.parentOrder.algoOrder) as orderStatus unidirectional,
    OpenOrderWindow(status = Status.OPEN) as openOrderWindow
where
    openOrderWindow.intId = orderStatus.ord.parentOrder.intId;

@Name('INSERT_INTO_ALGO_ORDER_STATUS_FROM_FILL')
@RunTimeOnly()
insert into
    OrderStatus
select
    case when openOrderWindow.remainingQuantity - fill.quantity > 0 then Status.PARTIALLY_EXECUTED else Status.EXECUTED end as status,
    openOrderWindow.filledQuantity + fill.quantity as filledQuantity,
    openOrderWindow.remainingQuantity - fill.quantity as remainingQuantity,
    ord.parentOrder as ord
from
    Fill(ord.parentOrder.algoOrder) as fill unidirectional,
    OpenOrderWindow() as openOrderWindow
where
    openOrderWindow.intId = fill.ord.parentOrder.intId;

@Name('ALGO_ORDER_DONE')
@RunTimeOnly
@Subscriber(className='ch.algotrader.esper.subscriber.VoidSubscriber')
select
    cast(ord, ch.algotrader.entity.trade.AlgoOrder).done()
from
    OrderStatus(status = Status.EXECUTED or status = Status.CANCELED, ord.algoOrder);

// ------------------------------LOGGING / PROPAGATION--------------------------------

@Name('LOG_TRANSACTION_SUMMARY')
@RunTimeOnly()
@Subscriber(className='ch.algotrader.service.TransactionServiceImpl$LogTransactionSummarySubscriber')
select
    fill,
    orderStatus
from
    pattern [every fill=Fill -> orderStatus=OrderStatus(
        status = Status.EXECUTED or status = Status.CANCELED,
        (not fill.ord.parentOrder is null and ord.intId = fill.ord.parentOrder.intId) or
        (fill.ord.parentOrder is null and ord.intId = fill.ord.intId))];

@Name('PROPAGATE_ORDER_STATUS')
@RunTimeOnly()
@Subscriber(className='ch.algotrader.service.OrderService.propagateOrderStatus')
select
    *
from
    OrderStatus;

@Name('PROPAGATE_FILL')
@Priority(1)
@RunTimeOnly()
@Subscriber(className='ch.algotrader.service.TransactionService.propagateFill')
select
    *
from
    Fill;

@Name('CREATE_TRANSACTION')
@RunTimeOnly()
@Subscriber(className='ch.algotrader.service.TransactionServiceImpl$CreateTransactionSubscriber')
select
    *
from
    Fill;
