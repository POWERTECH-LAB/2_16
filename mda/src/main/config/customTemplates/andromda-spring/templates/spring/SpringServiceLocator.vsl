## AlgoTrader: 15187
## line 16: implements CommonServiceLocator
## line 96 - 99: define several BEAN_REFERENCE_LOCATIONs
## line 130 - 136: add isInitialized
## line 158: use getBean (by class)
## line 174 - 203: add getService (by class) & getConfiguration
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceLocator.vsl in andromda-spring-cartridge.
//
#set ($generatedFile = "${serviceLocatorName}.java")
#if($stringUtils.isNotBlank($springTypesPackage))
package $springTypesPackage;
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Locates and provides all available application services.
 */
public class $serviceLocatorName
{
    private ${serviceLocatorName}()
    {
        // shouldn't be instantiated
    }

    /**
	 * The default bean reference factory ID, referencing beanRefFactory.
	 */
	private static final String DEFAULT_BEAN_REFERENCE_ID = "beanRefFactory";

    /**
     * The shared instance of this ${serviceLocatorName}.
     */
    private static final ${serviceLocatorName} instance = new ${serviceLocatorName}();

    /**
     * Gets the shared instance of this Class
     *
     * @return the shared service locator instance.
     */
    public static final $serviceLocatorName instance()
    {
        return instance;
    }

    /**
     * The bean factory reference instance.
     */
    private org.springframework.beans.factory.access.BeanFactoryReference beanFactoryReference;

    /**
     * The bean factory reference location.
     */
    private String beanFactoryReferenceLocation;

    /**
     * Initializes the Spring application context from
     * the given <code>beanFactoryReferenceLocation</code>.  If <code>null</code>
     * is specified for the <code>beanFactoryReferenceLocation</code>
     * then the default application context will be used.
     *
     * @param beanFactoryReferenceLocationIn the location of the beanRefFactory reference.
     */
    public synchronized void init(final String beanFactoryReferenceLocationIn)
    {
        this.beanFactoryReferenceLocation = beanFactoryReferenceLocationIn;
        this.beanFactoryReference = null;
    }

#if($stringUtils.isNotBlank($serviceLocatorDefaultFactoryId))
#set ($factoryId = $serviceLocatorDefaultFactoryId)
#elseif($ejbsEnabled)
#set ($factoryId = $beanRefFactoryEjbId)
#else
#set ($factoryId = $beanRefFactoryId)
#end

    public static final String LOCAL_BEAN_REFERENCE_LOCATION = "Local";
	public static final String SINGLE_BEAN_REFERENCE_LOCATION = "Single";
    public static final String SERVER_BEAN_REFERENCE_LOCATION = "Server";
    public static final String CLIENT_BEAN_REFERENCE_LOCATION = "Client";
    public static final String SIMULATION_BEAN_REFERENCE_LOCATION = "Simulation";    

    /**
     * Gets the Spring ApplicationContext.
     * @return beanFactoryReference.getFactory()
     */
    public synchronized org.springframework.context.ApplicationContext getContext()
    {
        if (this.beanFactoryReference == null)
        {
            if (this.beanFactoryReferenceLocation == null)
            {
                this.beanFactoryReferenceLocation = SERVER_BEAN_REFERENCE_LOCATION;
            }
			String location = DEFAULT_BEAN_REFERENCE_ID + this.beanFactoryReferenceLocation + ".xml";
            org.springframework.beans.factory.access.BeanFactoryLocator beanFactoryLocator = org.springframework.context.access.ContextSingletonBeanFactoryLocator.getInstance(location);
            this.beanFactoryReference = beanFactoryLocator.useBeanFactory(DEFAULT_BEAN_REFERENCE_ID);
            
            // set the profile
            org.springframework.context.ConfigurableApplicationContext applicationContext = (org.springframework.context.ConfigurableApplicationContext) this.beanFactoryReference.getFactory();
            applicationContext.getEnvironment().addActiveProfile(this.beanFactoryReferenceLocation.toLowerCase());            
        }
        return (org.springframework.context.ApplicationContext)this.beanFactoryReference.getFactory();
    }

    /**
     * checks weather the Spring application context has been initialized
     */
    public boolean isInitialized() 
    {
        return this.beanFactoryReference != null;
    }
    
    /**
     * Shuts down the ServiceLocator and releases any used resources.
     */
    public synchronized void shutdown()
    {
        ((org.springframework.context.support.AbstractApplicationContext)this.getContext()).close();
        if (this.beanFactoryReference != null)
        {
            this.beanFactoryReference.release();
            this.beanFactoryReference = null;
        }
    }
#foreach ($service in $services)

    /**
     * Gets an instance of {@link $service.fullyQualifiedName}.
     * @return ${service.name} from getContext().getBean("$service.beanName")
     */
    public final $service.fullyQualifiedName get${service.name}()
    {
        return getContext().getBean("$service.beanName",${service.fullyQualifiedName}.class);
    }
#end
#foreach ($manageable in $manageables)

    /**
     * Gets a manageable instance of {@link $manageable.fullyQualifiedManageableServiceName}.
     * @return ${manageable.name} from getContext().getBean("$manageable.manageableServiceName")
     */
    public final $manageable.fullyQualifiedManageableServiceName get${manageable.manageableServiceName}()
    {
        return ($manageable.fullyQualifiedManageableServiceName)
            getContext().getBean("$manageable.manageableServiceName");
    }
#end

    /**
     * Gets the Configuration
     * @return getContext().getBean("configuration")
     */
    public final ch.algotrader.util.spring.Configuration getConfiguration() 
    {
        return getContext().getBean("configuration", ch.algotrader.util.spring.Configuration.class);
    }
	
    /**
     * Gets an instance of the given service.
     * @param serviceName
     * @param clazz 
     * @return getContext().getBean(serviceName, clazz)
     */
    public final <T> T getService(String serviceName, Class<T> clazz) 
    {
        return getContext().getBean(serviceName, clazz);
    }
	
    /**
     * Gets an instance of the given service.
     * @param serviceName
     * @return getContext().getBean(serviceName)
     */
    public final Object getService(String serviceName) 
    {
        return getContext().getBean(serviceName);
    }	

    /**
     * Checks wheather the the given service exists
     * @param serviceName
     */
	public final boolean containsService(String serviceName)
    {
		return getContext().containsBean(serviceName);
    }

    /**
     * gets all services of the given type
     * @param clazz 
     */
	public final <T> java.util.Collection<T> getServices(Class<T> clazz) 
	{
		java.util.Map<String, T> serviceMap = getContext().getBeansOfType(clazz);
		java.util.Collection<T> services = new java.util.HashSet<T>();
		for (String serviceName : serviceMap.keySet()) {

			// wo only want the proxys from applicationContext.xml
			if (!serviceName.startsWith("ch.algotrader.service")) {
				services.add(serviceMap.get(serviceName));
			}
		}
		return services;
	}	
}