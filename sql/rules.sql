-- MySQL dump 10.13  Distrib 5.1.48, for Win64 (unknown)
--
-- Host: localhost    Database: algotrader
-- ------------------------------------------------------
-- Server version    5.1.48-community-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Dumping data for table `rule`
--

LOCK TABLES `rule` WRITE;
/*!40000 ALTER TABLE `rule` DISABLE KEYS */;
INSERT INTO `rule` VALUES (1,'RETRIEVE_TICKS',0,'every timer:at (*, 9:17, *, *, 1:5)',NULL,'RetrieveTickListener','',NULL),(2,'EXECUTE_DAILY_JOBS',0,'every timer:at (0, 6, *, *, 1:5)',NULL,'ExecuteDailyJobsListener','',NULL),(3,'CREATE_PORTFOLIO_VALUE',0,'insert into Portfolio\r\nselect current_timestamp() as timestamp,\r\nLookupUtil.getPortfolioValue() as value,\r\ncashTransaction\r\nfrom pattern[every(timer:at (0, 9:17, *, *, 1:5) or cashTransaction=Transaction(type=TransactionType.CREDIT or type=TransactionType.DEBIT or type=TransactionType.INTREST or type=TransactionType.FEES))]','PrintPortfolioValueSubscriber',NULL,'',NULL),(4,'CREATE_MONTHLY_PERFORMANCE',0,'insert into MonthlyPerformance\r\nselect DateUtil.toDate(current_timestamp()) as date,\r\nportfolio.value.netLiqValueDouble / prior(1, portfolio.value.netLiqValueDouble) - 1 as value\r\nfrom pattern[every timer:at (0, 18, lastweekday, *, *) -> portfolio=Portfolio]\r\nhaving prior(1, portfolio.value.netLiqValue) != null and \r\nportfolio.value.netLiqValue != prior(1, portfolio.value.netLiqValue)\r\n',NULL,NULL,'',NULL),(10,'GET_LAST_TICK',10,'select tick.security.id as securityId, tick.* as tick \r\nfrom Tick.std:groupby(security.id).win:time(7 days).win:length(1) as tick',NULL,NULL,'',NULL),(11,'PRINT_TICK',9,'select * from Tick\r\n','PrintTickSubscriber',NULL,'',NULL),(12,'SIMULATE_DUMMY_SECURITIES',8,'insert into Tick\r\nselect DateUtil.toDate(current_timestamp()) as dateTime,\r\nRoundUtil.getBigDecimal(StockOptionUtil.getOptionPrice(option, indexTick.currentValueDouble, volaTick.currentValueDouble / 100)) as last,\r\nDateUtil.toDate(current_timestamp()) as lastDateTime,\r\n0 as vol, 0 as volBid, 0 as volAsk, cast(0.0, BigDecimal) as bid, cast(0.0, BigDecimal) as ask, 0 as openIntrest, cast(0.0, BigDecimal) as settlement,\r\noption as security\r\nfrom pattern [every (indexTick=Tick(security.isin = var_isin) -> volaTick=Tick(security.id=indexTick.security.volatility.id))],\r\nmethod:LookupUtil.getStockOptionsOnWatchlist() as option \r\nwhere option.underlaying.id = indexTick.security.id\r\nand var_simulation=true',NULL,NULL,'',NULL),(13,'EXPIRE_POSITION',7,'select option.position.id as positionId,\r\nindexTick.security.id,\r\nindexTick.currentValue\r\nfrom Tick(security.isin = var_isin) as indexTick,\r\nmethod:LookupUtil.getStockOptionsOnWatchlist() as option \r\nwhere option.expiration.time < current_timestamp()\r\nand option.position != null\r\nand option.position.quantity != 0','ExpirePositionSubscriber',NULL,'',NULL),(14,'CLOSE_POSITION',6,'select\r\ntick.security.position.id\r\nfrom Tick as tick\r\nwhere tick.security.position.quantity != 0\r\nand tick.security.position.exitValue != null\r\nand tick.currentValue  >= tick.security.position.exitValue','ClosePositionSubscriber',NULL,'',NULL),(15,'CREATE_SAR',5,'insert into ExitValue\r\nselect optionTick.security as security,\r\nexitValue.value + (1-Math.pow(1.0  - var_alpha, 1.0 / var_events_per_day)) * (optionTick.currentValueDouble - exitValue.value) as value\r\nfrom pattern [every exitValue=ExitValue -> optionTick=Tick(security.id=exitValue.security.id) and not ExitValue(security.id=exitValue.security.id)]\r\nwhere optionTick.security.position != null \r\nand optionTick.security.position.quantity != 0\r\nand optionTick.currentValueDouble != 0','SetExitValueSubscriber',NULL,'',NULL),(16,'CREATE_EXIT_VALUE',4,'insert into ExitValue\r\nselect optionTick.security as security,\r\nexitValue.value as value\r\nfrom pattern [every (indexTick=Tick(security.isin = var_isin) -> volaTick=Tick(security.id=indexTick.security.volatility.id)) -> every optionTick=Tick(security.underlaying.id=indexTick.security.id) and not Tick(security.isin = var_isin)],\r\nmethod:StockOptionUtil.getExitValue(optionTick.security, indexTick.currentValueDouble, volaTick.currentValueDouble / 100) as exitValue\r\nwhere exitValue.value < optionTick.security.position.exitValue\r\nand optionTick.security.position != null \r\nand optionTick.security.position.quantity != 0\r\nand optionTick.currentValueDouble != 0','SetExitValueSubscriber',NULL,'',NULL),(17,'ROLL_POSITION',3,'select \r\noptionTick.security.position.id,\r\nindexTick.security.id,\r\nindexTick.currentValue\r\nfrom pattern [every indexTick=Tick(security.isin = var_isin) -> every optionTick=Tick(security.underlaying.id=indexTick.security.id) and not Tick(security.isin = var_isin)]\r\nwhere StockOptionUtil.isDeltaTooLow(optionTick.security, optionTick.currentValueDouble, indexTick.currentValueDouble)\r\nand optionTick.security.position != null\r\nand optionTick.security.position.quantity != 0','RollPositionSubscriber',NULL,'',NULL),(18,'OPEN_POSITION',2,'select stockOptionTick.security.id,\r\nstockOptionTick.currentValue,\r\nindexTick.currentValue,\r\nstockOptionTick.settlement,\r\nindexTick.settlement,\r\nvolaTick.currentValueDouble / 100\r\nfrom pattern [(indexTick=Tick(security.isin = var_isin) -> volaTick=Tick(security.id=indexTick.security.volatility.id) -> stockOptionTick=Tick(security.id = ?,security.underlaying.id=indexTick.security.id))]','OpenPositionSubscriber',NULL,'\0',NULL),(19,'CREATE_K_FAST',1,'insert into KFast\r\nselect security,\r\n(select (last(currentValueDouble) - min(currentValueDouble))/(max(currentValueDouble) - min(currentValueDouble)) as call\r\nfrom Tick(security.isin = var_isin).win:length(cast(var_call_k_fast_days * var_events_per_day, int))),\r\n(select (last(currentValueDouble) - min(currentValueDouble))/(max(currentValueDouble) - min(currentValueDouble)) as put\r\nfrom Tick(security.isin = var_isin).win:length(cast(var_put_k_fast_days * var_events_per_day, int)))\r\nfrom Tick(security.isin = var_isin)\r\nhaving count(id) >= cast(Math.max(var_call_k_fast_days,var_put_k_fast_days) * var_events_per_day ,int)',NULL,NULL,'',NULL),(20,'CREATE_END_OF_DAY_TICK',0,'insert into EndOfDayTick\r\nselect tick.*\r\nfrom pattern [every tick=Tick(security.isin = var_isin) -> (timer:at (0, 18, *, *, 1:5) and not Tick(security.isin = var_isin))]',NULL,NULL,'',NULL),(21,'CREATE_DAILY_CHANGE',0,'insert into DailyChange\r\nselect security,\r\ncase when currentValueDouble > prior(1, currentValueDouble) then currentValueDouble - prior(1, currentValueDouble) else 0.0 end as uValue,\r\ncase when currentValueDouble < prior(1, currentValueDouble) then prior(1, currentValueDouble) - currentValueDouble else 0.0 end as dValue\r\nfrom EndOfDayTick\r\n\r\n\r\n',NULL,NULL,'',NULL),(23,'CREATE_MACD',0,'insert into MACD\r\nselect security,\r\nema(currentValueDouble,var_macd_fast) - ema(currentValueDouble,var_macd_slow) as value\r\nfrom EndOfDayTick\r\nhaving count(*) > Math.round(var_macd_slow * var_macd_weight)\r\n',NULL,NULL,'',NULL),(31,'CREATE_K_SLOW',0,'insert into KSlow\r\nselect security as security,\r\n(select avg(call) from KFast.win:length(cast(var_call_k_slow_days * var_events_per_day, int))) as call,\r\n(select avg(put) from KFast.win:length(cast(var_put_k_slow_days * var_events_per_day, int))) as put\r\nfrom KFast\r\nhaving count(security) >= cast(Math.max(var_call_k_slow_days,var_put_k_slow_days) * var_events_per_day ,int)',NULL,NULL,'',NULL),(32,'CREATE_D_SLOW',0,'insert into DSlow\r\nselect security,\r\n(select avg(call) from KSlow.win:length(cast(var_call_d_slow_days * var_events_per_day,int))) as call,\r\n(select avg(put) from KSlow.win:length(cast(var_put_d_slow_days * var_events_per_day,int))) as put\r\nfrom KSlow\r\nhaving count(security) >= cast(Math.max(var_call_d_slow_days,var_put_d_slow_days) * var_events_per_day ,int)',NULL,NULL,'',NULL),(33,'GET_BUY_SIGNAL',0,'select \r\nindexTick.security.id,\r\nindexTick.currentValue\r\nfrom pattern [every (indexTick=Tick(security.isin=var_isin) -> k=KSlow -> d=DSlow)]\r\nwhere k.put > d.put\r\nand prior(1, k.put) < prior(1, d.put)\r\nand d.put < var_put_trigger\r\nand var_put_enabled = true','BuySignalSubscriber',NULL,'',NULL),(34,'GET_SELL_SIGNAL',0,'select \r\nindexTick.security.id,\r\nindexTick.currentValue\r\nfrom pattern [every (indexTick=Tick(security.isin=var_isin) -> k=KSlow -> d=DSlow)]\r\nwhere k.call < d.call\r\nand prior(1, k.call) > prior(1, d.call)\r\nand d.call > var_call_trigger\r\nand var_call_enabled = true','SellSignalSubscriber',NULL,'',NULL),(35,'PRINT_STOCHASTIC',0,'select kFast,\r\nkSlow,\r\ndSlow\r\nfrom pattern [every (kFast=KFast -> kSlow=KSlow -> dSlow=DSlow)]','PrintStochasticSubscriber',NULL,'',NULL),(36,'CREATE_MACD_SIGNAL',0,'insert into MACD_Signal\r\nselect security,\r\nvalue as macd,\r\nema(value,var_macd_signal) as signal\r\nfrom MACD\r\nhaving count(*) > Math.round(var_macd_signal * var_macd_weight)',NULL,NULL,'',NULL),(37,'SET_TREND',0,'select security.id as underlayingId,\r\ncase when macd > signal then true else false end as bullish\r\nfrom MACD_Signal\r\nwhere ((select last(size) from MACD_Signal.std:size()) = 1) or\r\n(macd > signal and prior(1,macd) <= prior(1,signal)) or\r\n(macd < signal and prior(1,macd) >= prior(1,signal))\r\n','TrendSubscriber',NULL,'',NULL),(38,'PRINT_MACD',0,'select security,\r\nmacd,\r\nsignal\r\nfrom MACD_Signal','PrintMACDSubscriber',NULL,'',NULL),(40,'CREATE_INTERPOLATION',0,'insert into Interpolation\r\nselect Math.exp(linest.YIntercept) as a, \r\nlinest.slope as b, \r\nMath.pow(correl.correlation,2) as r \r\nfrom Transaction.win:keepall().stat:linest(current_timestamp() / 31536000000, Math.log(account.netLiqValueDouble)) as linest, \r\nTransaction.win:keepall().stat:correl(current_timestamp() / 31536000000, Math.log(account.netLiqValueDouble)) as correl',NULL,NULL,'',NULL),(41,'CREATE_PERFORMANCE_KEYS',2,'insert into PerformanceKeys\r\nselect uni.datapoints as n, \r\nuni.average as avgM,\r\nuni.stddev as stdM, \r\nuni.average * 12 as avgY,\r\nuni.stddev * Math.sqrt(12) as stdY,\r\n(uni.average * 12 - var_intrest) / (uni.stddev * Math.sqrt(12)) as sharpRatio\r\nfrom MonthlyPerformance.win:keepall().stat:uni(value) as uni',NULL,NULL,'',NULL),(42,'KEEP_MONTHLY_PERFORMANCE',3,'select *\r\nfrom MonthlyPerformance.win:keepall()',NULL,NULL,'',NULL),(43,'CREATE_DRAW_DOWN',0,'insert into DrawDown\r\nselect 1 - portfolio.value.netLiqValueDouble / max(portfolio.value.netLiqValueDouble) as amount,\r\ncase when portfolio.value.netLiqValue = max(portfolio.value.netLiqValue) then DrawDownUtil.resetDrawDownPeriod() else DrawDownUtil.increaseDrawDownPeriod(current_timestamp - prior(1, portfolio.timestamp)) end as period\r\nfrom Portfolio as portfolio',NULL,NULL,'',NULL),(44,'CREATE_MAX_DRAW_DOWN',0,'insert into MaxDrawDown\r\nselect max(drawDown.amount) as amount,\r\nmax(drawDown.period) as period\r\nfrom DrawDown as drawDown',NULL,NULL,'',NULL),(50,'PROCESS_PREARRANGED_ORDERS',0,'select * from PrearrangedOrder','RerunOrderSubscriber',NULL,'',NULL);
/*!40000 ALTER TABLE `rule` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2010-10-11 16:21:59
