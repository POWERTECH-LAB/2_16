<?xml version="1.0"?>
<mysqldump xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<database name="algotrader">
    <table_data name="rule">
    <row>
        <field name="id">1</field>
        <field name="NAME">RETRIEVE_TICKS</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">every timer:at (*, 9:17, *, *, 1:5)</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS">RetrieveTickListener</field>
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">2</field>
        <field name="NAME">EXECUTE_DAILY_JOBS</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">every timer:at (0, 6, *, *, 1:5)</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS">ExecuteDailyJobsListener</field>
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">3</field>
        <field name="NAME">CREATE_PORTFOLIO_VALUE</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into Portfolio
select current_timestamp() as timestamp,
LookupUtil.getPortfolioValue() as value,
cashTransaction
from pattern[every(timer:at (0, 9:17, *, *, 1:5) or cashTransaction=Transaction(type=TransactionType.CREDIT or type=TransactionType.DEBIT or type=TransactionType.INTREST or type=TransactionType.FEES))]</field>
        <field name="SUBSCRIBER">PrintPortfolioValueSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">4</field>
        <field name="NAME">CREATE_MONTHLY_PERFORMANCE</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into MonthlyPerformance
select DateUtil.toDate(current_timestamp()) as date,
portfolio.value.netLiqValueDouble / prior(1, portfolio.value.netLiqValueDouble) - 1 as value
from pattern[every timer:at (0, 18, lastweekday, *, *) -&gt; portfolio=Portfolio]
having prior(1, portfolio.value.netLiqValue) != null and
portfolio.value.netLiqValue != prior(1, portfolio.value.netLiqValue)
</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">10</field>
        <field name="NAME">GET_LAST_TICK</field>
        <field name="PRIORITY">10</field>
        <field name="DEFINITION">select tick.security.id as securityId, tick.* as tick
from Tick.std:groupby(security.id).win:time(7 days).win:length(1) as tick</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">11</field>
        <field name="NAME">PRINT_TICK</field>
        <field name="PRIORITY">9</field>
        <field name="DEFINITION">select * from Tick
</field>
        <field name="SUBSCRIBER">PrintTickSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">12</field>
        <field name="NAME">SIMULATE_DUMMY_SECURITIES</field>
        <field name="PRIORITY">8</field>
        <field name="DEFINITION">insert into Tick
select DateUtil.toDate(current_timestamp()) as dateTime,
RoundUtil.getBigDecimal(StockOptionUtil.getOptionPrice(option, indexTick.currentValueDouble, volaTick.currentValueDouble / 100)) as last,
DateUtil.toDate(current_timestamp()) as lastDateTime,
0 as vol, 0 as volBid, 0 as volAsk, cast(0.0, BigDecimal) as bid, cast(0.0, BigDecimal) as ask, 0 as openIntrest, cast(0.0, BigDecimal) as settlement,
option as security
from pattern [every (indexTick=Tick(security.isin = var_isin) -&gt; volaTick=Tick(security.id=indexTick.security.volatility.id))],
method:LookupUtil.getStockOptionsOnWatchlist() as option
where option.underlaying.id = indexTick.security.id
and var_simulation=true</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">13</field>
        <field name="NAME">EXPIRE_POSITION</field>
        <field name="PRIORITY">7</field>
        <field name="DEFINITION">select option.position.id as positionId,
indexTick.security.id,
indexTick.currentValue
from Tick(security.isin = var_isin) as indexTick,
method:LookupUtil.getStockOptionsOnWatchlist() as option
where option.expiration.time &lt; current_timestamp()
and option.position != null
and option.position.quantity != 0</field>
        <field name="SUBSCRIBER">ExpirePositionSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">14</field>
        <field name="NAME">CLOSE_POSITION</field>
        <field name="PRIORITY">6</field>
        <field name="DEFINITION">select
tick.security.position.id
from Tick as tick
where tick.security.position.quantity != 0
and tick.security.position.exitValue != null
and tick.currentValue  &gt;= tick.security.position.exitValue</field>
        <field name="SUBSCRIBER">ClosePositionSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">15</field>
        <field name="NAME">CREATE_SAR</field>
        <field name="PRIORITY">5</field>
        <field name="DEFINITION">insert into ExitValue
select optionTick.security as security,
exitValue.value + (1-Math.pow(1.0  - var_alpha, 1.0 / var_events_per_day)) * (optionTick.currentValueDouble - exitValue.value) as value
from pattern [every exitValue=ExitValue -&gt; optionTick=Tick(security.id=exitValue.security.id) and not ExitValue(security.id=exitValue.security.id)]
where optionTick.security.position != null
and optionTick.security.position.quantity != 0
and optionTick.currentValueDouble != 0</field>
        <field name="SUBSCRIBER">SetExitValueSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">16</field>
        <field name="NAME">CREATE_EXIT_VALUE</field>
        <field name="PRIORITY">4</field>
        <field name="DEFINITION">insert into ExitValue
select optionTick.security as security,
exitValue.value as value
from pattern [every (indexTick=Tick(security.isin = var_isin) -&gt; volaTick=Tick(security.id=indexTick.security.volatility.id)) -&gt; every optionTick=Tick(security.underlaying.id=indexTick.security.id) and not Tick(security.isin = var_isin)],
method:StockOptionUtil.getExitValue(optionTick.security, indexTick.currentValueDouble, volaTick.currentValueDouble / 100) as exitValue
where exitValue.value &lt; optionTick.security.position.exitValue
and optionTick.security.position != null
and optionTick.security.position.quantity != 0
and optionTick.currentValueDouble != 0</field>
        <field name="SUBSCRIBER">SetExitValueSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">17</field>
        <field name="NAME">ROLL_POSITION</field>
        <field name="PRIORITY">3</field>
        <field name="DEFINITION">select
optionTick.security.position.id,
indexTick.security.id,
indexTick.currentValue
from pattern [every indexTick=Tick(security.isin = var_isin) -&gt; every optionTick=Tick(security.underlaying.id=indexTick.security.id) and not Tick(security.isin = var_isin)]
where StockOptionUtil.isDeltaTooLow(optionTick.security, optionTick.currentValueDouble, indexTick.currentValueDouble)
and optionTick.security.position != null
and optionTick.security.position.quantity != 0</field>
        <field name="SUBSCRIBER">RollPositionSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">18</field>
        <field name="NAME">OPEN_POSITION</field>
        <field name="PRIORITY">2</field>
        <field name="DEFINITION">select stockOptionTick.security.id,
stockOptionTick.currentValue,
indexTick.currentValue,
stockOptionTick.settlement,
indexTick.settlement,
volaTick.currentValueDouble / 100
from pattern [(indexTick=Tick(security.isin = var_isin) -&gt; volaTick=Tick(security.id=indexTick.security.volatility.id) -&gt; stockOptionTick=Tick(security.id = ?,security.underlaying.id=indexTick.security.id))]</field>
        <field name="SUBSCRIBER">OpenPositionSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">00</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">19</field>
        <field name="NAME">CREATE_K_FAST</field>
        <field name="PRIORITY">1</field>
        <field name="DEFINITION">insert into KFast
select security,
(select (last(currentValueDouble) - min(currentValueDouble))/(max(currentValueDouble) - min(currentValueDouble)) as call
from Tick(security.isin = var_isin).win:length(cast(var_call_k_fast_days * var_events_per_day, int))),
(select (last(currentValueDouble) - min(currentValueDouble))/(max(currentValueDouble) - min(currentValueDouble)) as put
from Tick(security.isin = var_isin).win:length(cast(var_put_k_fast_days * var_events_per_day, int)))
from Tick(security.isin = var_isin)
having count(id) &gt;= cast(Math.max(var_call_k_fast_days,var_put_k_fast_days) * var_events_per_day ,int)</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">20</field>
        <field name="NAME">CREATE_END_OF_DAY_TICK</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into EndOfDayTick
select tick.*
from pattern [every tick=Tick(security.isin = var_isin) -&gt; (timer:at (0, 18, *, *, 1:5) and not Tick(security.isin = var_isin))]</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">21</field>
        <field name="NAME">CREATE_DAILY_CHANGE</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into DailyChange
select security,
case when currentValueDouble &gt; prior(1, currentValueDouble) then currentValueDouble - prior(1, currentValueDouble) else 0.0 end as uValue,
case when currentValueDouble &lt; prior(1, currentValueDouble) then prior(1, currentValueDouble) - currentValueDouble else 0.0 end as dValue
from EndOfDayTick


</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">23</field>
        <field name="NAME">CREATE_MACD</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into MACD
select security,
ema(currentValueDouble,var_macd_fast) - ema(currentValueDouble,var_macd_slow) as value
from EndOfDayTick
having count(*) &gt; Math.round(var_macd_slow * var_macd_weight)
</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">31</field>
        <field name="NAME">CREATE_K_SLOW</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into KSlow
select security as security,
(select avg(call) from KFast.win:length(cast(var_call_k_slow_days * var_events_per_day, int))) as call,
(select avg(put) from KFast.win:length(cast(var_put_k_slow_days * var_events_per_day, int))) as put
from KFast
having count(security) &gt;= cast(Math.max(var_call_k_slow_days,var_put_k_slow_days) * var_events_per_day ,int)</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">32</field>
        <field name="NAME">CREATE_D_SLOW</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into DSlow
select security,
(select avg(call) from KSlow.win:length(cast(var_call_d_slow_days * var_events_per_day,int))) as call,
(select avg(put) from KSlow.win:length(cast(var_put_d_slow_days * var_events_per_day,int))) as put
from KSlow
having count(security) &gt;= cast(Math.max(var_call_d_slow_days,var_put_d_slow_days) * var_events_per_day ,int)</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">33</field>
        <field name="NAME">GET_BUY_SIGNAL</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">select
indexTick.security.id,
indexTick.currentValue
from pattern [every (indexTick=Tick(security.isin=var_isin) -&gt; k=KSlow -&gt; d=DSlow)]
where k.put &gt; d.put
and prior(1, k.put) &lt; prior(1, d.put)
and d.put &lt; var_put_trigger
and var_put_enabled = true</field>
        <field name="SUBSCRIBER">BuySignalSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">34</field>
        <field name="NAME">GET_SELL_SIGNAL</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">select
indexTick.security.id,
indexTick.currentValue
from pattern [every (indexTick=Tick(security.isin=var_isin) -&gt; k=KSlow -&gt; d=DSlow)]
where k.call &lt; d.call
and prior(1, k.call) &gt; prior(1, d.call)
and d.call &gt; var_call_trigger
and var_call_enabled = true</field>
        <field name="SUBSCRIBER">SellSignalSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">35</field>
        <field name="NAME">PRINT_STOCHASTIC</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">select kFast,
kSlow,
dSlow
from pattern [every (kFast=KFast -&gt; kSlow=KSlow -&gt; dSlow=DSlow)]</field>
        <field name="SUBSCRIBER">PrintStochasticSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">36</field>
        <field name="NAME">CREATE_MACD_SIGNAL</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into MACD_Signal
select security,
value as macd,
ema(value,var_macd_signal) as signal
from MACD
having count(*) &gt; Math.round(var_macd_signal * var_macd_weight)</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">37</field>
        <field name="NAME">SET_TREND</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">select security.id as underlayingId,
case when macd &gt; signal then true else false end as bullish
from MACD_Signal
where ((select last(size) from MACD_Signal.std:size()) = 1) or
(macd &gt; signal and prior(1,macd) &lt;= prior(1,signal)) or
(macd &lt; signal and prior(1,macd) &gt;= prior(1,signal))
</field>
        <field name="SUBSCRIBER">TrendSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">38</field>
        <field name="NAME">PRINT_MACD</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">select security,
macd,
signal
from MACD_Signal</field>
        <field name="SUBSCRIBER">PrintMACDSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">40</field>
        <field name="NAME">CREATE_INTERPOLATION</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into Interpolation
select Math.exp(linest.YIntercept) as a,
linest.slope as b,
Math.pow(correl.correlation,2) as r
from Transaction.win:keepall().stat:linest(current_timestamp() / 31536000000, Math.log(account.netLiqValueDouble)) as linest,
Transaction.win:keepall().stat:correl(current_timestamp() / 31536000000, Math.log(account.netLiqValueDouble)) as correl</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">41</field>
        <field name="NAME">CREATE_PERFORMANCE_KEYS</field>
        <field name="PRIORITY">2</field>
        <field name="DEFINITION">insert into PerformanceKeys
select uni.datapoints as n,
uni.average as avgM,
uni.stddev as stdM,
uni.average * 12 as avgY,
uni.stddev * Math.sqrt(12) as stdY,
(uni.average * 12 - var_intrest) / (uni.stddev * Math.sqrt(12)) as sharpRatio
from MonthlyPerformance.win:keepall().stat:uni(value) as uni</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">42</field>
        <field name="NAME">KEEP_MONTHLY_PERFORMANCE</field>
        <field name="PRIORITY">3</field>
        <field name="DEFINITION">select *
from MonthlyPerformance.win:keepall()</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">43</field>
        <field name="NAME">CREATE_DRAW_DOWN</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into DrawDown
select 1 - portfolio.value.netLiqValueDouble / max(portfolio.value.netLiqValueDouble) as amount,
case when portfolio.value.netLiqValue = max(portfolio.value.netLiqValue) then DrawDownUtil.resetDrawDownPeriod() else DrawDownUtil.increaseDrawDownPeriod(current_timestamp - prior(1, portfolio.timestamp)) end as period
from Portfolio as portfolio</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">44</field>
        <field name="NAME">CREATE_MAX_DRAW_DOWN</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into MaxDrawDown
select max(drawDown.amount) as amount,
max(drawDown.period) as period
from DrawDown as drawDown</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    <row>
        <field name="id">50</field>
        <field name="NAME">PROCESS_PREARRANGED_ORDERS</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">select * from PrearrangedOrder</field>
        <field name="SUBSCRIBER">RerunOrderSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="ACTIVATABLE" xsi:type="xs:hexBinary">01</field>
        <field name="TARGET_FK" xsi:nil="true" />
    </row>
    </table_data>
</database>
</mysqldump>
