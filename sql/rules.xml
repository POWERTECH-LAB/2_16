<?xml version="1.0"?>
<mysqldump xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<database name="algotrader">
    <table_data name="rule">
    <row>
        <field name="id">1</field>
        <field name="NAME">RETRIEVE_TICKS</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">select *
from pattern[every timer:at (*, 9:17, *, *, 1:5)]
where simulation = false</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS">com.algoTrader.service.TickServiceImpl$RetrieveTickListener</field>
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">2</field>
        <field name="NAME">SET_MARGINS</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">every timer:at (0, 7, *, *, 1:5)</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS">com.algoTrader.service.StockOptionServiceImpl$SetMarginsListener</field>
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">3</field>
        <field name="NAME">PROCESS_CASH_TRANSACTIONS</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">select *
from pattern[every timer:at (0, 8, *, *, 1:5)]
where simulation = false</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS">com.algoTrader.service.AccountServiceImpl$ProcessCashTransactionsListener</field>
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">4</field>
        <field name="NAME">CREATE_PORTFOLIO_VALUE</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into Portfolio
select current_timestamp() as timestamp,
LookupUtil.getPortfolioValue() as value,
cashTransaction
from pattern[every(timer:at (0, 10:18, *, *, 1:5) or cashTransaction=Transaction(type=TransactionType.CREDIT or type=TransactionType.DEBIT or type=TransactionType.INTREST or type=TransactionType.FEES))]
where LookupUtil.hasLastTicks()</field>
        <field name="SUBSCRIBER">com.algoTrader.subscriber.PrintPortfolioValueSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">5</field>
        <field name="NAME">CREATE_MONTHLY_PERFORMANCE</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into MonthlyPerformance
select DateUtil.toDate(current_timestamp()) as date,
portfolio.value.netLiqValue / prior(1, portfolio.value.netLiqValue) - 1 as value
from pattern[every timer:at (0, 18, lastweekday, *, *) -&gt; portfolio=Portfolio]
having prior(1, portfolio.value.netLiqValue) != null and
portfolio.value.netLiqValue != prior(1, portfolio.value.netLiqValue)
</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">10</field>
        <field name="NAME">GET_LAST_TICK</field>
        <field name="PRIORITY">6</field>
        <field name="DEFINITION">select tick.security.id as securityId, tick.* as tick
from Tick.std:groupwin(security.id).win:time(7 days).win:length(1) as tick
</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">13</field>
        <field name="NAME">EXPIRE_POSITION</field>
        <field name="PRIORITY">2</field>
        <field name="DEFINITION">select position.id as positionId
from Tick(security.strategyUnderlaying = true) as indexTick,
method:LookupUtil.getOpenPositions() as position
where instanceof(position.security, com.algoTrader.entity.StockOption)
and cast(position.security?.expiration.time, long) &lt; current_timestamp()
and position.quantity != 0</field>
        <field name="SUBSCRIBER">com.algoTrader.service.StockOptionServiceImpl$ExpirePositionSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">14</field>
        <field name="NAME">CLOSE_POSITION</field>
        <field name="PRIORITY">1</field>
        <field name="DEFINITION">select position.id
from Tick as tick,
method:LookupUtil.getPositions(tick.security) as position
where position.quantity != 0
and position.exitValue != null
and tick.currentValue  &gt;= position.exitValue</field>
        <field name="SUBSCRIBER">com.algoTrader.service.PositionServiceImpl$ClosePositionSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">15</field>
        <field name="NAME">CREATE_AGGREGATED_TICK</field>
        <field name="PRIORITY">5</field>
        <field name="DEFINITION">insert into AggregatedTick
select indexTick, volaTick, optionTick
from pattern [every indexTick=Tick(security.isin = strategy.underlaying.isin)
-&gt; volaTick=Tick(security.id=indexTick.security.volatility.id) and not Tick(security.isin = strategy.underlaying.isin)
-&gt; every optionTick=Tick(security.underlaying.id=indexTick.security.id) and not Tick(security.isin = strategy.underlaying.isin or security.id=indexTick.security.volatility.id)]</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">16</field>
        <field name="NAME">CREATE_EXIT_VALUE</field>
        <field name="PRIORITY">4</field>
        <field name="DEFINITION">select position.id as positionId,
exitValue.value as value
from AggregatedTick,
method:LookupUtil.getPositions(optionTick.security) as position,
method:ThetaUtil.getExitValue(position.strategy.name, cast(optionTick.security, com.algoTrader.entity.StockOption), indexTick.currentValueDouble, volaTick.currentValueDouble / 100) as exitValue
where exitValue.value &lt; position.exitValue
and position.quantity != 0
and optionTick.currentValueDouble != 0</field>
        <field name="SUBSCRIBER">com.algoTrader.service.PositionServiceImpl$SetExitValueSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">17</field>
        <field name="NAME">ROLL_POSITION</field>
        <field name="PRIORITY">3</field>
        <field name="DEFINITION">select position.strategy.name as strategyName,
position.id as positionId,
indexTick.security.id as underlayingId,
indexTick.currentValue as underlayingSpot
from AggregatedTick,
method:LookupUtil.getPositions(optionTick.security) as position
where ThetaUtil.isDeltaTooLow(position.strategy.name, cast(optionTick.security, com.algoTrader.entity.StockOption), optionTick.currentValueDouble, indexTick.currentValueDouble)
and position != null
and position.quantity != 0</field>
        <field name="SUBSCRIBER">com.algoTrader.service.theta.ThetaServiceImpl$RollPositionSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">18</field>
        <field name="NAME">OPEN_POSITION</field>
        <field name="PRIORITY">2</field>
        <field name="DEFINITION">select
strategy.name as strategyName,
optionTick.security.id as securityId,
optionTick.currentValue as currentValue,
indexTick.currentValue as underlayingSpot,
optionTick.settlement as stockOptionSettlement,
indexTick.settlement as underlayingSettlement,
volaTick.currentValueDouble / 100 as volatility
from AggregatedTick
where optionTick.security.id = ?</field>
        <field name="SUBSCRIBER">com.algoTrader.service.theta.ThetaServiceImpl$OpenPositionSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">00</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">19</field>
        <field name="NAME">CREATE_K_FAST</field>
        <field name="PRIORITY">1</field>
        <field name="DEFINITION">insert into KFast
select security,
(select (last(currentValueDouble) - min(currentValueDouble))/(max(currentValueDouble) - min(currentValueDouble)) as call
from Tick(security.isin = strategy.underlaying.isin).win:length(cast(callKFastDays * simulation_eventsPerDay, int))),
(select (last(currentValueDouble) - min(currentValueDouble))/(max(currentValueDouble) - min(currentValueDouble)) as put
from Tick(security.isin = strategy.underlaying.isin).win:length(cast(putKFastDays * simulation_eventsPerDay, int)))
from Tick(security.isin = strategy.underlaying.isin)
having count(id) &gt;= cast(Math.max(callKFastDays,putKFastDays) * simulation_eventsPerDay ,int)</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">01</field>
    </row>
    <row>
        <field name="id">20</field>
        <field name="NAME">CREATE_END_OF_DAY_TICK</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into EndOfDayTick
select tick.*
from pattern [every tick=Tick(security.isin = strategy.underlaying.isin) -&gt; (timer:at (0, 18, *, *, 1:5) and not Tick(security.isin = strategy.underlaying.isin))]</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">01</field>
    </row>
    <row>
        <field name="id">21</field>
        <field name="NAME">CREATE_DAILY_CHANGE</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into DailyChange
select security,
case when currentValueDouble &gt; prior(1, currentValueDouble) then currentValueDouble - prior(1, currentValueDouble) else 0.0 end as uValue,
case when currentValueDouble &lt; prior(1, currentValueDouble) then prior(1, currentValueDouble) - currentValueDouble else 0.0 end as dValue
from EndOfDayTick


</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">23</field>
        <field name="NAME">CREATE_MACD</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into Macd
select security,
ema(currentValueDouble,macdFast) - ema(currentValueDouble,macdSlow) as value
from EndOfDayTick
having count(*) &gt; Math.round(macdSlow * macdWeight)
</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">01</field>
    </row>
    <row>
        <field name="id">30</field>
        <field name="NAME">CREATE_K_SLOW</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into KSlow
select security,
(select avg(call) from KFast.win:length(cast(callKSlowDays * simulation_eventsPerDay, int))) as call,
(select avg(put) from KFast.win:length(cast(putKSlowDays * simulation_eventsPerDay, int))) as put
from KFast
having count(security) &gt;= cast(Math.max(callKSlowDays,putKSlowDays) * simulation_eventsPerDay ,int)</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">01</field>
    </row>
    <row>
        <field name="id">31</field>
        <field name="NAME">CREATE_D_SLOW</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into DSlow
select security,
(select avg(call) from KSlow.win:length(cast(callDSlowDays * simulation_eventsPerDay,int))) as call,
(select avg(put) from KSlow.win:length(cast(putDSlowDays * simulation_eventsPerDay,int))) as put
from KSlow
having count(security) &gt;= cast(Math.max(callDSlowDays,putDSlowDays) * simulation_eventsPerDay ,int)</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">01</field>
    </row>
    <row>
        <field name="id">32</field>
        <field name="NAME">GET_BUY_SIGNAL</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">select
strategy.name as strategyName,
indexTick.security.id as underlayingid,
indexTick.currentValue as underlayingSpot
from pattern [every (indexTick=Tick(security.isin=strategy.underlaying.isin) -&gt; k=KSlow -&gt; d=DSlow)]
where k.put &gt; d.put
and prior(1, k.put) &lt; prior(1, d.put)
and d.put &lt; putTrigger
and putEnabled = true</field>
        <field name="SUBSCRIBER">com.algoTrader.service.theta.ThetaServiceImpl$BuySignalSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">33</field>
        <field name="NAME">GET_SELL_SIGNAL</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">select
strategy.name as strategyName,
indexTick.security.id as underlayingid,
indexTick.currentValue as underlayingSpot
from pattern [every (indexTick=Tick(security.isin=strategy.underlaying.isin) -&gt; k=KSlow -&gt; d=DSlow)]
where k.call &lt; d.call
and prior(1, k.call) &gt; prior(1, d.call)
and d.call &gt; callTrigger
and callEnabled = true</field>
        <field name="SUBSCRIBER">com.algoTrader.service.theta.ThetaServiceImpl$SellSignalSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">34</field>
        <field name="NAME">CREATE_STOCHASTIC_VO</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into StochasticVO
select indexTick.currentValueDouble as underlaying,
DateUtil.toDate(current_timestamp()) as dateTime,
kFast.call as KFastCall,
kFast.put as KFastPut,
kSlow.call as KSlowCall,
kSlow.put as KSlowPut,
dSlow.call as DSlowCall,
dSlow.put as DSlowPut
from pattern [every (indexTick=Tick(security.isin=strategy.underlaying.isin) -&gt; kFast=KFast -&gt; kSlow=KSlow -&gt; dSlow=DSlow)]</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">01</field>
    </row>
    <row>
        <field name="id">35</field>
        <field name="NAME">KEEP_STOCHASTIC_VO</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">select * from StochasticVO.win:length(cast((Math.max(callKSlowDays,putKSlowDays) + Math.max(callDSlowDays,putDSlowDays) + Math.max(callKFastDays,putKFastDays)) * simulation_eventsPerDay, int))</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">01</field>
    </row>
    <row>
        <field name="id">36</field>
        <field name="NAME">CREATE_MACD_SIGNAL</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into MacdSignal
select security,
ema(value,macdSignal) as value
from Macd
having count(*) &gt; Math.round(macdSignal * macdWeight)</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">01</field>
    </row>
    <row>
        <field name="id">37</field>
        <field name="NAME">SET_TREND</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">select
strategy.name as strategyName,
case when macd.value &gt; signal.value then true else false end as bullish
from pattern [every (macd=Macd -&gt; signal=MacdSignal)]
where ((select last(size) from MacdSignal.std:size()) = 1) or
(macd.value &gt; signal.value and prior(1,macd.value) &lt;= prior(1,signal.value)) or
(macd.value &lt; signal.value and prior(1,macd.value) &gt;= prior(1,signal.value))
</field>
        <field name="SUBSCRIBER">com.algoTrader.service.theta.ThetaServiceImpl$TrendSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">01</field>
    </row>
    <row>
        <field name="id">38</field>
        <field name="NAME">CREATE_MACD_VO</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into MacdVO
select indexTick.currentValueDouble as underlaying,
DateUtil.toDate(current_timestamp()) as dateTime,
macd.value as macd,
signal.value as signal
from pattern [every (indexTick=Tick(security.isin=strategy.underlaying.isin) -&gt; macd=Macd -&gt; signal=MacdSignal)]</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">01</field>
    </row>
    <row>
        <field name="id">39</field>
        <field name="NAME">KEEP_MACD_VO</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">select *
from MacdVO.win:keepall()</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">01</field>
    </row>
    <row>
        <field name="id">41</field>
        <field name="NAME">CREATE_PERFORMANCE_KEYS</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into PerformanceKeys
select uni.datapoints as n,
uni.geomaverage as avgM,
uni.stddev as stdM,
Math.pow(1 + uni.geomaverage,12) - 1  as avgY,
uni.stddev * Math.sqrt(12) as stdY,
(Math.pow(1 + uni.geomaverage,12) - 1 - marketIntrest) / (uni.stddev * Math.sqrt(12)) as sharpRatio
from MonthlyPerformance.win:keepall().stat:uni(value) as uni</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">42</field>
        <field name="NAME">KEEP_MONTHLY_PERFORMANCE</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">select *
from MonthlyPerformance.win:keepall()</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">43</field>
        <field name="NAME">CREATE_DRAW_DOWN</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into DrawDown
select 1 - portfolio.value.netLiqValue / max(portfolio.value.netLiqValue) as amount,
case when portfolio.value.netLiqValue = max(portfolio.value.netLiqValue) then DrawDownUtil.resetDrawDownPeriod() else DrawDownUtil.increaseDrawDownPeriod(current_timestamp - prior(1, portfolio.timestamp)) end as period
from Portfolio as portfolio</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">44</field>
        <field name="NAME">CREATE_MAX_DRAW_DOWN</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">insert into MaxDrawDown
select max(drawDown.amount) as amount,
max(drawDown.period) as period
from DrawDown as drawDown</field>
        <field name="SUBSCRIBER" xsi:nil="true" />
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">01</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    <row>
        <field name="id">50</field>
        <field name="NAME">PROCESS_PREARRANGED_ORDERS</field>
        <field name="PRIORITY">0</field>
        <field name="DEFINITION">select 'SMI',*
from PrearrangedOrder</field>
        <field name="SUBSCRIBER">com.algoTrader.service.TransactionServiceImpl$RerunOrderSubscriber</field>
        <field name="LISTENERS" xsi:nil="true" />
        <field name="AUTO_ACTIVATE" xsi:type="xs:hexBinary">00</field>
        <field name="INIT" xsi:type="xs:hexBinary">00</field>
    </row>
    </table_data>
</database>
</mysqldump>
